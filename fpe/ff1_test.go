// See U.S. National Institute of Standards and Technology (NIST)
// Special Publication 800-38G, ``Recommendation for Block Cipher
// Modes of Operation: Methods for Format-Preserving Encryption''
// 2016 Edition.
// The test vector for the FF1 method are available at
// http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/FF1samples.pdf
package fpe

import (
	"crypto/aes"
	"crypto/cipher"
	"github.com/stretchr/testify/assert"
	"math/big"
	"math/rand"
	"testing"
)

const (
	nbrFF1Tests = 600
)

// Common values for tests.
var ff1DefaultTweakSize = 16
var ff1DefaultKeySize = 16
var ff1DefaultRadix = 10
var ff1CommonInput1 = []uint16{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
var ff1CommonInput2 = []uint16{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}
var ff1CommonTweak1 = []byte{0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30}
var ff1CommonTweak2 = []byte{0x37, 0x37, 0x37, 0x37, 0x70, 0x71, 0x72, 0x73, 0x37, 0x37, 0x37}
var ff1CommonKey128 = []byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}
var ff1CommonKey192 = []byte{
	0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
	0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
}
var ff1CommonKey256 = []byte{
	0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
	0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f, 0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
}

type ff1FeistelRound struct {
	name string
	q    []byte
	r    []byte
	s    []byte
	y    big.Int
	m    uint32
	c    big.Int
	a    []uint16
	b    []uint16
}

var ff1Tests = []struct {
	name      string
	key       []byte
	radix     uint32
	tweak     []byte
	in        []uint16
	u         uint32
	v         uint32
	a         []uint16
	b         []uint16
	beta      uint64
	d         uint64
	p         []byte
	out       []uint16
	encRounds []ff1FeistelRound
	decRounds []ff1FeistelRound
}{
	// FF1 samples: http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/FF1samples.pdf.
	{
		"Sample #1",
		ff1CommonKey128,
		10,
		[]byte{},
		ff1CommonInput1,
		5,
		5,
		ff1CommonInput1[:5],
		ff1CommonInput1[5:],
		3,
		8,
		[]byte{1, 2, 1, 0, 0, 10, 10, 5, 0, 0, 0, 10, 0, 0, 0, 0},
		[]uint16{2, 4, 3, 3, 4, 7, 7, 4, 8, 4},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 213},
				[]byte{195, 184, 41, 161, 232, 100, 43, 120, 204, 41, 148, 123, 59, 147, 219, 99},
				[]byte{0xc3, 0xb8, 0x29, 0xa1, 0xe8, 0x64, 0x2b, 0x78},
				getBigInt("14103068008476060536"),
				5,
				getBigInt("61770"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{6, 1, 7, 7, 0},
			},
			{
				"Encrypt: round #1",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 241, 74},
				[]byte{121, 100, 61, 158, 221, 250, 131, 16, 72, 2, 224, 89, 189, 220, 199, 44},
				[]byte{0x79, 0x64, 0x3d, 0x9e, 0xdd, 0xfa, 0x83, 0x10},
				getBigInt("8747184128798655248"),
				5,
				getBigInt("12037"),
				[]uint16{6, 1, 7, 7, 0},
				[]uint16{1, 2, 0, 3, 7},
			},
			{
				"Encrypt: round #2",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 47, 5},
				[]byte{9, 132, 75, 58, 46, 151, 10, 51, 165, 69, 95, 100, 199, 67, 56, 77},
				[]byte{0x09, 0x84, 0x4b, 0x3a, 0x2e, 0x97, 0x0a, 0x33},
				getBigInt("685755756528994867"),
				5,
				getBigInt("56637"),
				[]uint16{1, 2, 0, 3, 7},
				[]uint16{5, 6, 6, 3, 7},
			},
			{
				"Encrypt: round #3",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 221, 61},
				[]byte{125, 29, 160, 178, 41, 158, 148, 66, 104, 179, 136, 46, 59, 198, 72, 57},
				[]byte{0x7d, 0x1d, 0xa0, 0xb2, 0x29, 0x9e, 0x94, 0x42},
				getBigInt("9015538716128482370"),
				5,
				getBigInt("94407"),
				[]uint16{5, 6, 6, 3, 7},
				[]uint16{9, 4, 4, 0, 7},
			},
			{
				"Encrypt: round #4",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 112, 199},
				[]byte{67, 122, 82, 147, 218, 251, 246, 239, 143, 18, 111, 55, 229, 180, 6, 114},
				[]byte{0x43, 0x7a, 0x52, 0x93, 0xda, 0xfb, 0xf6, 0xef},
				getBigInt("4862289542687487727"),
				5,
				getBigInt("44364"),
				[]uint16{9, 4, 4, 0, 7},
				[]uint16{4, 4, 3, 6, 4},
			},
			{
				"Encrypt: round #5",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 173, 76},
				[]byte{216, 186, 138, 193, 244, 52, 17, 22, 8, 188, 121, 95, 62, 150, 28, 18},
				[]byte{0xd8, 0xba, 0x8a, 0xc1, 0xf4, 0x34, 0x11, 0x16},
				getBigInt("15616947223490990358"),
				5,
				getBigInt("84765"),
				[]uint16{4, 4, 3, 6, 4},
				[]uint16{8, 4, 7, 6, 5},
			},
			{
				"Encrypt: round #6",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 75, 29},
				[]byte{190, 15, 19, 163, 157, 41, 253, 232, 18, 10, 55, 166, 7, 219, 21, 192},
				[]byte{0xbe, 0x0f, 0x13, 0xa3, 0x9d, 0x29, 0xfd, 0xe8},
				getBigInt("13695186585294339560"),
				5,
				getBigInt("83924"),
				[]uint16{8, 4, 7, 6, 5},
				[]uint16{8, 3, 9, 2, 4},
			},
			{
				"Encrypt: round #7",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 71, 212},
				[]byte{79, 25, 29, 191, 153, 112, 242, 154, 155, 129, 202, 99, 245, 71, 41, 192},
				[]byte{0x4f, 0x19, 0x1d, 0xbf, 0x99, 0x70, 0xf2, 0x9a},
				getBigInt("5699619512164348570"),
				5,
				getBigInt("33335"),
				[]uint16{8, 3, 9, 2, 4},
				[]uint16{3, 3, 3, 3, 5},
			},
			{
				"Encrypt: round #8",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 130, 55},
				[]byte{194, 52, 118, 117, 58, 50, 235, 26, 244, 207, 225, 21, 85, 189, 189, 27},
				[]byte{0xc2, 0x34, 0x76, 0x75, 0x3a, 0x32, 0xeb, 0x1a},
				getBigInt("13993940188006640410"),
				5,
				getBigInt("24334"),
				[]uint16{3, 3, 3, 3, 5},
				[]uint16{2, 4, 3, 3, 4},
			},
			{
				"Encrypt: round #9",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 95, 14},
				[]byte{143, 196, 218, 77, 67, 14, 128, 21, 112, 172, 197, 74, 236, 154, 4, 243},
				[]byte{0x8f, 0xc4, 0xda, 0x4d, 0x43, 0x0e, 0x80, 0x15},
				getBigInt("10359645068231344149"),
				5,
				getBigInt("77484"),
				[]uint16{2, 4, 3, 3, 4},
				[]uint16{7, 7, 4, 8, 4},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 95, 14},
				[]byte{143, 196, 218, 77, 67, 14, 128, 21, 112, 172, 197, 74, 236, 154, 4, 243},
				[]byte{0x8f, 0xc4, 0xda, 0x4d, 0x43, 0x0e, 0x80, 0x15},
				getBigInt("10359645068231344149"),
				5,
				getBigInt("33335"),
				[]uint16{3, 3, 3, 3, 5},
				[]uint16{2, 4, 3, 3, 4},
			},
			{
				"Decrypt: round #8",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 130, 55},
				[]byte{194, 52, 118, 117, 58, 50, 235, 26, 244, 207, 225, 21, 85, 189, 189, 27},
				[]byte{0xc2, 0x34, 0x76, 0x75, 0x3a, 0x32, 0xeb, 0x1a},
				getBigInt("13993940188006640410"),
				5,
				getBigInt("83924"),
				[]uint16{8, 3, 9, 2, 4},
				[]uint16{3, 3, 3, 3, 5},
			},
			{
				"Decrypt: round #7",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 71, 212},
				[]byte{79, 25, 29, 191, 153, 112, 242, 154, 155, 129, 202, 99, 245, 71, 41, 192},
				[]byte{0x4f, 0x19, 0x1d, 0xbf, 0x99, 0x70, 0xf2, 0x9a},
				getBigInt("5699619512164348570"),
				5,
				getBigInt("84765"),
				[]uint16{8, 4, 7, 6, 5},
				[]uint16{8, 3, 9, 2, 4},
			},
			{
				"Decrypt: round #6",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 75, 29},
				[]byte{190, 15, 19, 163, 157, 41, 253, 232, 18, 10, 55, 166, 7, 219, 21, 192},
				[]byte{0xbe, 0x0f, 0x13, 0xa3, 0x9d, 0x29, 0xfd, 0xe8},
				getBigInt("13695186585294339560"),
				5,
				getBigInt("44364"),
				[]uint16{4, 4, 3, 6, 4},
				[]uint16{8, 4, 7, 6, 5},
			},
			{
				"Decrypt: round #5",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 173, 76},
				[]byte{216, 186, 138, 193, 244, 52, 17, 22, 8, 188, 121, 95, 62, 150, 28, 18},
				[]byte{0xd8, 0xba, 0x8a, 0xc1, 0xf4, 0x34, 0x11, 0x16},
				getBigInt("15616947223490990358"),
				5,
				getBigInt("94407"),
				[]uint16{9, 4, 4, 0, 7},
				[]uint16{4, 4, 3, 6, 4},
			},
			{
				"Decrypt: round #4",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 112, 199},
				[]byte{67, 122, 82, 147, 218, 251, 246, 239, 143, 18, 111, 55, 229, 180, 6, 114},
				[]byte{0x43, 0x7a, 0x52, 0x93, 0xda, 0xfb, 0xf6, 0xef},
				getBigInt("4862289542687487727"),
				5,
				getBigInt("56637"),
				[]uint16{5, 6, 6, 3, 7},
				[]uint16{9, 4, 4, 0, 7},
			},
			{
				"Decrypt: round #3",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 221, 61},
				[]byte{125, 29, 160, 178, 41, 158, 148, 66, 104, 179, 136, 46, 59, 198, 72, 57},
				[]byte{0x7d, 0x1d, 0xa0, 0xb2, 0x29, 0x9e, 0x94, 0x42},
				getBigInt("9015538716128482370"),
				5,
				getBigInt("12037"),
				[]uint16{1, 2, 0, 3, 7},
				[]uint16{5, 6, 6, 3, 7},
			},
			{
				"Decrypt: round #2",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 47, 5},
				[]byte{9, 132, 75, 58, 46, 151, 10, 51, 165, 69, 95, 100, 199, 67, 56, 77},
				[]byte{0x09, 0x84, 0x4b, 0x3a, 0x2e, 0x97, 0x0a, 0x33},
				getBigInt("685755756528994867"),
				5,
				getBigInt("61770"),
				[]uint16{6, 1, 7, 7, 0},
				[]uint16{1, 2, 0, 3, 7},
			},
			{
				"Decrypt: round #1",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 241, 74},
				[]byte{121, 100, 61, 158, 221, 250, 131, 16, 72, 2, 224, 89, 189, 220, 199, 44},
				[]byte{0x79, 0x64, 0x3d, 0x9e, 0xdd, 0xfa, 0x83, 0x10},
				getBigInt("8747184128798655248"),
				5,
				getBigInt("56789"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{6, 1, 7, 7, 0},
			},
			{
				"Decrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 213},
				[]byte{195, 184, 41, 161, 232, 100, 43, 120, 204, 41, 148, 123, 59, 147, 219, 99},
				[]byte{0xc3, 0xb8, 0x29, 0xa1, 0xe8, 0x64, 0x2b, 0x78},
				getBigInt("14103068008476060536"),
				5,
				getBigInt("1234"),
				[]uint16{0, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9},
			},
		},
	},
	{
		"Sample #2",
		ff1CommonKey128,
		10,
		ff1CommonTweak1,
		ff1CommonInput1,
		5,
		5,
		ff1CommonInput1[:5],
		ff1CommonInput1[5:],
		3,
		8,
		[]byte{1, 2, 1, 0, 0, 10, 10, 5, 0, 0, 0, 10, 0, 0, 0, 10},
		[]uint16{6, 1, 2, 4, 2, 0, 0, 7, 7, 3},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 0, 0, 221, 213},
				[]byte{178, 23, 94, 227, 235, 107, 241, 88, 255, 225, 124, 35, 113, 229, 204, 19},
				[]byte{0xb2, 0x17, 0x5e, 0xe3, 0xeb, 0x6b, 0xf1, 0x58},
				getBigInt("12832829996215824728"),
				5,
				getBigInt("25962"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{2, 5, 9, 6, 2},
			},
			{
				"Encrypt: round #1",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 1, 0, 101, 106},
				[]byte{51, 190, 249, 61, 4, 109, 120, 103, 51, 255, 70, 97, 20, 140, 87, 153},
				[]byte{0x33, 0xbe, 0xf9, 0x3d, 0x04, 0x6d, 0x78, 0x67},
				getBigInt("3728691581971953767"),
				5,
				getBigInt("10556"),
				[]uint16{2, 5, 9, 6, 2},
				[]uint16{1, 0, 5, 5, 6},
			},
			{
				"Encrypt: round #2",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 2, 0, 41, 60},
				[]byte{46, 119, 157, 146, 150, 130, 241, 192, 111, 134, 229, 160, 201, 157, 218, 98},
				[]byte{0x2e, 0x77, 0x9d, 0x92, 0x96, 0x82, 0xf1, 0xc0},
				getBigInt("3348318100889203136"),
				5,
				getBigInt("29098"),
				[]uint16{1, 0, 5, 5, 6},
				[]uint16{2, 9, 0, 9, 8},
			},
			{
				"Encrypt: round #3",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 3, 0, 113, 170},
				[]byte{174, 123, 224, 87, 184, 248, 56, 84, 44, 10, 27, 227, 157, 233, 178, 91},
				[]byte{0xae, 0x7b, 0xe0, 0x57, 0xb8, 0xf8, 0x38, 0x54},
				getBigInt("12572889452104923220"),
				5,
				getBigInt("33776"),
				[]uint16{2, 9, 0, 9, 8},
				[]uint16{3, 3, 7, 7, 6},
			},
			{
				"Encrypt: round #4",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 4, 0, 131, 240},
				[]byte{143, 241, 191, 84, 85, 109, 85, 62, 98, 142, 122, 217, 177, 208, 239, 4},
				[]byte{0x8f, 0xf1, 0xbf, 0x54, 0x55, 0x6d, 0x55, 0x3e},
				getBigInt("10372281785742349630"),
				5,
				getBigInt("78728"),
				[]uint16{3, 3, 7, 7, 6},
				[]uint16{7, 8, 7, 2, 8},
			},
			{
				"Encrypt: round #5",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 5, 1, 51, 136},
				[]byte{38, 71, 126, 189, 186, 53, 31, 145, 238, 76, 86, 253, 112, 160, 174, 231},
				[]byte{0x26, 0x47, 0x7e, 0xbd, 0xba, 0x35, 0x1f, 0x91},
				getBigInt("2758312650125680529"),
				5,
				getBigInt("14305"),
				[]uint16{7, 8, 7, 2, 8},
				[]uint16{1, 4, 3, 0, 5},
			},
			{
				"Encrypt: round #6",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 6, 0, 55, 225},
				[]byte{125, 75, 237, 158, 131, 55, 209, 9, 101, 197, 0, 121, 194, 2, 116, 132},
				[]byte{0x7d, 0x4b, 0xed, 0x9e, 0x83, 0x37, 0xd1, 0x09},
				getBigInt("9028571143056380169"),
				5,
				getBigInt("58897"),
				[]uint16{1, 4, 3, 0, 5},
				[]uint16{5, 8, 8, 9, 7},
			},
			{
				"Encrypt: round #7",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 7, 0, 230, 17},
				[]byte{242, 246, 229, 238, 234, 164, 97, 149, 226, 83, 116, 152, 51, 255, 35, 135},
				[]byte{0xf2, 0xf6, 0xe5, 0xee, 0xea, 0xa4, 0x61, 0x95},
				getBigInt("17507433415751000469"),
				5,
				getBigInt("14774"),
				[]uint16{5, 8, 8, 9, 7},
				[]uint16{1, 4, 7, 7, 4},
			},
			{
				"Encrypt: round #8",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 8, 0, 57, 182},
				[]byte{207, 0, 24, 102, 176, 164, 198, 169, 67, 219, 228, 100, 60, 109, 178, 131},
				[]byte{0xcf, 0x00, 0x18, 0x66, 0xb0, 0xa4, 0xc6, 0xa9},
				getBigInt("14915948795180402345"),
				5,
				getBigInt("61242"),
				[]uint16{1, 4, 7, 7, 4},
				[]uint16{6, 1, 2, 4, 2},
			},
			{
				"Encrypt: round #9",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 9, 0, 239, 58},
				[]byte{242, 84, 227, 1, 12, 169, 217, 207, 48, 18, 229, 133, 12, 69, 210, 146},
				[]byte{0xf2, 0x54, 0xe3, 0x01, 0x0c, 0xa9, 0xd9, 0xcf},
				getBigInt("17461831248869185999"),
				5,
				getBigInt("773"),
				[]uint16{6, 1, 2, 4, 2},
				[]uint16{0, 0, 7, 7, 3},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 9, 0, 239, 58},
				[]byte{242, 84, 227, 1, 12, 169, 217, 207, 48, 18, 229, 133, 12, 69, 210, 146},
				[]byte{0xf2, 0x54, 0xe3, 0x01, 0x0c, 0xa9, 0xd9, 0xcf},
				getBigInt("17461831248869185999"),
				5,
				getBigInt("14774"),
				[]uint16{1, 4, 7, 7, 4},
				[]uint16{6, 1, 2, 4, 2},
			},
			{
				"Decrypt: round #8",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 8, 0, 57, 182},
				[]byte{207, 0, 24, 102, 176, 164, 198, 169, 67, 219, 228, 100, 60, 109, 178, 131},
				[]byte{0xcf, 0x00, 0x18, 0x66, 0xb0, 0xa4, 0xc6, 0xa9},
				getBigInt("14915948795180402345"),
				5,
				getBigInt("58897"),
				[]uint16{5, 8, 8, 9, 7},
				[]uint16{1, 4, 7, 7, 4},
			},
			{
				"Decrypt: round #7",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 7, 0, 230, 17},
				[]byte{242, 246, 229, 238, 234, 164, 97, 149, 226, 83, 116, 152, 51, 255, 35, 135},
				[]byte{0xf2, 0xf6, 0xe5, 0xee, 0xea, 0xa4, 0x61, 0x95},
				getBigInt("17507433415751000469"),
				5,
				getBigInt("14305"),
				[]uint16{1, 4, 3, 0, 5},
				[]uint16{5, 8, 8, 9, 7},
			},
			{
				"Decrypt: round #6",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 6, 0, 55, 225},
				[]byte{125, 75, 237, 158, 131, 55, 209, 9, 101, 197, 0, 121, 194, 2, 116, 132},
				[]byte{0x7d, 0x4b, 0xed, 0x9e, 0x83, 0x37, 0xd1, 0x09},
				getBigInt("9028571143056380169"),
				5,
				getBigInt("78728"),
				[]uint16{7, 8, 7, 2, 8},
				[]uint16{1, 4, 3, 0, 5},
			},
			{
				"Decrypt: round #5",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 5, 1, 51, 136},
				[]byte{38, 71, 126, 189, 186, 53, 31, 145, 238, 76, 86, 253, 112, 160, 174, 231},
				[]byte{0x26, 0x47, 0x7e, 0xbd, 0xba, 0x35, 0x1f, 0x91},
				getBigInt("2758312650125680529"),
				5,
				getBigInt("33776"),
				[]uint16{3, 3, 7, 7, 6},
				[]uint16{7, 8, 7, 2, 8},
			},
			{
				"Decrypt: round #4",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 4, 0, 131, 240},
				[]byte{143, 241, 191, 84, 85, 109, 85, 62, 98, 142, 122, 217, 177, 208, 239, 4},
				[]byte{0x8f, 0xf1, 0xbf, 0x54, 0x55, 0x6d, 0x55, 0x3e},
				getBigInt("10372281785742349630"),
				5,
				getBigInt("29098"),
				[]uint16{2, 9, 0, 9, 8},
				[]uint16{3, 3, 7, 7, 6},
			},
			{
				"Decrypt: round #3",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 3, 0, 113, 170},
				[]byte{174, 123, 224, 87, 184, 248, 56, 84, 44, 10, 27, 227, 157, 233, 178, 91},
				[]byte{0xae, 0x7b, 0xe0, 0x57, 0xb8, 0xf8, 0x38, 0x54},
				getBigInt("12572889452104923220"),
				5,
				getBigInt("10556"),
				[]uint16{1, 0, 5, 5, 6},
				[]uint16{2, 9, 0, 9, 8},
			},
			{
				"Decrypt: round #2",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 2, 0, 41, 60},
				[]byte{46, 119, 157, 146, 150, 130, 241, 192, 111, 134, 229, 160, 201, 157, 218, 98},
				[]byte{0x2e, 0x77, 0x9d, 0x92, 0x96, 0x82, 0xf1, 0xc0},
				getBigInt("3348318100889203136"),
				5,
				getBigInt("25962"),
				[]uint16{2, 5, 9, 6, 2},
				[]uint16{1, 0, 5, 5, 6},
			},
			{
				"Decrypt: round #1",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 1, 0, 101, 106},
				[]byte{51, 190, 249, 61, 4, 109, 120, 103, 51, 255, 70, 97, 20, 140, 87, 153},
				[]byte{0x33, 0xbe, 0xf9, 0x3d, 0x04, 0x6d, 0x78, 0x67},
				getBigInt("3728691581971953767"),
				5,
				getBigInt("56789"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{2, 5, 9, 6, 2},
			},
			{
				"Decrypt: round #0",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 0, 0, 221, 213},
				[]byte{178, 23, 94, 227, 235, 107, 241, 88, 255, 225, 124, 35, 113, 229, 204, 19},
				[]byte{0xb2, 0x17, 0x5e, 0xe3, 0xeb, 0x6b, 0xf1, 0x58},
				getBigInt("12832829996215824728"),
				5,
				getBigInt("1234"),
				[]uint16{0, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9},
			},
		},
	},
	{
		"Sample #3",
		ff1CommonKey128,
		36,
		ff1CommonTweak2,
		ff1CommonInput2,
		9,
		10,
		ff1CommonInput2[:9],
		ff1CommonInput2[9:],
		7,
		12,
		[]byte{1, 2, 1, 0, 0, 36, 10, 9, 0, 0, 0, 19, 0, 0, 0, 11},
		[]uint16{10, 9, 29, 31, 4, 0, 22, 21, 21, 9, 20, 13, 30, 5, 0, 9, 14, 30, 22},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 89, 199, 207, 155, 163, 54},
				[]byte{6, 251, 135, 106, 117, 248, 75, 85, 167, 247, 46, 141, 81, 123, 105, 129},
				[]byte{0x06, 0xfb, 0x87, 0x6a, 0x75, 0xf8, 0x4b, 0x55, 0xa7, 0xf7, 0x2e, 0x8d},
				getBigInt("2160989922982028678440365709"),
				9,
				getBigInt("86328211778865"),
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{30, 21, 22, 22, 28, 13, 4, 26, 9},
			},
			{
				"Encrypt: round #1",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 78, 131, 218, 101, 173, 49},
				[]byte{234, 197, 139, 125, 49, 154, 29, 140, 64, 194, 47, 243, 194, 238, 169, 76},
				[]byte{0xea, 0xc5, 0x8b, 0x7d, 0x31, 0x9a, 0x1d, 0x8c, 0x40, 0xc2, 0x2f, 0xf3},
				getBigInt("72658309403017157865885544435"),
				10,
				getBigInt("2050840795665193"),
				[]uint16{30, 21, 22, 22, 28, 13, 4, 26, 9},
				[]uint16{20, 6, 34, 23, 9, 6, 21, 20, 4, 25},
			},
			{"Encrypt: round #2",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 73, 58, 149, 29, 211, 41},
				[]byte{37, 33, 19, 155, 176, 144, 199, 195, 108, 53, 208, 135, 86, 238, 38, 253},
				[]byte{0x25, 0x21, 0x13, 0x9b, 0xb0, 0x90, 0xc7, 0xc3, 0x6c, 0x35, 0xd0, 0x87},
				getBigInt("11490932512368444843291431047"),
				9,
				getBigInt("62046104419768"),
				[]uint16{20, 6, 34, 23, 9, 6, 21, 20, 4, 25},
				[]uint16{21, 35, 27, 21, 4, 21, 6, 29, 4},
			},
			{
				"Encrypt: round #3",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 56, 110, 60, 3, 125, 184},
				[]byte{190, 118, 245, 148, 40, 145, 113, 254, 140, 123, 254, 229, 175, 179, 68, 242},
				[]byte{0xbe, 0x76, 0xf5, 0x94, 0x28, 0x91, 0x71, 0xfe, 0x8c, 0x7b, 0xfe, 0xe5},
				getBigInt("58945964825599758243647454949"),
				10,
				getBigInt("657917498479118"),
				[]uint16{21, 35, 27, 21, 4, 21, 6, 29, 4},
				[]uint16{6, 17, 7, 23, 4, 19, 24, 1, 28, 14},
			},
			{
				"Encrypt: round #4",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 86, 95, 90, 201, 210, 14},
				[]byte{190, 6, 122, 0, 221, 107, 29, 148, 239, 20, 204, 3, 65, 191, 89, 232},
				[]byte{0xbe, 0x06, 0x7a, 0x00, 0xdd, 0x6b, 0x1d, 0x94, 0xef, 0x14, 0xcc, 0x03},
				getBigInt("58809981565639039559866305539"),
				9,
				getBigInt("11087478016443"),
				[]uint16{6, 17, 7, 23, 4, 19, 24, 1, 28, 14},
				[]uint16{3, 33, 17, 18, 22, 5, 2, 16, 27},
			},
			{
				"Encrypt: round #5",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 21, 129, 48, 73, 187},
				[]byte{24, 60, 229, 110, 43, 172, 59, 131, 171, 195, 209, 140, 10, 15, 60, 28},
				[]byte{0x18, 0x3c, 0xe5, 0x6e, 0x2b, 0xac, 0x3b, 0x83, 0xab, 0xc3, 0xd1, 0x8c},
				getBigInt("7501259239102540333015355788"),
				10,
				getBigInt("1474067707044762"),
				[]uint16{3, 33, 17, 18, 22, 5, 2, 16, 27},
				[]uint16{14, 18, 18, 17, 12, 29, 17, 2, 15, 30},
			},
			{
				"Encrypt: round #6",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 60, 168, 34, 13, 163, 154},
				[]byte{102, 69, 248, 239, 138, 120, 149, 151, 91, 100, 200, 48, 50, 18, 66, 154},
				[]byte{0x66, 0x45, 0xf8, 0xef, 0x8a, 0x78, 0x95, 0x97, 0x5b, 0x64, 0xc8, 0x30},
				getBigInt("31652062448968081163323492400"),
				9,
				getBigInt("16581561225707"),
				[]uint16{14, 18, 18, 17, 12, 29, 17, 2, 15, 30},
				[]uint16{5, 31, 21, 16, 25, 15, 18, 0, 11},
			},
			{
				"Encrypt: round #7",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 20, 178, 17, 17, 235},
				[]byte{216, 147, 240, 22, 142, 188, 102, 147, 1, 98, 89, 224, 215, 167, 201, 78},
				[]byte{0xd8, 0x93, 0xf0, 0x16, 0x8e, 0xbc, 0x66, 0x93, 0x01, 0x62, 0x59, 0xe0},
				getBigInt("67027608000963352100272757216"),
				10,
				getBigInt("3562872354372986"),
				[]uint16{5, 31, 21, 16, 25, 15, 18, 0, 11},
				[]uint16{35, 2, 33, 20, 34, 25, 5, 21, 20, 26},
			},
			{
				"Encrypt: round #8",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 168, 105, 221, 15, 253, 122},
				[]byte{224, 21, 156, 34, 235, 118, 75, 203, 253, 130, 208, 126, 246, 84, 24, 95},
				[]byte{0xe0, 0x15, 0x9c, 0x22, 0xeb, 0x76, 0x4b, 0xcb, 0xfd, 0x82, 0xd0, 0x7e},
				getBigInt("69350766975520660763466453118"),
				9,
				getBigInt("28981384438377"),
				[]uint16{35, 2, 33, 20, 34, 25, 5, 21, 20, 26},
				[]uint16{10, 9, 29, 31, 4, 0, 22, 21, 21},
			},
			{
				"Encrypt: round #9",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 26, 91, 193, 31, 226, 105},
				[]byte{163, 250, 122, 135, 113, 186, 179, 153, 25, 193, 9, 244, 214, 165, 149, 93},
				[]byte{0xa3, 0xfa, 0x7a, 0x87, 0x71, 0xba, 0xb3, 0x99, 0x19, 0xc1, 0x09, 0xf4},
				getBigInt("50748866682999323485418883572"),
				10,
				getBigInt("971546148538222"),
				[]uint16{10, 9, 29, 31, 4, 0, 22, 21, 21},
				[]uint16{9, 20, 13, 30, 5, 0, 9, 14, 30, 22},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 26, 91, 193, 31, 226, 105},
				[]byte{163, 250, 122, 135, 113, 186, 179, 153, 25, 193, 9, 244, 214, 165, 149, 93},
				[]byte{0xa3, 0xfa, 0x7a, 0x87, 0x71, 0xba, 0xb3, 0x99, 0x19, 0xc1, 0x09, 0xf4},
				getBigInt("50748866682999323485418883572"),
				10,
				getBigInt("3562872354372986"),
				[]uint16{35, 2, 33, 20, 34, 25, 5, 21, 20, 26},
				[]uint16{10, 9, 29, 31, 4, 0, 22, 21, 21},
			},
			{
				"Decrypt: round #8",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 168, 105, 221, 15, 253, 122},
				[]byte{224, 21, 156, 34, 235, 118, 75, 203, 253, 130, 208, 126, 246, 84, 24, 95},
				[]byte{0xe0, 0x15, 0x9c, 0x22, 0xeb, 0x76, 0x4b, 0xcb, 0xfd, 0x82, 0xd0, 0x7e},
				getBigInt("69350766975520660763466453118"),
				9,
				getBigInt("16581561225707"),
				[]uint16{5, 31, 21, 16, 25, 15, 18, 0, 11},
				[]uint16{35, 2, 33, 20, 34, 25, 5, 21, 20, 26},
			},
			{
				"Decrypt: round #7",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 20, 178, 17, 17, 235},
				[]byte{216, 147, 240, 22, 142, 188, 102, 147, 1, 98, 89, 224, 215, 167, 201, 78},
				[]byte{0xd8, 0x93, 0xf0, 0x16, 0x8e, 0xbc, 0x66, 0x93, 0x01, 0x62, 0x59, 0xe0},
				getBigInt("67027608000963352100272757216"),
				10,
				getBigInt("1474067707044762"),
				[]uint16{14, 18, 18, 17, 12, 29, 17, 2, 15, 30},
				[]uint16{5, 31, 21, 16, 25, 15, 18, 0, 11},
			},
			{
				"Decrypt: round #6",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 60, 168, 34, 13, 163, 154},
				[]byte{102, 69, 248, 239, 138, 120, 149, 151, 91, 100, 200, 48, 50, 18, 66, 154},
				[]byte{0x66, 0x45, 0xf8, 0xef, 0x8a, 0x78, 0x95, 0x97, 0x5b, 0x64, 0xc8, 0x30},
				getBigInt("31652062448968081163323492400"),
				9,
				getBigInt("11087478016443"),
				[]uint16{3, 33, 17, 18, 22, 5, 2, 16, 27},
				[]uint16{14, 18, 18, 17, 12, 29, 17, 2, 15, 30},
			},
			{
				"Decrypt: round #5",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 21, 129, 48, 73, 187},
				[]byte{24, 60, 229, 110, 43, 172, 59, 131, 171, 195, 209, 140, 10, 15, 60, 28},
				[]byte{0x18, 0x3c, 0xe5, 0x6e, 0x2b, 0xac, 0x3b, 0x83, 0xab, 0xc3, 0xd1, 0x8c},
				getBigInt("7501259239102540333015355788"),
				10,
				getBigInt("657917498479118"),
				[]uint16{6, 17, 7, 23, 4, 19, 24, 1, 28, 14},
				[]uint16{3, 33, 17, 18, 22, 5, 2, 16, 27},
			},
			{
				"Decrypt: round #4",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 86, 95, 90, 201, 210, 14},
				[]byte{190, 6, 122, 0, 221, 107, 29, 148, 239, 20, 204, 3, 65, 191, 89, 232},
				[]byte{0xbe, 0x06, 0x7a, 0x00, 0xdd, 0x6b, 0x1d, 0x94, 0xef, 0x14, 0xcc, 0x03},
				getBigInt("58809981565639039559866305539"),
				9,
				getBigInt("62046104419768"),
				[]uint16{21, 35, 27, 21, 4, 21, 6, 29, 4},
				[]uint16{6, 17, 7, 23, 4, 19, 24, 1, 28, 14},
			},
			{
				"Decrypt: round #3",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 56, 110, 60, 3, 125, 184},
				[]byte{190, 118, 245, 148, 40, 145, 113, 254, 140, 123, 254, 229, 175, 179, 68, 242},
				[]byte{0xbe, 0x76, 0xf5, 0x94, 0x28, 0x91, 0x71, 0xfe, 0x8c, 0x7b, 0xfe, 0xe5},
				getBigInt("58945964825599758243647454949"),
				10,
				getBigInt("2050840795665193"),
				[]uint16{20, 6, 34, 23, 9, 6, 21, 20, 4, 25},
				[]uint16{21, 35, 27, 21, 4, 21, 6, 29, 4},
			},
			{"Decrypt: round #2",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 73, 58, 149, 29, 211, 41},
				[]byte{37, 33, 19, 155, 176, 144, 199, 195, 108, 53, 208, 135, 86, 238, 38, 253},
				[]byte{0x25, 0x21, 0x13, 0x9b, 0xb0, 0x90, 0xc7, 0xc3, 0x6c, 0x35, 0xd0, 0x87},
				getBigInt("11490932512368444843291431047"),
				9,
				getBigInt("86328211778865"),
				[]uint16{30, 21, 22, 22, 28, 13, 4, 26, 9},
				[]uint16{20, 6, 34, 23, 9, 6, 21, 20, 4, 25},
			},
			{
				"Decrypt: round #1",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 78, 131, 218, 101, 173, 49},
				[]byte{234, 197, 139, 125, 49, 154, 29, 140, 64, 194, 47, 243, 194, 238, 169, 76},
				[]byte{0xea, 0xc5, 0x8b, 0x7d, 0x31, 0x9a, 0x1d, 0x8c, 0x40, 0xc2, 0x2f, 0xf3},
				getBigInt("72658309403017157865885544435"),
				10,
				getBigInt("943139646579510"),
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{30, 21, 22, 22, 28, 13, 4, 26, 9},
			},
			{
				"Decrypt: round #0",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 89, 199, 207, 155, 163, 54},
				[]byte{6, 251, 135, 106, 117, 248, 75, 85, 167, 247, 46, 141, 81, 123, 105, 129},
				[]byte{0x06, 0xfb, 0x87, 0x6a, 0x75, 0xf8, 0x4b, 0x55, 0xa7, 0xf7, 0x2e, 0x8d},
				getBigInt("2160989922982028678440365709"),
				9,
				getBigInt("82906087076"),
				[]uint16{0, 1, 2, 3, 4, 5, 6, 7, 8},
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
			},
		},
	},
	{
		"Sample #4",
		ff1CommonKey192,
		10,
		[]byte{},
		ff1CommonInput1,
		5,
		5,
		ff1CommonInput1[:5],
		ff1CommonInput1[5:],
		3,
		8,
		[]byte{1, 2, 1, 0, 0, 10, 10, 5, 0, 0, 0, 10, 0, 0, 0, 0},
		[]uint16{2, 8, 3, 0, 6, 6, 8, 1, 3, 2},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 213},
				[]byte{218, 224, 209, 93, 155, 127, 33, 31, 56, 9, 56, 226, 148, 92, 125, 83},
				[]byte{0xda, 0xe0, 0xd1, 0x5d, 0x9b, 0x7f, 0x21, 0x1f},
				getBigInt("15771836095022440735"),
				5,
				getBigInt("41969"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{4, 1, 9, 6, 9},
			},
			{
				"Encrypt: round #1",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 163, 241},
				[]byte{248, 93, 91, 186, 160, 60, 208, 226, 105, 124, 242, 50, 99, 186, 30, 131},
				[]byte{0xf8, 0x5d, 0x5b, 0xba, 0xa0, 0x3c, 0xd0, 0xe2},
				getBigInt("17896561351350604002"),
				5,
				getBigInt("60791"),
				[]uint16{4, 1, 9, 6, 9},
				[]uint16{6, 0, 7, 9, 1},
			},
			{
				"Encrypt: round #2",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 237, 119},
				[]byte{245, 226, 145, 48, 198, 231, 145, 104, 47, 175, 248, 143, 17, 27, 248, 14},
				[]byte{0xf5, 0xe2, 0x91, 0x30, 0xc6, 0xe7, 0x91, 0x68},
				getBigInt("17717883522710475112"),
				5,
				getBigInt("17081"),
				[]uint16{6, 0, 7, 9, 1},
				[]uint16{1, 7, 0, 8, 1},
			},
			{
				"Encrypt: round #3",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 66, 185},
				[]byte{183, 184, 63, 73, 147, 0, 59, 248, 121, 146, 109, 188, 87, 255, 122, 41},
				[]byte{0xb7, 0xb8, 0x3f, 0x49, 0x93, 0x00, 0x3b, 0xf8},
				getBigInt("13238400689887001592"),
				5,
				getBigInt("62383"),
				[]uint16{1, 7, 0, 8, 1},
				[]uint16{6, 2, 3, 8, 3},
			},
			{
				"Encrypt: round #4",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 243, 175},
				[]byte{186, 50, 129, 208, 56, 210, 79, 221, 252, 195, 36, 1, 252, 128, 36, 228},
				[]byte{0xba, 0x32, 0x81, 0xd0, 0x38, 0xd2, 0x4f, 0xdd},
				getBigInt("13416928971196616669"),
				5,
				getBigInt("33750"),
				[]uint16{6, 2, 3, 8, 3},
				[]uint16{3, 3, 7, 5, 0},
			},
			{
				"Encrypt: round #5",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 131, 214},
				[]byte{64, 98, 46, 91, 23, 106, 173, 17, 139, 88, 99, 107, 33, 245, 227, 144},
				[]byte{0x40, 0x62, 0x2e, 0x5b, 0x17, 0x6a, 0xad, 0x11},
				getBigInt("4639321534914800913"),
				5,
				getBigInt("63296"),
				[]uint16{3, 3, 7, 5, 0},
				[]uint16{6, 3, 2, 9, 6},
			},
			{
				"Encrypt: round #6",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 247, 64},
				[]byte{83, 25, 142, 32, 135, 231, 170, 153, 228, 117, 228, 10, 15, 160, 193, 187},
				[]byte{0x53, 0x19, 0x8e, 0x20, 0x87, 0xe7, 0xaa, 0x99},
				getBigInt("5987973449935989401"),
				5,
				getBigInt("23151"),
				[]uint16{6, 3, 2, 9, 6},
				[]uint16{2, 3, 1, 5, 1},
			},
			{
				"Encrypt: round #7",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 90, 111},
				[]byte{6, 60, 69, 210, 248, 212, 27, 65, 129, 80, 127, 172, 156, 189, 243, 222},
				[]byte{0x06, 0x3c, 0x45, 0xd2, 0xf8, 0xd4, 0x1b, 0x41},
				getBigInt("449310835250305857"),
				5,
				getBigInt("69153"),
				[]uint16{2, 3, 1, 5, 1},
				[]uint16{6, 9, 1, 5, 3},
			},
			{
				"Encrypt: round #8",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 14, 33},
				[]byte{44, 180, 177, 187, 210, 235, 159, 163, 172, 17, 83, 47, 25, 2, 246, 150},
				[]byte{0x2c, 0xb4, 0xb1, 0xbb, 0xd2, 0xeb, 0x9f, 0xa3},
				getBigInt("3221395053732405155"),
				5,
				getBigInt("28306"),
				[]uint16{6, 9, 1, 5, 3},
				[]uint16{2, 8, 3, 0, 6},
			},
			{
				"Encrypt: round #9",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 110, 146},
				[]byte{166, 31, 223, 78, 22, 140, 56, 3, 50, 112, 162, 234, 33, 174, 46, 146},
				[]byte{0xa6, 0x1f, 0xdf, 0x4e, 0x16, 0x8c, 0x38, 0x03},
				getBigInt("11970531861052798979"),
				5,
				getBigInt("68132"),
				[]uint16{2, 8, 3, 0, 6},
				[]uint16{6, 8, 1, 3, 2},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 110, 146},
				[]byte{166, 31, 223, 78, 22, 140, 56, 3, 50, 112, 162, 234, 33, 174, 46, 146},
				[]byte{0xa6, 0x1f, 0xdf, 0x4e, 0x16, 0x8c, 0x38, 0x03},
				getBigInt("11970531861052798979"),
				5,
				getBigInt("69153"),
				[]uint16{6, 9, 1, 5, 3},
				[]uint16{2, 8, 3, 0, 6},
			},
			{
				"Decrypt: round #8",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 14, 33},
				[]byte{44, 180, 177, 187, 210, 235, 159, 163, 172, 17, 83, 47, 25, 2, 246, 150},
				[]byte{0x2c, 0xb4, 0xb1, 0xbb, 0xd2, 0xeb, 0x9f, 0xa3},
				getBigInt("3221395053732405155"),
				5,
				getBigInt("23151"),
				[]uint16{2, 3, 1, 5, 1},
				[]uint16{6, 9, 1, 5, 3},
			},
			{
				"Decrypt: round #7",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 90, 111},
				[]byte{6, 60, 69, 210, 248, 212, 27, 65, 129, 80, 127, 172, 156, 189, 243, 222},
				[]byte{0x06, 0x3c, 0x45, 0xd2, 0xf8, 0xd4, 0x1b, 0x41},
				getBigInt("449310835250305857"),
				5,
				getBigInt("63296"),
				[]uint16{6, 3, 2, 9, 6},
				[]uint16{2, 3, 1, 5, 1},
			},
			{
				"Decrypt: round #6",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 247, 64},
				[]byte{83, 25, 142, 32, 135, 231, 170, 153, 228, 117, 228, 10, 15, 160, 193, 187},
				[]byte{0x53, 0x19, 0x8e, 0x20, 0x87, 0xe7, 0xaa, 0x99},
				getBigInt("5987973449935989401"),
				5,
				getBigInt("33750"),
				[]uint16{3, 3, 7, 5, 0},
				[]uint16{6, 3, 2, 9, 6},
			},
			{
				"Decrypt: round #5",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 131, 214},
				[]byte{64, 98, 46, 91, 23, 106, 173, 17, 139, 88, 99, 107, 33, 245, 227, 144},
				[]byte{0x40, 0x62, 0x2e, 0x5b, 0x17, 0x6a, 0xad, 0x11},
				getBigInt("4639321534914800913"),
				5,
				getBigInt("62383"),
				[]uint16{6, 2, 3, 8, 3},
				[]uint16{3, 3, 7, 5, 0},
			},
			{
				"Decrypt: round #4",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 243, 175},
				[]byte{186, 50, 129, 208, 56, 210, 79, 221, 252, 195, 36, 1, 252, 128, 36, 228},
				[]byte{0xba, 0x32, 0x81, 0xd0, 0x38, 0xd2, 0x4f, 0xdd},
				getBigInt("13416928971196616669"),
				5,
				getBigInt("17081"),
				[]uint16{1, 7, 0, 8, 1},
				[]uint16{6, 2, 3, 8, 3},
			},
			{
				"Decrypt: round #3",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 66, 185},
				[]byte{183, 184, 63, 73, 147, 0, 59, 248, 121, 146, 109, 188, 87, 255, 122, 41},
				[]byte{0xb7, 0xb8, 0x3f, 0x49, 0x93, 0x00, 0x3b, 0xf8},
				getBigInt("13238400689887001592"),
				5,
				getBigInt("60791"),
				[]uint16{6, 0, 7, 9, 1},
				[]uint16{1, 7, 0, 8, 1},
			},
			{
				"Decrypt: round #2",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 237, 119},
				[]byte{245, 226, 145, 48, 198, 231, 145, 104, 47, 175, 248, 143, 17, 27, 248, 14},
				[]byte{0xf5, 0xe2, 0x91, 0x30, 0xc6, 0xe7, 0x91, 0x68},
				getBigInt("17717883522710475112"),
				5,
				getBigInt("41969"),
				[]uint16{4, 1, 9, 6, 9},
				[]uint16{6, 0, 7, 9, 1},
			},

			{
				"Decrypt: round #1",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 163, 241},
				[]byte{248, 93, 91, 186, 160, 60, 208, 226, 105, 124, 242, 50, 99, 186, 30, 131},
				[]byte{0xf8, 0x5d, 0x5b, 0xba, 0xa0, 0x3c, 0xd0, 0xe2},
				getBigInt("17896561351350604002"),
				5,
				getBigInt("56789"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{4, 1, 9, 6, 9},
			},
			{
				"Decrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 213},
				[]byte{218, 224, 209, 93, 155, 127, 33, 31, 56, 9, 56, 226, 148, 92, 125, 83},
				[]byte{0xda, 0xe0, 0xd1, 0x5d, 0x9b, 0x7f, 0x21, 0x1f},
				getBigInt("15771836095022440735"),
				5,
				getBigInt("1234"),
				[]uint16{0, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9},
			},
		},
	},
	{
		"Sample #5",
		ff1CommonKey192,
		10,
		ff1CommonTweak1,
		ff1CommonInput1,
		5,
		5,
		ff1CommonInput1[:5],
		ff1CommonInput1[5:],
		3,
		8,
		[]byte{1, 2, 1, 0, 0, 10, 10, 5, 0, 0, 0, 10, 0, 0, 0, 10},
		[]uint16{2, 4, 9, 6, 6, 5, 5, 5, 4, 9},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 0, 0, 221, 213},
				[]byte{112, 16, 205, 170, 62, 50, 190, 188, 155, 253, 85, 202, 210, 92, 216, 16},
				[]byte{0x70, 0x10, 0xcd, 0xaa, 0x3e, 0x32, 0xbe, 0xbc},
				getBigInt("8075180262946946748"),
				5,
				getBigInt("47982"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{4, 7, 9, 8, 2},
			},
			{
				"Encrypt: round #1",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 1, 0, 187, 110},
				[]byte{110, 183, 202, 34, 97, 2, 82, 23, 236, 94, 6, 159, 169, 202, 154, 67},
				[]byte{0x6e, 0xb7, 0xca, 0x22, 0x61, 0x02, 0x52, 0x17},
				getBigInt("7978067513915363863"),
				5,
				getBigInt("20652"),
				[]uint16{4, 7, 9, 8, 2},
				[]uint16{2, 0, 6, 5, 2},
			},
			{
				"Encrypt: round #2",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 2, 0, 80, 172},
				[]byte{77, 185, 202, 213, 23, 247, 236, 146, 216, 16, 80, 114, 81, 64, 194, 156},
				[]byte{0x4d, 0xb9, 0xca, 0xd5, 0x17, 0xf7, 0xec, 0x92},
				getBigInt("5600730628190891154"),
				5,
				getBigInt("39136"),
				[]uint16{2, 0, 6, 5, 2},
				[]uint16{3, 9, 1, 3, 6},
			},
			{
				"Encrypt: round #3",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 3, 0, 152, 224},
				[]byte{248, 131, 99, 76, 163, 213, 249, 170, 207, 246, 88, 18, 149, 117, 206, 201},
				[]byte{0xf8, 0x83, 0x63, 0x4c, 0xa3, 0xd5, 0xf9, 0xaa},
				getBigInt("17907265724172597674"),
				5,
				getBigInt("18326"),
				[]uint16{3, 9, 1, 3, 6},
				[]uint16{1, 8, 3, 2, 6},
			},
			{
				"Encrypt: round #4",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 4, 0, 71, 150},
				[]byte{232, 173, 241, 62, 215, 103, 225, 236, 213, 219, 131, 232, 209, 121, 131, 85},
				[]byte{0xe8, 0xad, 0xf1, 0x3e, 0xd7, 0x67, 0xe1, 0xec},
				getBigInt("16766322239974400492"),
				5,
				getBigInt("39628"),
				[]uint16{1, 8, 3, 2, 6},
				[]uint16{3, 9, 6, 2, 8},
			},
			{
				"Encrypt: round #5",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 5, 0, 154, 204},
				[]byte{243, 200, 197, 156, 194, 73, 229, 96, 210, 102, 198, 51, 88, 117, 150, 183},
				[]byte{0xf3, 0xc8, 0xc5, 0x9c, 0xc2, 0x49, 0xe5, 0x60},
				getBigInt("17566507623623812448"),
				5,
				getBigInt("30774"),
				[]uint16{3, 9, 6, 2, 8},
				[]uint16{3, 0, 7, 7, 4},
			},
			{
				"Encrypt: round #6",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 6, 0, 120, 54},
				[]byte{22, 49, 140, 229, 78, 126, 128, 124, 96, 168, 14, 191, 118, 196, 3, 159},
				[]byte{0x16, 0x31, 0x8c, 0xe5, 0x4e, 0x7e, 0x80, 0x7c},
				getBigInt("1599214259185549436"),
				5,
				getBigInt("89064"),
				[]uint16{3, 0, 7, 7, 4},
				[]uint16{8, 9, 0, 6, 4},
			},
			{
				"Encrypt: round #7",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 7, 1, 91, 232},
				[]byte{201, 231, 34, 87, 24, 209, 194, 187, 141, 236, 62, 170, 118, 31, 102, 254},
				[]byte{0xc9, 0xe7, 0x22, 0x57, 0x18, 0xd1, 0xc2, 0xbb},
				getBigInt("14548634878717575867"),
				5,
				getBigInt("6641"),
				[]uint16{8, 9, 0, 6, 4},
				[]uint16{0, 6, 6, 4, 1},
			},
			{
				"Encrypt: round #8",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 8, 0, 25, 241},
				[]byte{232, 57, 243, 35, 205, 180, 65, 30, 157, 118, 122, 9, 50, 76, 141, 147},
				[]byte{0xe8, 0x39, 0xf3, 0x23, 0xcd, 0xb4, 0x41, 0x1e},
				getBigInt("16733673225572335902"),
				5,
				getBigInt("24966"),
				[]uint16{0, 6, 6, 4, 1},
				[]uint16{2, 4, 9, 6, 6},
			},
			{
				"Encrypt: round #9",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 9, 0, 97, 134},
				[]byte{171, 238, 207, 235, 71, 34, 238, 44, 25, 22, 131, 21, 159, 75, 228, 55},
				[]byte{0xab, 0xee, 0xcf, 0xeb, 0x47, 0x22, 0xee, 0x2c},
				getBigInt("12389068234360548908"),
				5,
				getBigInt("55549"),
				[]uint16{2, 4, 9, 6, 6},
				[]uint16{5, 5, 5, 4, 9},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 9, 0, 97, 134},
				[]byte{171, 238, 207, 235, 71, 34, 238, 44, 25, 22, 131, 21, 159, 75, 228, 55},
				[]byte{0xab, 0xee, 0xcf, 0xeb, 0x47, 0x22, 0xee, 0x2c},
				getBigInt("12389068234360548908"),
				5,
				getBigInt("6641"),
				[]uint16{0, 6, 6, 4, 1},
				[]uint16{2, 4, 9, 6, 6},
			},
			{
				"Decrypt: round #8",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 8, 0, 25, 241},
				[]byte{232, 57, 243, 35, 205, 180, 65, 30, 157, 118, 122, 9, 50, 76, 141, 147},
				[]byte{0xe8, 0x39, 0xf3, 0x23, 0xcd, 0xb4, 0x41, 0x1e},
				getBigInt("16733673225572335902"),
				5,
				getBigInt("89064"),
				[]uint16{8, 9, 0, 6, 4},
				[]uint16{0, 6, 6, 4, 1},
			},
			{
				"Decrypt: round #7",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 7, 1, 91, 232},
				[]byte{201, 231, 34, 87, 24, 209, 194, 187, 141, 236, 62, 170, 118, 31, 102, 254},
				[]byte{0xc9, 0xe7, 0x22, 0x57, 0x18, 0xd1, 0xc2, 0xbb},
				getBigInt("14548634878717575867"),
				5,
				getBigInt("30774"),
				[]uint16{3, 0, 7, 7, 4},
				[]uint16{8, 9, 0, 6, 4},
			},
			{
				"Decrypt: round #6",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 6, 0, 120, 54},
				[]byte{22, 49, 140, 229, 78, 126, 128, 124, 96, 168, 14, 191, 118, 196, 3, 159},
				[]byte{0x16, 0x31, 0x8c, 0xe5, 0x4e, 0x7e, 0x80, 0x7c},
				getBigInt("1599214259185549436"),
				5,
				getBigInt("39628"),
				[]uint16{3, 9, 6, 2, 8},
				[]uint16{3, 0, 7, 7, 4},
			},
			{
				"Decrypt: round #5",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 5, 0, 154, 204},
				[]byte{243, 200, 197, 156, 194, 73, 229, 96, 210, 102, 198, 51, 88, 117, 150, 183},
				[]byte{0xf3, 0xc8, 0xc5, 0x9c, 0xc2, 0x49, 0xe5, 0x60},
				getBigInt("17566507623623812448"),
				5,
				getBigInt("18326"),
				[]uint16{1, 8, 3, 2, 6},
				[]uint16{3, 9, 6, 2, 8},
			},
			{
				"Decrypt: round #4",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 4, 0, 71, 150},
				[]byte{232, 173, 241, 62, 215, 103, 225, 236, 213, 219, 131, 232, 209, 121, 131, 85},
				[]byte{0xe8, 0xad, 0xf1, 0x3e, 0xd7, 0x67, 0xe1, 0xec},
				getBigInt("16766322239974400492"),
				5,
				getBigInt("39136"),
				[]uint16{3, 9, 1, 3, 6},
				[]uint16{1, 8, 3, 2, 6},
			},
			{
				"Decrypt: round #3",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 3, 0, 152, 224},
				[]byte{248, 131, 99, 76, 163, 213, 249, 170, 207, 246, 88, 18, 149, 117, 206, 201},
				[]byte{0xf8, 0x83, 0x63, 0x4c, 0xa3, 0xd5, 0xf9, 0xaa},
				getBigInt("17907265724172597674"),
				5,
				getBigInt("20652"),
				[]uint16{2, 0, 6, 5, 2},
				[]uint16{3, 9, 1, 3, 6},
			},
			{
				"Decrypt: round #2",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 2, 0, 80, 172},
				[]byte{77, 185, 202, 213, 23, 247, 236, 146, 216, 16, 80, 114, 81, 64, 194, 156},
				[]byte{0x4d, 0xb9, 0xca, 0xd5, 0x17, 0xf7, 0xec, 0x92},
				getBigInt("5600730628190891154"),
				5,
				getBigInt("47982"),
				[]uint16{4, 7, 9, 8, 2},
				[]uint16{2, 0, 6, 5, 2},
			},
			{
				"Decrypt: round #1",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 1, 0, 187, 110},
				[]byte{110, 183, 202, 34, 97, 2, 82, 23, 236, 94, 6, 159, 169, 202, 154, 67},
				[]byte{0x6e, 0xb7, 0xca, 0x22, 0x61, 0x02, 0x52, 0x17},
				getBigInt("7978067513915363863"),
				5,
				getBigInt("56789"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{4, 7, 9, 8, 2},
			},
			{
				"Decrypt: round #0",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 0, 0, 221, 213},
				[]byte{112, 16, 205, 170, 62, 50, 190, 188, 155, 253, 85, 202, 210, 92, 216, 16},
				[]byte{0x70, 0x10, 0xcd, 0xaa, 0x3e, 0x32, 0xbe, 0xbc},
				getBigInt("8075180262946946748"),
				5,
				getBigInt("1234"),
				[]uint16{0, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9},
			},
		},
	},
	{
		"Sample #6",
		ff1CommonKey192,
		36,
		ff1CommonTweak2,
		ff1CommonInput2,
		9,
		10,
		ff1CommonInput2[:9],
		ff1CommonInput2[9:],
		7,
		12,
		[]byte{1, 2, 1, 0, 0, 36, 10, 9, 0, 0, 0, 19, 0, 0, 0, 11},
		[]uint16{33, 11, 19, 3, 20, 31, 3, 5, 19, 27, 10, 32, 33, 31, 3, 2, 34, 28, 27},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 89, 199, 207, 155, 163, 54},
				[]byte{225, 238, 247, 123, 137, 230, 22, 54, 5, 163, 154, 25, 218, 40, 23, 48},
				[]byte{0xe1, 0xee, 0xf7, 0x7b, 0x89, 0xe6, 0x16, 0x36, 0x05, 0xa3, 0x9a, 0x19},
				getBigInt("69923020258278366124416670233"),
				9,
				getBigInt("74443406317757"),
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{26, 13, 34, 29, 30, 1, 28, 19, 17},
			},
			{
				"Encrypt: round #1",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 67, 180, 180, 202, 24, 189},
				[]byte{11, 66, 76, 139, 82, 150, 184, 220, 184, 125, 202, 48, 68, 104, 44, 131},
				[]byte{0x0b, 0x42, 0x4c, 0x8b, 0x52, 0x96, 0xb8, 0xdc, 0xb8, 0x7d, 0xca, 0x30},
				getBigInt("3484485682030632835911371312"),
				10,
				getBigInt("887248406539622"),
				[]uint16{26, 13, 34, 29, 30, 1, 28, 19, 17},
				[]uint16{8, 26, 18, 4, 10, 17, 6, 15, 21, 2},
			},
			{
				"Encrypt: round #2",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 38, 242, 158, 25, 109, 102},
				[]byte{160, 235, 56, 15, 222, 178, 107, 202, 91, 205, 232, 58, 168, 245, 133, 82},
				[]byte{0xa0, 0xeb, 0x38, 0x0f, 0xde, 0xb2, 0x6b, 0xca, 0x5b, 0xcd, 0xe8, 0x3a},
				getBigInt("49801963884295857596938446906"),
				9,
				getBigInt("30411825086711"),
				[]uint16{8, 26, 18, 4, 10, 17, 6, 15, 21, 2},
				[]uint16{10, 28, 2, 35, 35, 16, 2, 27, 11},
			},
			{
				"Encrypt: round #3",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 27, 168, 206, 8, 0, 247},
				[]byte{210, 168, 189, 131, 204, 156, 173, 50, 164, 116, 195, 152, 23, 34, 66, 112},
				[]byte{0xd2, 0xa8, 0xbd, 0x83, 0xcc, 0x9c, 0xad, 0x32, 0xa4, 0x74, 0xc3, 0x98},
				getBigInt("65195846558710307865574556568"),
				10,
				getBigInt("2463858254819582"),
				[]uint16{10, 28, 2, 35, 35, 16, 2, 27, 11},
				[]uint16{24, 9, 13, 4, 30, 29, 35, 16, 1, 26},
			},
			{
				"Encrypt: round #4",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 192, 221, 180, 14, 48, 254},
				[]byte{50, 228, 242, 3, 81, 153, 230, 28, 225, 33, 253, 16, 5, 235, 47, 133},
				[]byte{0x32, 0xe4, 0xf2, 0x03, 0x51, 0x99, 0xe6, 0x1c, 0xe1, 0x21, 0xfd, 0x10},
				getBigInt("15751028451848459363561897232"),
				9,
				getBigInt("3710307925511"),
				[]uint16{24, 9, 13, 4, 30, 29, 35, 16, 1, 26},
				[]uint16{1, 11, 12, 17, 25, 19, 17, 29, 35},
			},
			{
				"Encrypt: round #5",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3, 95, 223, 149, 254, 7},
				[]byte{20, 139, 225, 142, 115, 92, 228, 59, 37, 141, 157, 233, 13, 24, 120, 20},
				[]byte{0x14, 0x8b, 0xe1, 0x8e, 0x73, 0x5c, 0xe4, 0x3b, 0x25, 0x8d, 0x9d, 0xe9},
				getBigInt("6358806045562408921612525033"),
				10,
				getBigInt("505986281098983"),
				[]uint16{1, 11, 12, 17, 25, 19, 17, 29, 35},
				[]uint16{4, 35, 12, 30, 31, 35, 21, 5, 23, 27},
			},
			{
				"Encrypt: round #6",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 204, 49, 28, 139, 206, 231},
				[]byte{111, 210, 244, 114, 175, 68, 226, 88, 28, 15, 237, 141, 213, 149, 8, 140},
				[]byte{0x6f, 0xd2, 0xf4, 0x72, 0xaf, 0x44, 0xe2, 0x58, 0x1c, 0x0f, 0xed, 0x8d},
				getBigInt("34607864885268487474569538957"),
				9,
				getBigInt("83995813604244"),
				[]uint16{4, 35, 12, 30, 31, 35, 21, 5, 23, 27},
				[]uint16{29, 27, 31, 5, 6, 25, 23, 6, 12},
			},
			{
				"Encrypt: round #7",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 76, 100, 204, 161, 235, 148},
				[]byte{249, 112, 52, 211, 119, 17, 237, 12, 232, 70, 240, 146, 159, 96, 189, 19},
				[]byte{0xf9, 0x70, 0x34, 0xd3, 0x77, 0x11, 0xed, 0x0c, 0xe8, 0x46, 0xf0, 0x92},
				getBigInt("77197416601211768759113937042"),
				10,
				getBigInt("1678890359766905"),
				[]uint16{29, 27, 31, 5, 6, 25, 23, 6, 12},
				[]uint16{16, 19, 4, 7, 21, 0, 19, 16, 26, 17},
			},
			{
				"Encrypt: round #8",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 246, 241, 31, 130, 191, 121},
				[]byte{243, 10, 51, 1, 73, 227, 154, 9, 74, 56, 166, 35, 13, 232, 47, 130},
				[]byte{0xf3, 0x0a, 0x33, 0x01, 0x49, 0xe3, 0x9a, 0x09, 0x4a, 0x38, 0xa6, 0x23},
				getBigInt("75217187509244636966656976419"),
				9,
				getBigInt("94000208056759"),
				[]uint16{16, 19, 4, 7, 21, 0, 19, 16, 26, 17},
				[]uint16{33, 11, 19, 3, 20, 31, 3, 5, 19},
			},
			{
				"Encrypt: round #9",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 85, 126, 33, 2, 145, 183},
				[]byte{46, 192, 125, 183, 222, 27, 102, 190, 19, 229, 44, 50, 183, 135, 221, 189},
				[]byte{0x2e, 0xc0, 0x7d, 0xb7, 0xde, 0x1b, 0x66, 0xbe, 0x13, 0xe5, 0x2c, 0x32},
				getBigInt("14469017896716904824737967154"),
				10,
				getBigInt("2772911295818667"),
				[]uint16{33, 11, 19, 3, 20, 31, 3, 5, 19},
				[]uint16{27, 10, 32, 33, 31, 3, 2, 34, 28, 27},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 85, 126, 33, 2, 145, 183},
				[]byte{46, 192, 125, 183, 222, 27, 102, 190, 19, 229, 44, 50, 183, 135, 221, 189},
				[]byte{0x2e, 0xc0, 0x7d, 0xb7, 0xde, 0x1b, 0x66, 0xbe, 0x13, 0xe5, 0x2c, 0x32},
				getBigInt("14469017896716904824737967154"),
				10,
				getBigInt("1678890359766905"),
				[]uint16{16, 19, 4, 7, 21, 0, 19, 16, 26, 17},
				[]uint16{33, 11, 19, 3, 20, 31, 3, 5, 19},
			},
			{
				"Decrypt: round #8",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 246, 241, 31, 130, 191, 121},
				[]byte{243, 10, 51, 1, 73, 227, 154, 9, 74, 56, 166, 35, 13, 232, 47, 130},
				[]byte{0xf3, 0x0a, 0x33, 0x01, 0x49, 0xe3, 0x9a, 0x09, 0x4a, 0x38, 0xa6, 0x23},
				getBigInt("75217187509244636966656976419"),
				9,
				getBigInt("83995813604244"),
				[]uint16{29, 27, 31, 5, 6, 25, 23, 6, 12},
				[]uint16{16, 19, 4, 7, 21, 0, 19, 16, 26, 17},
			},
			{
				"Decrypt: round #7",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 76, 100, 204, 161, 235, 148},
				[]byte{249, 112, 52, 211, 119, 17, 237, 12, 232, 70, 240, 146, 159, 96, 189, 19},
				[]byte{0xf9, 0x70, 0x34, 0xd3, 0x77, 0x11, 0xed, 0x0c, 0xe8, 0x46, 0xf0, 0x92},
				getBigInt("77197416601211768759113937042"),
				10,
				getBigInt("505986281098983"),
				[]uint16{4, 35, 12, 30, 31, 35, 21, 5, 23, 27},
				[]uint16{29, 27, 31, 5, 6, 25, 23, 6, 12},
			},
			{
				"Decrypt: round #6",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 204, 49, 28, 139, 206, 231},
				[]byte{111, 210, 244, 114, 175, 68, 226, 88, 28, 15, 237, 141, 213, 149, 8, 140},
				[]byte{0x6f, 0xd2, 0xf4, 0x72, 0xaf, 0x44, 0xe2, 0x58, 0x1c, 0x0f, 0xed, 0x8d},
				getBigInt("34607864885268487474569538957"),
				9,
				getBigInt("3710307925511"),
				[]uint16{1, 11, 12, 17, 25, 19, 17, 29, 35},
				[]uint16{4, 35, 12, 30, 31, 35, 21, 5, 23, 27},
			},
			{
				"Decrypt: round #5",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3, 95, 223, 149, 254, 7},
				[]byte{20, 139, 225, 142, 115, 92, 228, 59, 37, 141, 157, 233, 13, 24, 120, 20},
				[]byte{0x14, 0x8b, 0xe1, 0x8e, 0x73, 0x5c, 0xe4, 0x3b, 0x25, 0x8d, 0x9d, 0xe9},
				getBigInt("6358806045562408921612525033"),
				10,
				getBigInt("2463858254819582"),
				[]uint16{24, 9, 13, 4, 30, 29, 35, 16, 1, 26},
				[]uint16{1, 11, 12, 17, 25, 19, 17, 29, 35},
			},
			{
				"Decrypt: round #4",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 192, 221, 180, 14, 48, 254},
				[]byte{50, 228, 242, 3, 81, 153, 230, 28, 225, 33, 253, 16, 5, 235, 47, 133},
				[]byte{0x32, 0xe4, 0xf2, 0x03, 0x51, 0x99, 0xe6, 0x1c, 0xe1, 0x21, 0xfd, 0x10},
				getBigInt("15751028451848459363561897232"),
				9,
				getBigInt("30411825086711"),
				[]uint16{10, 28, 2, 35, 35, 16, 2, 27, 11},
				[]uint16{24, 9, 13, 4, 30, 29, 35, 16, 1, 26},
			},
			{
				"Decrypt: round #3",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 27, 168, 206, 8, 0, 247},
				[]byte{210, 168, 189, 131, 204, 156, 173, 50, 164, 116, 195, 152, 23, 34, 66, 112},
				[]byte{0xd2, 0xa8, 0xbd, 0x83, 0xcc, 0x9c, 0xad, 0x32, 0xa4, 0x74, 0xc3, 0x98},
				getBigInt("65195846558710307865574556568"),
				10,
				getBigInt("887248406539622"),
				[]uint16{8, 26, 18, 4, 10, 17, 6, 15, 21, 2},
				[]uint16{10, 28, 2, 35, 35, 16, 2, 27, 11},
			},
			{
				"Decrypt: round #2",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 38, 242, 158, 25, 109, 102},
				[]byte{160, 235, 56, 15, 222, 178, 107, 202, 91, 205, 232, 58, 168, 245, 133, 82},
				[]byte{0xa0, 0xeb, 0x38, 0x0f, 0xde, 0xb2, 0x6b, 0xca, 0x5b, 0xcd, 0xe8, 0x3a},
				getBigInt("49801963884295857596938446906"),
				9,
				getBigInt("74443406317757"),
				[]uint16{26, 13, 34, 29, 30, 1, 28, 19, 17},
				[]uint16{8, 26, 18, 4, 10, 17, 6, 15, 21, 2},
			},
			{
				"Decrypt: round #1",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 67, 180, 180, 202, 24, 189},
				[]byte{11, 66, 76, 139, 82, 150, 184, 220, 184, 125, 202, 48, 68, 104, 44, 131},
				[]byte{0x0b, 0x42, 0x4c, 0x8b, 0x52, 0x96, 0xb8, 0xdc, 0xb8, 0x7d, 0xca, 0x30},
				getBigInt("3484485682030632835911371312"),
				10,
				getBigInt("943139646579510"),
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{26, 13, 34, 29, 30, 1, 28, 19, 17},
			},
			{
				"Decrypt: round #0",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 89, 199, 207, 155, 163, 54},
				[]byte{225, 238, 247, 123, 137, 230, 22, 54, 5, 163, 154, 25, 218, 40, 23, 48},
				[]byte{0xe1, 0xee, 0xf7, 0x7b, 0x89, 0xe6, 0x16, 0x36, 0x05, 0xa3, 0x9a, 0x19},
				getBigInt("69923020258278366124416670233"),
				9,
				getBigInt("82906087076"),
				[]uint16{0, 1, 2, 3, 4, 5, 6, 7, 8},
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
			},
		},
	},
	{
		"Sample #7",
		ff1CommonKey256,
		10,
		[]byte{},
		ff1CommonInput1,
		5,
		5,
		ff1CommonInput1[:5],
		ff1CommonInput1[5:],
		3,
		8,
		[]byte{1, 2, 1, 0, 0, 10, 10, 5, 0, 0, 0, 10, 0, 0, 0, 0},
		[]uint16{6, 6, 5, 7, 6, 6, 7, 0, 0, 9},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 213},
				[]byte{210, 74, 41, 163, 76, 134, 233, 117, 238, 73, 133, 25, 212, 244, 76, 173},
				[]byte{0xd2, 0x4a, 0x29, 0xa3, 0x4c, 0x86, 0xe9, 0x75},
				getBigInt("15152969677581773173"),
				5,
				getBigInt("74407"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{7, 4, 4, 0, 7},
			},
			{
				"Encrypt: round #1",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 34, 167},
				[]byte{83, 27, 87, 30, 53, 175, 207, 62, 162, 72, 103, 14, 28, 135, 227, 179},
				[]byte{0x53, 0x1b, 0x57, 0x1e, 0x35, 0xaf, 0xcf, 0x3e},
				getBigInt("5988475916780556094"),
				5,
				getBigInt("12883"),
				[]uint16{7, 4, 4, 0, 7},
				[]uint16{1, 2, 8, 8, 3},
			},
			{
				"Encrypt: round #2",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 50, 83},
				[]byte{94, 85, 158, 65, 193, 9, 34, 42, 197, 94, 194, 4, 0, 16, 196, 55},
				[]byte{0x5e, 0x55, 0x9e, 0x41, 0xc1, 0x09, 0x22, 0x2a},
				getBigInt("6797513217834295850"),
				5,
				getBigInt("70257"),
				[]uint16{1, 2, 8, 8, 3},
				[]uint16{7, 0, 2, 5, 7},
			},
			{
				"Encrypt: round #3",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 18, 113},
				[]byte{202, 144, 213, 104, 61, 32, 230, 39, 195, 155, 31, 102, 159, 32, 37, 132},
				[]byte{0xca, 0x90, 0xd5, 0x68, 0x3d, 0x20, 0xe6, 0x27},
				getBigInt("14596401035986658855"),
				5,
				getBigInt("71738"),
				[]uint16{7, 0, 2, 5, 7},
				[]uint16{7, 1, 7, 3, 8},
			},
			{
				"Encrypt: round #4",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 24, 58},
				[]byte{58, 44, 107, 123, 115, 117, 7, 192, 52, 250, 62, 7, 161, 97, 215, 251},
				[]byte{0x3a, 0x2c, 0x6b, 0x7b, 0x73, 0x75, 0x07, 0xc0},
				getBigInt("4191843531137288128"),
				5,
				getBigInt("58385"),
				[]uint16{7, 1, 7, 3, 8},
				[]uint16{5, 8, 3, 8, 5},
			},
			{
				"Encrypt: round #5",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 228, 17},
				[]byte{228, 72, 223, 130, 164, 159, 254, 9, 73, 87, 102, 223, 158, 45, 239, 163},
				[]byte{0xe4, 0x48, 0xdf, 0x82, 0xa4, 0x9f, 0xfe, 0x09},
				getBigInt("16449643391171427849"),
				5,
				getBigInt("99587"),
				[]uint16{5, 8, 3, 8, 5},
				[]uint16{9, 9, 5, 8, 7},
			},
			{
				"Encrypt: round #6",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 133, 3},
				[]byte{20, 211, 216, 181, 50, 177, 180, 97, 81, 210, 8, 6, 114, 219, 134, 203},
				[]byte{0x14, 0xd3, 0xd8, 0xb5, 0x32, 0xb1, 0xb4, 0x61},
				getBigInt("1500781373595694177"),
				5,
				getBigInt("52562"),
				[]uint16{9, 9, 5, 8, 7},
				[]uint16{5, 2, 5, 6, 2},
			},
			{
				"Encrypt: round #7",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 205, 82},
				[]byte{41, 15, 253, 95, 123, 44, 77, 52, 201, 168, 91, 246, 141, 144, 221, 82},
				[]byte{0x29, 0x0f, 0xfd, 0x5f, 0x7b, 0x2c, 0x4d, 0x34},
				getBigInt("2958862066735926580"),
				5,
				getBigInt("26167"),
				[]uint16{5, 2, 5, 6, 2},
				[]uint16{2, 6, 1, 6, 7},
			},
			{
				"Encrypt: round #8",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 102, 55},
				[]byte{167, 151, 192, 233, 24, 181, 44, 222, 211, 13, 120, 98, 178, 250, 41, 247},
				[]byte{0xa7, 0x97, 0xc0, 0xe9, 0x18, 0xb5, 0x2c, 0xde},
				getBigInt("12076333033191714014"),
				5,
				getBigInt("66576"),
				[]uint16{2, 6, 1, 6, 7},
				[]uint16{6, 6, 5, 7, 6},
			},
			{
				"Encrypt: round #9",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 4, 16},
				[]byte{235, 113, 164, 87, 117, 110, 72, 74, 226, 69, 197, 156, 99, 83, 123, 144},
				[]byte{0xeb, 0x71, 0xa4, 0x57, 0x75, 0x6e, 0x48, 0x4a},
				getBigInt("16965521966820640842"),
				5,
				getBigInt("67009"),
				[]uint16{6, 6, 5, 7, 6},
				[]uint16{6, 7, 0, 0, 9},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 4, 16},
				[]byte{235, 113, 164, 87, 117, 110, 72, 74, 226, 69, 197, 156, 99, 83, 123, 144},
				[]byte{0xeb, 0x71, 0xa4, 0x57, 0x75, 0x6e, 0x48, 0x4a},
				getBigInt("16965521966820640842"),
				5,
				getBigInt("26167"),
				[]uint16{2, 6, 1, 6, 7},
				[]uint16{6, 6, 5, 7, 6},
			},
			{
				"Decrypt: round #8",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 102, 55},
				[]byte{167, 151, 192, 233, 24, 181, 44, 222, 211, 13, 120, 98, 178, 250, 41, 247},
				[]byte{0xa7, 0x97, 0xc0, 0xe9, 0x18, 0xb5, 0x2c, 0xde},
				getBigInt("12076333033191714014"),
				5,
				getBigInt("52562"),
				[]uint16{5, 2, 5, 6, 2},
				[]uint16{2, 6, 1, 6, 7},
			},
			{
				"Decrypt: round #7",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 205, 82},
				[]byte{41, 15, 253, 95, 123, 44, 77, 52, 201, 168, 91, 246, 141, 144, 221, 82},
				[]byte{0x29, 0x0f, 0xfd, 0x5f, 0x7b, 0x2c, 0x4d, 0x34},
				getBigInt("2958862066735926580"),
				5,
				getBigInt("99587"),
				[]uint16{9, 9, 5, 8, 7},
				[]uint16{5, 2, 5, 6, 2},
			},
			{
				"Decrypt: round #6",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 133, 3},
				[]byte{20, 211, 216, 181, 50, 177, 180, 97, 81, 210, 8, 6, 114, 219, 134, 203},
				[]byte{0x14, 0xd3, 0xd8, 0xb5, 0x32, 0xb1, 0xb4, 0x61},
				getBigInt("1500781373595694177"),
				5,
				getBigInt("58385"),
				[]uint16{5, 8, 3, 8, 5},
				[]uint16{9, 9, 5, 8, 7},
			},
			{
				"Decrypt: round #5",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 228, 17},
				[]byte{228, 72, 223, 130, 164, 159, 254, 9, 73, 87, 102, 223, 158, 45, 239, 163},
				[]byte{0xe4, 0x48, 0xdf, 0x82, 0xa4, 0x9f, 0xfe, 0x09},
				getBigInt("16449643391171427849"),
				5,
				getBigInt("71738"),
				[]uint16{7, 1, 7, 3, 8},
				[]uint16{5, 8, 3, 8, 5},
			},
			{
				"Decrypt: round #4",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 24, 58},
				[]byte{58, 44, 107, 123, 115, 117, 7, 192, 52, 250, 62, 7, 161, 97, 215, 251},
				[]byte{0x3a, 0x2c, 0x6b, 0x7b, 0x73, 0x75, 0x07, 0xc0},
				getBigInt("4191843531137288128"),
				5,
				getBigInt("70257"),
				[]uint16{7, 0, 2, 5, 7},
				[]uint16{7, 1, 7, 3, 8},
			},
			{
				"Decrypt: round #3",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 18, 113},
				[]byte{202, 144, 213, 104, 61, 32, 230, 39, 195, 155, 31, 102, 159, 32, 37, 132},
				[]byte{0xca, 0x90, 0xd5, 0x68, 0x3d, 0x20, 0xe6, 0x27},
				getBigInt("14596401035986658855"),
				5,
				getBigInt("12883"),
				[]uint16{1, 2, 8, 8, 3},
				[]uint16{7, 0, 2, 5, 7},
			},
			{
				"Decrypt: round #2",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 50, 83},
				[]byte{94, 85, 158, 65, 193, 9, 34, 42, 197, 94, 194, 4, 0, 16, 196, 55},
				[]byte{0x5e, 0x55, 0x9e, 0x41, 0xc1, 0x09, 0x22, 0x2a},
				getBigInt("6797513217834295850"),
				5,
				getBigInt("74407"),
				[]uint16{7, 4, 4, 0, 7},
				[]uint16{1, 2, 8, 8, 3},
			},
			{
				"Decrypt: round #1",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 34, 167},
				[]byte{83, 27, 87, 30, 53, 175, 207, 62, 162, 72, 103, 14, 28, 135, 227, 179},
				[]byte{0x53, 0x1b, 0x57, 0x1e, 0x35, 0xaf, 0xcf, 0x3e},
				getBigInt("5988475916780556094"),
				5,
				getBigInt("56789"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{7, 4, 4, 0, 7},
			},
			{
				"Decrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 213},
				[]byte{210, 74, 41, 163, 76, 134, 233, 117, 238, 73, 133, 25, 212, 244, 76, 173},
				[]byte{0xd2, 0x4a, 0x29, 0xa3, 0x4c, 0x86, 0xe9, 0x75},
				getBigInt("15152969677581773173"),
				5,
				getBigInt("1234"),
				[]uint16{0, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9},
			},
		},
	},
	{
		"Sample #8",
		ff1CommonKey256,
		10,
		ff1CommonTweak1,
		ff1CommonInput1,
		5,
		5,
		ff1CommonInput1[:5],
		ff1CommonInput1[5:],
		3,
		8,
		[]byte{1, 2, 1, 0, 0, 10, 10, 5, 0, 0, 0, 10, 0, 0, 0, 10},
		[]uint16{1, 0, 0, 1, 6, 2, 3, 4, 6, 3},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 0, 0, 221, 213},
				[]byte{126, 234, 51, 33, 47, 42, 219, 26, 19, 214, 205, 182, 160, 27, 106, 86},
				[]byte{0x7e, 0xea, 0x33, 0x21, 0x2f, 0x2a, 0xdb, 0x1a},
				getBigInt("9145178210947488538"),
				5,
				getBigInt("89772"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{8, 9, 7, 7, 2},
			},
			{
				"Encrypt: round #1",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 1, 1, 94, 172},
				[]byte{164, 155, 179, 154, 229, 79, 208, 126, 26, 177, 78, 139, 201, 179, 158, 93},
				[]byte{0xa4, 0x9b, 0xb3, 0x9a, 0xe5, 0x4f, 0xd0, 0x7e},
				getBigInt("11861271521463881854"),
				5,
				getBigInt("38643"),
				[]uint16{8, 9, 7, 7, 2},
				[]uint16{3, 8, 6, 4, 3},
			},
			{
				"Encrypt: round #2",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 2, 0, 150, 243},
				[]byte{235, 228, 166, 105, 67, 137, 24, 136, 165, 13, 199, 217, 80, 211, 216, 144},
				[]byte{0xeb, 0xe4, 0xa6, 0x69, 0x43, 0x89, 0x18, 0x88},
				getBigInt("16997893864637929608"),
				5,
				getBigInt("19380"),
				[]uint16{3, 8, 6, 4, 3},
				[]uint16{1, 9, 3, 8, 0},
			},
			{
				"Encrypt: round #3",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 3, 0, 75, 180},
				[]byte{11, 61, 98, 240, 134, 36, 235, 73, 69, 116, 15, 177, 138, 142, 4, 242},
				[]byte{0x0b, 0x3d, 0x62, 0xf0, 0x86, 0x24, 0xeb, 0x49},
				getBigInt("809912293178796873"),
				5,
				getBigInt("35516"),
				[]uint16{1, 9, 3, 8, 0},
				[]uint16{3, 5, 5, 1, 6},
			},
			{
				"Encrypt: round #4",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 4, 0, 138, 188},
				[]byte{167, 216, 127, 81, 156, 24, 17, 40, 11, 1, 174, 223, 77, 106, 215, 247},
				[]byte{0xa7, 0xd8, 0x7f, 0x51, 0x9c, 0x18, 0x11, 0x28},
				getBigInt("12094556787791368488"),
				5,
				getBigInt("87868"),
				[]uint16{3, 5, 5, 1, 6},
				[]uint16{8, 7, 8, 6, 8},
			},
			{
				"Encrypt: round #5",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 5, 1, 87, 60},
				[]byte{14, 107, 87, 214, 161, 55, 104, 140, 102, 245, 251, 238, 54, 150, 217, 179},
				[]byte{0x0e, 0x6b, 0x57, 0xd6, 0xa1, 0x37, 0x68, 0x8c},
				getBigInt("1039020718378412172"),
				5,
				getBigInt("47688"),
				[]uint16{8, 7, 8, 6, 8},
				[]uint16{4, 7, 6, 8, 8},
			},
			{
				"Encrypt: round #6",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 6, 0, 186, 72},
				[]byte{243, 12, 189, 213, 35, 125, 119, 132, 173, 68, 57, 199, 132, 44, 155, 97},
				[]byte{0xf3, 0x0c, 0xbd, 0xd5, 0x23, 0x7d, 0x77, 0x84},
				getBigInt("17513581774058125188"),
				5,
				getBigInt("13056"),
				[]uint16{4, 7, 6, 8, 8},
				[]uint16{1, 3, 0, 5, 6},
			},
			{
				"Encrypt: round #7",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 7, 0, 51, 0},
				[]byte{152, 182, 125, 28, 14, 219, 138, 101, 2, 74, 253, 211, 157, 110, 202, 125},
				[]byte{0x98, 0xb6, 0x7d, 0x1c, 0x0e, 0xdb, 0x8a, 0x65},
				getBigInt("11004120298988210789"),
				5,
				getBigInt("58477"),
				[]uint16{1, 3, 0, 5, 6},
				[]uint16{5, 8, 4, 7, 7},
			},
			{
				"Encrypt: round #8",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 8, 0, 228, 109},
				[]byte{62, 4, 136, 216, 137, 238, 127, 160, 202, 40, 187, 115, 78, 79, 232, 206},
				[]byte{0x3e, 0x04, 0x88, 0xd8, 0x89, 0xee, 0x7f, 0xa0},
				getBigInt("4468847193866796960"),
				5,
				getBigInt("10016"),
				[]uint16{5, 8, 4, 7, 7},
				[]uint16{1, 0, 0, 1, 6},
			},
			{
				"Encrypt: round #9",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 9, 0, 39, 32},
				[]byte{74, 156, 68, 166, 81, 159, 2, 250, 106, 246, 248, 24, 235, 215, 117, 189},
				[]byte{0x4a, 0x9c, 0x44, 0xa6, 0x51, 0x9f, 0x02, 0xfa},
				getBigInt("5376247536298164986"),
				5,
				getBigInt("23463"),
				[]uint16{1, 0, 0, 1, 6},
				[]uint16{2, 3, 4, 6, 3},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 9, 0, 39, 32},
				[]byte{74, 156, 68, 166, 81, 159, 2, 250, 106, 246, 248, 24, 235, 215, 117, 189},
				[]byte{0x4a, 0x9c, 0x44, 0xa6, 0x51, 0x9f, 0x02, 0xfa},
				getBigInt("5376247536298164986"),
				5,
				getBigInt("58477"),
				[]uint16{5, 8, 4, 7, 7},
				[]uint16{1, 0, 0, 1, 6},
			},
			{
				"Decrypt: round #8",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 8, 0, 228, 109},
				[]byte{62, 4, 136, 216, 137, 238, 127, 160, 202, 40, 187, 115, 78, 79, 232, 206},
				[]byte{0x3e, 0x04, 0x88, 0xd8, 0x89, 0xee, 0x7f, 0xa0},
				getBigInt("4468847193866796960"),
				5,
				getBigInt("13056"),
				[]uint16{1, 3, 0, 5, 6},
				[]uint16{5, 8, 4, 7, 7},
			},
			{
				"Decrypt: round #7",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 7, 0, 51, 0},
				[]byte{152, 182, 125, 28, 14, 219, 138, 101, 2, 74, 253, 211, 157, 110, 202, 125},
				[]byte{0x98, 0xb6, 0x7d, 0x1c, 0x0e, 0xdb, 0x8a, 0x65},
				getBigInt("11004120298988210789"),
				5,
				getBigInt("47688"),
				[]uint16{4, 7, 6, 8, 8},
				[]uint16{1, 3, 0, 5, 6},
			},
			{
				"Decrypt: round #6",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 6, 0, 186, 72},
				[]byte{243, 12, 189, 213, 35, 125, 119, 132, 173, 68, 57, 199, 132, 44, 155, 97},
				[]byte{0xf3, 0x0c, 0xbd, 0xd5, 0x23, 0x7d, 0x77, 0x84},
				getBigInt("17513581774058125188"),
				5,
				getBigInt("87868"),
				[]uint16{8, 7, 8, 6, 8},
				[]uint16{4, 7, 6, 8, 8},
			},
			{
				"Decrypt: round #5",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 5, 1, 87, 60},
				[]byte{14, 107, 87, 214, 161, 55, 104, 140, 102, 245, 251, 238, 54, 150, 217, 179},
				[]byte{0x0e, 0x6b, 0x57, 0xd6, 0xa1, 0x37, 0x68, 0x8c},
				getBigInt("1039020718378412172"),
				5,
				getBigInt("35516"),
				[]uint16{3, 5, 5, 1, 6},
				[]uint16{8, 7, 8, 6, 8},
			},
			{
				"Decrypt: round #4",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 4, 0, 138, 188},
				[]byte{167, 216, 127, 81, 156, 24, 17, 40, 11, 1, 174, 223, 77, 106, 215, 247},
				[]byte{0xa7, 0xd8, 0x7f, 0x51, 0x9c, 0x18, 0x11, 0x28},
				getBigInt("12094556787791368488"),
				5,
				getBigInt("19380"),
				[]uint16{1, 9, 3, 8, 0},
				[]uint16{3, 5, 5, 1, 6},
			},
			{
				"Decrypt: round #3",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 3, 0, 75, 180},
				[]byte{11, 61, 98, 240, 134, 36, 235, 73, 69, 116, 15, 177, 138, 142, 4, 242},
				[]byte{0x0b, 0x3d, 0x62, 0xf0, 0x86, 0x24, 0xeb, 0x49},
				getBigInt("809912293178796873"),
				5,
				getBigInt("38643"),
				[]uint16{3, 8, 6, 4, 3},
				[]uint16{1, 9, 3, 8, 0},
			},
			{
				"Decrypt: round #2",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 2, 0, 150, 243},
				[]byte{235, 228, 166, 105, 67, 137, 24, 136, 165, 13, 199, 217, 80, 211, 216, 144},
				[]byte{0xeb, 0xe4, 0xa6, 0x69, 0x43, 0x89, 0x18, 0x88},
				getBigInt("16997893864637929608"),
				5,
				getBigInt("89772"),
				[]uint16{8, 9, 7, 7, 2},
				[]uint16{3, 8, 6, 4, 3},
			},
			{
				"Decrypt: round #1",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 1, 1, 94, 172},
				[]byte{164, 155, 179, 154, 229, 79, 208, 126, 26, 177, 78, 139, 201, 179, 158, 93},
				[]byte{0xa4, 0x9b, 0xb3, 0x9a, 0xe5, 0x4f, 0xd0, 0x7e},
				getBigInt("11861271521463881854"),
				5,
				getBigInt("56789"),
				[]uint16{5, 6, 7, 8, 9},
				[]uint16{8, 9, 7, 7, 2},
			},
			{
				"Decrypt: round #0",
				[]byte{57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 0, 0, 0, 0, 221, 213},
				[]byte{126, 234, 51, 33, 47, 42, 219, 26, 19, 214, 205, 182, 160, 27, 106, 86},
				[]byte{0x7e, 0xea, 0x33, 0x21, 0x2f, 0x2a, 0xdb, 0x1a},
				getBigInt("9145178210947488538"),
				5,
				getBigInt("1234"),
				[]uint16{0, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9},
			},
		},
	},
	{
		"Sample #9",
		ff1CommonKey256,
		36,
		ff1CommonTweak2,
		ff1CommonInput2,
		9,
		10,
		ff1CommonInput2[:9],
		ff1CommonInput2[9:],
		7,
		12,
		[]byte{1, 2, 1, 0, 0, 36, 10, 9, 0, 0, 0, 19, 0, 0, 0, 11},
		[]uint16{33, 28, 8, 10, 0, 10, 35, 17, 2, 10, 31, 34, 10, 21, 34, 35, 30, 32, 13},
		[]ff1FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 89, 199, 207, 155, 163, 54},
				[]byte{169, 244, 14, 81, 94, 34, 73, 25, 163, 180, 21, 69, 163, 95, 31, 120},
				[]byte{0xa9, 0xf4, 0x0e, 0x51, 0x5e, 0x22, 0x49, 0x19, 0xa3, 0xb4, 0x15, 0x45},
				getBigInt("52598012173893380641865864517"),
				9,
				getBigInt("55071529931753"),
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{19, 18, 27, 18, 15, 0, 21, 18, 17},
			},
			{
				"Encrypt: round #1",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 50, 22, 86, 250, 147, 233},
				[]byte{195, 167, 66, 120, 89, 50, 41, 161, 103, 88, 190, 184, 105, 93, 57, 22},
				[]byte{0xc3, 0xa7, 0x42, 0x78, 0x59, 0x32, 0x29, 0xa1, 0x67, 0x58, 0xbe, 0xb8},
				getBigInt("60551781423262335106649996984"),
				10,
				getBigInt("3375932902760942"),
				[]uint16{19, 18, 27, 18, 15, 0, 21, 18, 17},
				[]uint16{33, 8, 24, 2, 5, 34, 10, 27, 33, 26},
			},
			{
				"Encrypt: round #2",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 11, 254, 100, 161, 116, 97, 238},
				[]byte{48, 13, 232, 79, 41, 98, 175, 116, 205, 255, 62, 178, 248, 112, 69, 178},
				[]byte{0x30, 0x0d, 0xe8, 0x4f, 0x29, 0x62, 0xaf, 0x74, 0xcd, 0xff, 0x3e, 0xb2},
				getBigInt("14872093556378499878284639922"),
				9,
				getBigInt("58407579144859"),
				[]uint16{33, 8, 24, 2, 5, 34, 10, 27, 33, 26},
				[]uint16{20, 25, 12, 2, 20, 21, 0, 23, 31},
			},
			{
				"Encrypt: round #3",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 53, 31, 19, 1, 210, 155},
				[]byte{158, 135, 120, 203, 201, 76, 7, 15, 27, 148, 156, 158, 184, 96, 43, 71},
				[]byte{0x9e, 0x87, 0x78, 0xcb, 0xc9, 0x4c, 0x07, 0x0f, 0x1b, 0x94, 0x9c, 0x9e},
				getBigInt("49062406980592463378887515294"),
				10,
				getBigInt("602181337677452"),
				[]uint16{20, 25, 12, 2, 20, 21, 0, 23, 31},
				[]uint16{5, 33, 16, 14, 10, 12, 21, 10, 33, 8},
			},
			{
				"Encrypt: round #4",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 35, 174, 68, 184, 254, 140},
				[]byte{119, 110, 245, 135, 78, 173, 10, 92, 170, 119, 156, 117, 165, 116, 58, 168},
				[]byte{0x77, 0x6e, 0xf5, 0x87, 0x4e, 0xad, 0x0a, 0x5c, 0xaa, 0x77, 0x9c, 0x75},
				getBigInt("36962857484665624300376005749"),
				9,
				getBigInt("47863841517328"),
				[]uint16{5, 33, 16, 14, 10, 12, 21, 10, 33, 8},
				[]uint16{16, 34, 28, 12, 15, 15, 19, 15, 4},
			},
			{
				"Encrypt: round #5",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 43, 136, 43, 69, 111, 16},
				[]byte{232, 42, 137, 218, 210, 229, 119, 96, 201, 74, 253, 239, 210, 8, 93, 229},
				[]byte{0xe8, 0x2a, 0x89, 0xda, 0xd2, 0xe5, 0x77, 0x60, 0xc9, 0x4a, 0xfd, 0xef},
				getBigInt("71851948163770915354772700655"),
				10,
				getBigInt("2416627861945467"),
				[]uint16{16, 34, 28, 12, 15, 15, 19, 15, 4},
				[]uint16{23, 28, 22, 15, 18, 17, 18, 25, 31, 15},
			},
			{
				"Encrypt: round #6",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 149, 233, 5, 67, 252, 123},
				[]byte{115, 112, 72, 205, 83, 97, 8, 64, 246, 109, 170, 55, 131, 138, 139, 107},
				[]byte{0x73, 0x70, 0x48, 0xcd, 0x53, 0x61, 0x08, 0x40, 0xf6, 0x6d, 0xaa, 0x37},
				getBigInt("35726519619228915548824644151"),
				9,
				getBigInt("48491323136327"),
				[]uint16{23, 28, 22, 15, 18, 17, 18, 25, 31, 15},
				[]uint16{17, 6, 28, 21, 29, 28, 11, 11, 11},
			},
			{
				"Encrypt: round #7",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 44, 26, 68, 23, 25, 71},
				[]byte{153, 197, 59, 250, 40, 212, 157, 122, 243, 99, 153, 189, 22, 101, 104, 46},
				[]byte{0x99, 0xc5, 0x3b, 0xfa, 0x28, 0xd4, 0x9d, 0x7a, 0xf3, 0x63, 0x99, 0xbd},
				getBigInt("47589648123380534806738868669"),
				10,
				getBigInt("3532592868988472"),
				[]uint16{17, 6, 28, 21, 29, 28, 11, 11, 11},
				[]uint16{34, 28, 7, 6, 27, 13, 12, 22, 20, 8},
			},
			{
				"Encrypt: round #8",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 140, 223, 223, 23, 150, 56},
				[]byte{219, 115, 118, 188, 190, 243, 246, 208, 39, 191, 160, 207, 71, 15, 7, 214},
				[]byte{0xdb, 0x73, 0x76, 0xbc, 0xbe, 0xf3, 0xf6, 0xd0, 0x27, 0xbf, 0xa0, 0xcf},
				getBigInt("67916804341122729541776679119"),
				9,
				getBigInt("95308842973718"),
				[]uint16{34, 28, 7, 6, 27, 13, 12, 22, 20, 8},
				[]uint16{33, 28, 8, 10, 0, 10, 35, 17, 2},
			},
			{
				"Encrypt: round #9",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 86, 174, 209, 186, 186, 22},
				[]byte{128, 76, 111, 36, 235, 254, 134, 14, 103, 122, 230, 245, 220, 239, 132, 25},
				[]byte{0x80, 0x4c, 0x6f, 0x24, 0xeb, 0xfe, 0x86, 0x0e, 0x67, 0x7a, 0xe6, 0xf5},
				getBigInt("39706484483190442437633566453"),
				10,
				getBigInt("1105741451787565"),
				[]uint16{33, 28, 8, 10, 0, 10, 35, 17, 2},
				[]uint16{10, 31, 34, 10, 21, 34, 35, 30, 32, 13},
			},
		},
		[]ff1FeistelRound{
			{
				"Decrypt: round #9",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 86, 174, 209, 186, 186, 22},
				[]byte{128, 76, 111, 36, 235, 254, 134, 14, 103, 122, 230, 245, 220, 239, 132, 25},
				[]byte{0x80, 0x4c, 0x6f, 0x24, 0xeb, 0xfe, 0x86, 0x0e, 0x67, 0x7a, 0xe6, 0xf5},
				getBigInt("39706484483190442437633566453"),
				10,
				getBigInt("3532592868988472"),
				[]uint16{34, 28, 7, 6, 27, 13, 12, 22, 20, 8},
				[]uint16{33, 28, 8, 10, 0, 10, 35, 17, 2},
			},
			{
				"Decrypt: round #8",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 140, 223, 223, 23, 150, 56},
				[]byte{219, 115, 118, 188, 190, 243, 246, 208, 39, 191, 160, 207, 71, 15, 7, 214},
				[]byte{0xdb, 0x73, 0x76, 0xbc, 0xbe, 0xf3, 0xf6, 0xd0, 0x27, 0xbf, 0xa0, 0xcf},
				getBigInt("67916804341122729541776679119"),
				9,
				getBigInt("48491323136327"),
				[]uint16{17, 6, 28, 21, 29, 28, 11, 11, 11},
				[]uint16{34, 28, 7, 6, 27, 13, 12, 22, 20, 8},
			},
			{
				"Decrypt: round #7",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 44, 26, 68, 23, 25, 71},
				[]byte{153, 197, 59, 250, 40, 212, 157, 122, 243, 99, 153, 189, 22, 101, 104, 46},
				[]byte{0x99, 0xc5, 0x3b, 0xfa, 0x28, 0xd4, 0x9d, 0x7a, 0xf3, 0x63, 0x99, 0xbd},
				getBigInt("47589648123380534806738868669"),
				10,
				getBigInt("2416627861945467"),
				[]uint16{23, 28, 22, 15, 18, 17, 18, 25, 31, 15},
				[]uint16{17, 6, 28, 21, 29, 28, 11, 11, 11},
			},
			{
				"Decrypt: round #6",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 149, 233, 5, 67, 252, 123},
				[]byte{115, 112, 72, 205, 83, 97, 8, 64, 246, 109, 170, 55, 131, 138, 139, 107},
				[]byte{0x73, 0x70, 0x48, 0xcd, 0x53, 0x61, 0x08, 0x40, 0xf6, 0x6d, 0xaa, 0x37},
				getBigInt("35726519619228915548824644151"),
				9,
				getBigInt("47863841517328"),
				[]uint16{16, 34, 28, 12, 15, 15, 19, 15, 4},
				[]uint16{23, 28, 22, 15, 18, 17, 18, 25, 31, 15},
			},
			{
				"Decrypt: round #5",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 43, 136, 43, 69, 111, 16},
				[]byte{232, 42, 137, 218, 210, 229, 119, 96, 201, 74, 253, 239, 210, 8, 93, 229},
				[]byte{0xe8, 0x2a, 0x89, 0xda, 0xd2, 0xe5, 0x77, 0x60, 0xc9, 0x4a, 0xfd, 0xef},
				getBigInt("71851948163770915354772700655"),
				10,
				getBigInt("602181337677452"),
				[]uint16{5, 33, 16, 14, 10, 12, 21, 10, 33, 8},
				[]uint16{16, 34, 28, 12, 15, 15, 19, 15, 4},
			},
			{
				"Decrypt: round #4",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 35, 174, 68, 184, 254, 140},
				[]byte{119, 110, 245, 135, 78, 173, 10, 92, 170, 119, 156, 117, 165, 116, 58, 168},
				[]byte{0x77, 0x6e, 0xf5, 0x87, 0x4e, 0xad, 0x0a, 0x5c, 0xaa, 0x77, 0x9c, 0x75},
				getBigInt("36962857484665624300376005749"),
				9,
				getBigInt("58407579144859"),
				[]uint16{20, 25, 12, 2, 20, 21, 0, 23, 31},
				[]uint16{5, 33, 16, 14, 10, 12, 21, 10, 33, 8},
			},
			{
				"Decrypt: round #3",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 53, 31, 19, 1, 210, 155},
				[]byte{158, 135, 120, 203, 201, 76, 7, 15, 27, 148, 156, 158, 184, 96, 43, 71},
				[]byte{0x9e, 0x87, 0x78, 0xcb, 0xc9, 0x4c, 0x07, 0x0f, 0x1b, 0x94, 0x9c, 0x9e},
				getBigInt("49062406980592463378887515294"),
				10,
				getBigInt("3375932902760942"),
				[]uint16{33, 8, 24, 2, 5, 34, 10, 27, 33, 26},
				[]uint16{20, 25, 12, 2, 20, 21, 0, 23, 31},
			},
			{
				"Decrypt: round #2",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 11, 254, 100, 161, 116, 97, 238},
				[]byte{48, 13, 232, 79, 41, 98, 175, 116, 205, 255, 62, 178, 248, 112, 69, 178},
				[]byte{0x30, 0x0d, 0xe8, 0x4f, 0x29, 0x62, 0xaf, 0x74, 0xcd, 0xff, 0x3e, 0xb2},
				getBigInt("14872093556378499878284639922"),
				9,
				getBigInt("55071529931753"),
				[]uint16{19, 18, 27, 18, 15, 0, 21, 18, 17},
				[]uint16{33, 8, 24, 2, 5, 34, 10, 27, 33, 26},
			},
			{
				"Decrypt: round #1",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 50, 22, 86, 250, 147, 233},
				[]byte{195, 167, 66, 120, 89, 50, 41, 161, 103, 88, 190, 184, 105, 93, 57, 22},
				[]byte{0xc3, 0xa7, 0x42, 0x78, 0x59, 0x32, 0x29, 0xa1, 0x67, 0x58, 0xbe, 0xb8},
				getBigInt("60551781423262335106649996984"),
				10,
				getBigInt("943139646579510"),
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{19, 18, 27, 18, 15, 0, 21, 18, 17},
			},
			{
				"Decrypt: round #0",
				[]byte{55, 55, 55, 55, 112, 113, 114, 115, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 89, 199, 207, 155, 163, 54},
				[]byte{169, 244, 14, 81, 94, 34, 73, 25, 163, 180, 21, 69, 163, 95, 31, 120},
				[]byte{0xa9, 0xf4, 0x0e, 0x51, 0x5e, 0x22, 0x49, 0x19, 0xa3, 0xb4, 0x15, 0x45},
				getBigInt("52598012173893380641865864517"),
				9,
				getBigInt("82906087076"),
				[]uint16{0, 1, 2, 3, 4, 5, 6, 7, 8},
				[]uint16{9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
			},
		},
	},
}

func getBigInt(s string) big.Int {
	var x = big.NewInt(0)
	x, success := x.SetString(s, ff1DefaultRadix)
	if success == false {
		panic("getBigInt: Cannot create Big integer")
	}
	return *x
}

func TestNewFF1Encrypter(t *testing.T) {
	var key, _, iv []byte = getRandomParameters(ff1DefaultKeySize, ff1DefaultTweakSize, blockSizeFF1)

	var aesBlock, err = aes.NewCipher(key)
	assert.Nil(t, err)
	var cbcMode = cipher.NewCBCEncrypter(aesBlock, iv)

	// Invalid tweak length
	var f func()
	f = func() {
		var radix uint32 = uint32(maxRadixFF1)
		var tweak = make([]byte, maxTweakLenFF1+1)
		rand.Read(tweak)
		NewFF1Encrypter(aesBlock, cbcMode, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid radix
	f = func() {
		var radix uint32 = uint32(maxRadixFF1 + 1)
		var tweak = make([]byte, maxTweakLenFF1)
		rand.Read(tweak)
		NewFF1Encrypter(aesBlock, cbcMode, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid Block
	var invalidBlock *mockBlock = &mockBlock{}
	f = func() {
		var radix uint32 = uint32(maxRadixFF1)
		var tweak = make([]byte, maxTweakLenFF1)
		rand.Read(tweak)
		NewFF1Encrypter(invalidBlock, cbcMode, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid BlockMode
	var invalidBlockMode *mockBlockMode = &mockBlockMode{}
	f = func() {
		var radix uint32 = uint32(maxRadixFF1)
		var tweak = make([]byte, maxTweakLenFF1)
		rand.Read(tweak)
		NewFF1Encrypter(aesBlock, invalidBlockMode, tweak, radix)
	}
	assert.Panics(t, f)
}

func TestNewFF1Decrypter(t *testing.T) {
	var key, _, iv []byte = getRandomParameters(ff1DefaultKeySize, ff1DefaultTweakSize, blockSizeFF1)

	var aesBlock, err = aes.NewCipher(key)
	assert.Nil(t, err)
	var cbcMode = cipher.NewCBCEncrypter(aesBlock, iv)

	// Invalid tweak length
	var f func()
	f = func() {
		var radix uint32 = uint32(maxRadixFF1)
		var tweak = make([]byte, maxTweakLenFF1+1)
		rand.Read(tweak)
		NewFF1Decrypter(aesBlock, cbcMode, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid radix
	f = func() {
		var radix uint32 = uint32(maxRadixFF1 + 1)
		var tweak = make([]byte, maxTweakLenFF1)
		rand.Read(tweak)
		NewFF1Decrypter(aesBlock, cbcMode, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid Block
	var invalidBlock *mockBlock = &mockBlock{}
	f = func() {
		var radix uint32 = uint32(maxRadixFF1)
		var tweak = make([]byte, maxTweakLenFF1)
		rand.Read(tweak)
		NewFF1Decrypter(invalidBlock, cbcMode, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid BlockMode
	var invalidBlockMode *mockBlockMode = &mockBlockMode{}
	f = func() {
		var radix uint32 = uint32(maxRadixFF1)
		var tweak = make([]byte, maxTweakLenFF1)
		rand.Read(tweak)
		NewFF1Decrypter(aesBlock, invalidBlockMode, tweak, radix)
	}
	assert.Panics(t, f)
}

// Test input validation of Crypt method for FF1 encrypter and decrypter
func TestFF1CryptBlocks(t *testing.T) {
	var key, tweak, iv []byte = getRandomParameters(ff1DefaultKeySize, ff1DefaultTweakSize, blockSizeFF1)
	var radix uint32 = minRadixFF1

	var aesBlock, err = aes.NewCipher(key)
	assert.Nil(t, err)
	var cbcMode = cipher.NewCBCEncrypter(aesBlock, iv)

	var ff1BlockMode []cipher.BlockMode = []cipher.BlockMode{
		NewFF1Encrypter(aesBlock, cbcMode, tweak, radix),
		NewFF1Decrypter(aesBlock, cbcMode, tweak, radix),
	}

	for _, ff1 := range ff1BlockMode {

		// Test invalid input length
		var f func()
		f = func() {
			// 1 is smaller than minInputLenFF1
			var numStr = make([]uint16, 1)
			var b = NumeralStringToBytes(numStr)
			ff1.CryptBlocks(b, b)
		}
		assert.Panics(t, f)

		// Test radix^len < 100
		f = func() {
			// minInputLenFF1 < 5 and radix^len < 100
			var numStr = make([]uint16, 5)
			var b = NumeralStringToBytes(numStr)
			ff1.CryptBlocks(b, b)
		}
		assert.Panics(t, f)

		// Test len(dst) != len(src)
		f = func() {
			// minInputLenFF1 < 10 and radix^len > 100
			var numStr = make([]uint16, 10)
			var b = NumeralStringToBytes(numStr)
			var dst = make([]byte, len(b)+1)
			ff1.CryptBlocks(dst, b)
		}
		assert.Panics(t, f)

		// Test invalid numeral string
		f = func() {
			var validLength = 10
			var numStr = make([]uint16, validLength)
			assert.Equal(t, radix, uint32(2))
			numStr[0] = 3 // invalid for radix 2
			var b = NumeralStringToBytes(numStr)
			ff1.CryptBlocks(b, b)
		}
		assert.Panics(t, f)
	}
}

// This test uses the NIST test vectors to validate the FF1 encryption. Here we only
// check that the output is correct for both in place and not in place encryption.
func TestFF1Encrypter(t *testing.T) {
	for _, test := range ff1Tests {

		var encrypter cipher.BlockMode
		{
			var err error
			encrypter, err = getFF1Encrypter(test.key, test.tweak, test.radix)
			assert.Nil(t, err)
		}

		// Encrypt in place.
		var dataInPlace = NumeralStringToBytes(test.in)
		encrypter.CryptBlocks(dataInPlace, dataInPlace)
		var resultInPlace = BytesToNumeralString(dataInPlace)

		assert.Equal(t, test.out, resultInPlace)

		//Encrypt not in place.
		var dataSrc = NumeralStringToBytes(test.in)
		var dataDst = make([]byte, len(dataSrc))
		encrypter.CryptBlocks(dataDst, dataSrc)
		var resultNotInPlace = BytesToNumeralString(dataDst)

		// Input data should not be modified
		assert.Equal(t, dataSrc, NumeralStringToBytes(test.in))
		assert.Equal(t, test.out, resultNotInPlace)
	}
}

// This test uses the NIST test vectors to validate the FF1 decryption. Here we only
// check that the output is correct for both in place and not in place encryption.
func TestFF1Decrypter(t *testing.T) {
	for _, test := range ff1Tests {

		var decrypter cipher.BlockMode
		{
			var err error
			decrypter, err = getFF1Decrypter(test.key, test.tweak, test.radix)
			assert.Nil(t, err)
		}

		// Decrypt in place.
		var dataInPlace = NumeralStringToBytes(test.out)
		decrypter.CryptBlocks(dataInPlace, dataInPlace)
		var resultInPlace = BytesToNumeralString(dataInPlace)

		assert.Equal(t, test.in, resultInPlace)

		// Decrypt not in place.
		var dataSrc = NumeralStringToBytes(test.out)
		var dataDst = make([]byte, len(dataSrc))
		decrypter.CryptBlocks(dataDst, dataSrc)
		var resultNotInPlace = BytesToNumeralString(dataDst)

		assert.Equal(t, dataSrc, NumeralStringToBytes(test.out))
		assert.Equal(t, test.in, resultNotInPlace)
	}
}

// This test check that the function SetTweak of the FF1Encrypter and FF1Decrypter works correctly.
func TestSetFF1Tweak(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff1DefaultKeySize, ff1DefaultTweakSize, blockSizeFF1)

	type fpeWithSetTweak interface {
		cipher.BlockMode
		SetTweak([]byte)
	}

	// FF1 Encrypter
	var encrypter cipher.BlockMode
	{
		var err error
		encrypter, err = getFF1Encrypter(key, tweak, uint32(ff1DefaultRadix))
		assert.Nil(t, err)
	}

	var encWithSetTweak fpeWithSetTweak
	{
		var ok bool
		encWithSetTweak, ok = encrypter.(fpeWithSetTweak)
		assert.True(t, ok)
		assert.NotNil(t, encWithSetTweak)
	}

	// Set valid tweak
	var f func()
	f = func() {
		var tweak = make([]byte, maxTweakLenFF1)
		encWithSetTweak.SetTweak(tweak)
	}
	assert.NotPanics(t, f)

	// Set invalid tweak
	f = func() {
		var tweak = make([]byte, maxTweakLenFF1+1)
		encWithSetTweak.SetTweak(tweak)
	}
	assert.Panics(t, f)

	// FF1 Decrypter
	var decrypter cipher.BlockMode
	{
		var err error
		decrypter, err = getFF1Decrypter(key, tweak, uint32(ff1DefaultRadix))
		assert.Nil(t, err)
	}

	var decWithSetTweak fpeWithSetTweak
	{
		var ok bool
		decWithSetTweak, ok = decrypter.(fpeWithSetTweak)
		assert.True(t, ok)
		assert.NotNil(t, decWithSetTweak)
	}

	// Set valid tweak
	f = func() {
		var tweak = make([]byte, maxTweakLenFF1)
		decWithSetTweak.SetTweak(tweak)
	}
	assert.NotPanics(t, f)

	// Set invalid tweak
	f = func() {
		var tweak = make([]byte, maxTweakLenFF1+1)
		decWithSetTweak.SetTweak(tweak)
	}
	assert.Panics(t, f)
}

// This test check that the function SetRadix of the FF1Encrypter and FF1Decrypter works correctly.
func TestSetFF1Radix(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff1DefaultKeySize, ff1DefaultTweakSize, blockSizeFF1)

	var radix = uint32(rand.Intn(1000) + minRadixFF1)
	var otherRadix uint32 = radix + 10

	type fpeWithSetRadix interface {
		cipher.BlockMode
		SetRadix(uint32)
	}

	// We take inputs length at random between 7 and 400. We set the lower bound to 7 so
	// we always satisfy the condition radix^len >= 100 (minRadix = 2). We set the
	// upper bound to 400 for performance reasons.
	var l = int(rand.Uint32()%394) + 7
	var plaintextRadix = generateRandomNumeralString(radix, l)
	var plaintextOtherRadix = generateRandomNumeralString(otherRadix, l)
	var plaintextBytes = make([]byte, 2*len(plaintextRadix))
	var ciphertextBytes = make([]byte, 2*len(plaintextRadix))
	var ciphertextRadix = make([]uint16, len(plaintextRadix))
	var ciphertextOtherRadix = make([]uint16, len(plaintextOtherRadix))
	var decryptedRadix = make([]uint16, len(plaintextRadix))
	var decryptedOtherRadix = make([]uint16, len(plaintextOtherRadix))

	// Encipher plaintext
	var encrypter cipher.BlockMode
	{
		var err error
		encrypter, err = getFF1Encrypter(key, tweak, radix)
		assert.Nil(t, err)
	}

	var encrypterWithSetRadix fpeWithSetRadix
	{
		var ok bool
		encrypterWithSetRadix, ok = encrypter.(fpeWithSetRadix)
		assert.True(t, ok)
	}
	encrypterWithSetRadix.CryptBlocks(ciphertextBytes, NumeralStringToBytes(plaintextRadix))
	ciphertextRadix = BytesToNumeralString(ciphertextBytes)

	// Change radix to otherRadix, then encipher
	encrypterWithSetRadix.SetRadix(otherRadix)
	encrypterWithSetRadix.CryptBlocks(ciphertextBytes, NumeralStringToBytes(plaintextOtherRadix))
	ciphertextOtherRadix = BytesToNumeralString(ciphertextBytes)

	// Decipher ciphertext
	var decrypter cipher.BlockMode
	{
		var err error
		decrypter, err = getFF1Decrypter(key, tweak, radix)
		assert.Nil(t, err)
	}

	var decrypterWithSetRadix fpeWithSetRadix
	{
		var ok bool
		decrypterWithSetRadix, ok = decrypter.(fpeWithSetRadix)
		assert.True(t, ok)

	}
	decrypterWithSetRadix.CryptBlocks(plaintextBytes, NumeralStringToBytes(ciphertextRadix))
	decryptedRadix = BytesToNumeralString(plaintextBytes)

	// Change radix to otherRadix, then decipher
	decrypterWithSetRadix.SetRadix(otherRadix)
	decrypterWithSetRadix.CryptBlocks(plaintextBytes, NumeralStringToBytes(ciphertextOtherRadix))
	decryptedOtherRadix = BytesToNumeralString(plaintextBytes)

	assert.Equal(t, plaintextRadix, decryptedRadix)
	assert.Equal(t, plaintextOtherRadix, decryptedOtherRadix)

	// Set invalid radix
	var f func()
	f = func() {
		var radix = uint32(maxRadixFF1 + 1)
		encrypterWithSetRadix.SetRadix(radix)
	}
	assert.Panics(t, f)

	f = func() {
		var radix = uint32(maxRadixFF1 + 1)
		decrypterWithSetRadix.SetRadix(radix)
	}
	assert.Panics(t, f)
}

// This test uses the NIST test vectors to validate the b value.
func TestGetB(t *testing.T) {
	for _, test := range ff1Tests {
		var radix = test.radix
		var v = test.v
		var expectedB = test.beta
		var b = getFF1B(v, radix)

		assert.Equal(t, b, expectedB)
	}
}

// This test uses the NIST test vectors to validate the d value.
func TestGetD(t *testing.T) {
	for _, test := range ff1Tests {
		var b = test.beta
		var expectedD = test.d
		var d = getFF1D(b)

		assert.Equal(t, d, expectedD)
	}
}

// This test uses the NIST test vectors to validate the p value.
func TestGetFF1P(t *testing.T) {
	for _, test := range ff1Tests {
		var radix = test.radix
		var u = test.u
		var n = uint32(len(test.in))
		var tl = uint32(len(test.tweak))
		var expectedP = test.p
		var p = getFF1P(radix, u, n, tl)

		assert.Equal(t, p, expectedP)
	}
}

// This test uses the NIST test vectors to validate the q value for each encryption and decryption round.
func TestGetQ(t *testing.T) {
	for _, test := range ff1Tests {
		var tweak = test.tweak
		var radix = test.radix
		var beta = test.beta
		// For the first encryption round, the getFF1Q input value b is the input numeral string b.
		var x = test.b

		// Iter over each encryption round.
		for i, round := range test.encRounds {
			var expectedQ = round.q
			var q = getFF1Q(tweak, radix, beta, i, x)
			// The getFF1Q input x is the numeral string b from the previous round.
			x = round.b

			assert.Equal(t, q, expectedQ)
		}

		// For the first decryption round, the x value is the left half of the output numeral string.
		x = test.out[:test.u]
		// Iter over each decryption round.
		for i, round := range test.decRounds {
			var idx = roundsFF1 - i - 1
			var expectedQ = round.q
			var q = getFF1Q(tweak, radix, beta, idx, x)
			x = round.a

			assert.Equal(t, q, expectedQ)
		}
	}
}

// This test uses the NIST test vectors to validate the prf function value for each encryption and decryption round.
func TestPrf(t *testing.T) {
	for _, test := range ff1Tests {
		var p = test.p
		var aesBlock, err = aes.NewCipher(test.key)
		assert.Nil(t, err)

		var iv = make([]byte, blockSizeFF1)
		var cbcMode = cipher.NewCBCEncrypter(aesBlock, iv)
		var cbcModeWithSetIV, ok = cbcMode.(cbcWithSetIV)
		assert.True(t, ok)

		// Iter over each encryption round.
		for _, round := range test.encRounds {
			var q = round.q
			var expectedR = round.r
			var r = prf(cbcModeWithSetIV, append(p, q...))

			assert.Equal(t, r, expectedR)
		}

		// Iter over each decryption round.
		for _, round := range test.decRounds {
			var q = round.q
			var expectedR = round.r
			var r = prf(cbcModeWithSetIV, append(p, q...))

			assert.Equal(t, r, expectedR)
		}
	}
}

// This test uses the NIST test vectors to validate the s value for each encryption and decryption round.
func TestGetS(t *testing.T) {
	for _, test := range ff1Tests {
		var d = test.d
		var aesBlock, err = aes.NewCipher(test.key)
		assert.Nil(t, err)

		// Iter over each encryption round.
		for _, round := range test.encRounds {
			var r = round.r
			var expectedS = round.s
			var s = getFF1S(aesBlock, r, d)

			assert.Equal(t, s, expectedS)
		}

		// Iter over each decryption round.
		for _, round := range test.decRounds {
			var r = round.r
			var expectedS = round.s
			var s = getFF1S(aesBlock, r, d)

			assert.Equal(t, s, expectedS)
		}
	}
}

// This test uses the NIST test vectors to validate the y value for each encryption and decryption round.
func TestGetY(t *testing.T) {
	for _, test := range ff1Tests {
		// Iter over each encryption round.
		for _, round := range test.encRounds {
			var s = round.s
			var expectedY = &round.y
			var y = num(s)

			assert.Equal(t, y, expectedY)
		}

		// Iter over each decryption round.
		for _, round := range test.decRounds {
			var s = round.s
			var expectedY = &round.y
			var y = num(s)

			assert.Equal(t, y, expectedY)
		}
	}
}

// This test uses the NIST test vectors to validate the c value for each encryption and decryption round.
func TestGetC(t *testing.T) {
	for _, test := range ff1Tests {
		var radix = test.radix

		// For the first encryption round, the getFF1CEnc input value x is the input numeral string a.
		var x = test.a
		// Iter over each encryption round.
		for _, round := range test.encRounds {
			var m = round.m
			var y = &round.y

			var expectedC = &round.c
			var c = getFF1CEnc(x, y, radix, m)
			// The getFF1Q input x is the numeral string a from the previous round.
			x = round.a

			assert.Equal(t, c, expectedC)
		}

		// For the first decryption round, the getFF1CDec input x is the right half of the output numeral string.
		x = test.out[test.u:]
		// Iter over each decryption round.
		for _, round := range test.decRounds {
			var m = round.m
			var y = &round.y
			var expectedC = &round.c
			var c = getFF1CDec(x, y, radix, m)
			// The getFF1Q input x is the numeral string b from the previous round.
			x = round.b

			assert.Equal(t, c, expectedC)
		}
	}
}

// This test generate a random key, tweak, radix and input. It encrypts, then decrpyts the result and check that
// the decrypted result matches the original plaintext.
func TestFF1EncryptionDecryption(t *testing.T) {
	for i := 0; i < nbrFF1Tests; i++ {
		var key, tweak, _ []byte = getRandomParameters(ff1DefaultKeySize, ff1DefaultTweakSize, blockSizeFF1)

		// Chose random radix between minRadixFF1 and maxRadixFF1
		var radix = (rand.Uint32() % (maxRadixFF1 - minRadixFF1)) + minRadixFF1
		// We take inputs length at random between 7 and 400. We set the lower bound to 7 so
		// we always satisfy the condition radix^len >= 100 (minRadix = 2). We set the
		// upper bound to 400 for performance reasons.
		var l = int(rand.Uint32()%394) + 7

		var encrypter cipher.BlockMode
		{
			var err error
			encrypter, err = getFF1Encrypter(key, tweak, radix)
			assert.Nil(t, err)
		}
		var decrypter cipher.BlockMode
		{
			var err error
			decrypter, err = getFF1Decrypter(key, tweak, radix)
			assert.Nil(t, err)
		}

		// Encrypt random numeral string with random key
		var plaintext = generateRandomNumeralString(radix, l)
		var src = NumeralStringToBytes(plaintext)
		var dst = make([]byte, len(src))
		encrypter.CryptBlocks(dst, src)
		var ciphertext = BytesToNumeralString(dst)

		// Decrypt ciphertext
		src = NumeralStringToBytes(ciphertext)
		decrypter.CryptBlocks(dst, src)
		var decrypted = BytesToNumeralString(dst)

		assert.Equal(t, plaintext, decrypted)
	}
}

func TestFF1CornerCases(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff1DefaultKeySize, ff1DefaultTweakSize, blockSizeFF1)

	var radix = uint32(maxRadixFF1)
	// We take inputs length at random between 7 and 400. We set the lower bound to 7 so
	// we always satisfy the condition radix^len >= 100 (minRadix = 2). We set the
	// upper bound to 400 for performance reasons.
	var l = int(rand.Uint32()%394) + 7

	var encrypter cipher.BlockMode
	{
		var err error
		encrypter, err = getFF1Encrypter(key, tweak, radix)
		assert.Nil(t, err)
	}
	var decrypter cipher.BlockMode
	{
		var err error
		decrypter, err = getFF1Decrypter(key, tweak, radix)
		assert.Nil(t, err)
	}

	// Encrypt
	var plaintext = make([]uint16, l)
	for i := 0; i < l; i++ {
		plaintext[i] = maxRadixFF1 - 1
	}
	var src = NumeralStringToBytes(plaintext)
	var dst = make([]byte, len(src))
	encrypter.CryptBlocks(dst, src)
	var ciphertext = BytesToNumeralString(dst)

	// Decrypt
	src = NumeralStringToBytes(ciphertext)
	decrypter.CryptBlocks(dst, src)
	var decrypted = BytesToNumeralString(dst)

	assert.Equal(t, plaintext, decrypted)
}

func TestFF1BlockSize(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff1DefaultKeySize, ff1DefaultTweakSize, blockSizeFF1)
	var radix = uint32(rand.Intn(1000) + minRadixFF1)

	var encrypter cipher.BlockMode
	{
		var err error
		encrypter, err = getFF1Encrypter(key, tweak, radix)
		assert.Nil(t, err)
	}
	var decrypter cipher.BlockMode
	{
		var err error
		decrypter, err = getFF1Decrypter(key, tweak, radix)
		assert.Nil(t, err)
	}

	assert.Equal(t, blockSizeFF1, encrypter.BlockSize())
	assert.Equal(t, blockSizeFF1, decrypter.BlockSize())
}

func getFF1Encrypter(key, tweak []byte, radix uint32) (cipher.BlockMode, error) {
	// Create AES Block used by FF1.
	var aesBlock, err = aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	// Create CBC mode used by FF1.
	var iv = make([]byte, blockSizeFF1)
	var cbcMode = cipher.NewCBCEncrypter(aesBlock, iv)

	// Create FF1 Encrypter
	var encrypter = NewFF1Encrypter(aesBlock, cbcMode, tweak, radix)

	return encrypter, nil
}

func getFF1Decrypter(key, tweak []byte, radix uint32) (cipher.BlockMode, error) {
	// Create AES Block used by FF1.
	var aesBlock, err = aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	// Create CBC mode used by FF1.
	var iv = make([]byte, blockSizeFF1)
	var cbcMode = cipher.NewCBCEncrypter(aesBlock, iv)

	// Create FF1 Decrypter
	var decrypter = NewFF1Decrypter(aesBlock, cbcMode, tweak, radix)

	return decrypter, nil
}

// Mock BlockMode
type mockBlockMode struct{}

// Return a BlockMode without SetIv method
func (c *mockBlockMode) BlockSize() int              { return 16 }
func (c *mockBlockMode) CryptBlocks(dst, src []byte) {}
