// See U.S. National Institute of Standards and Technology (NIST)
// Special Publication 800-38G, ``Recommendation for Block Cipher
// Modes of Operation: Methods for Format-Preserving Encryption''
// 2016 Edition.
// The test vector for the FF3 method are available at
// http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/FF3samples.pdf
package fpe

import (
	"crypto/aes"
	"crypto/cipher"
	"github.com/stretchr/testify/assert"
	"math/big"
	"math/rand"
	"testing"
)

const (
	nbrFF3Tests = 10000
)

// Common values for tests.
var ff3DefaultKeySize = 16
var ff3DefaultRadix = 10
var ff3CommonInput1 = []uint16{8, 9, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0}
var ff3CommonInput2 = []uint16{
	8, 9, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0,
	0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0,
}
var ff3CommonInput3 = []uint16{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}
var ff3CommonTweak1 = []byte{0xd8, 0xe7, 0x92, 0x0a, 0xfa, 0x33, 0x0a, 0x73}
var ff3CommonTweak2 = []byte{0x9a, 0x76, 0x8a, 0x92, 0xf6, 0x0e, 0x12, 0xd8}
var ff3CommonTweak3 = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
var ff3CommonKey128 = []byte{0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f, 0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94}
var ff3CommonKey192 = []byte{
	0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f, 0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
	0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
}
var ff3CommonKey256 = []byte{
	0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f, 0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
	0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
}

type ff3FeistelRound struct {
	name string
	p    []byte
	s    []byte
	y    big.Int
	c    big.Int
	a    []uint16
	b    []uint16
}

var ff3Tests = []struct {
	name      string
	key       []byte
	radix     uint32
	tweak     []byte
	in        []uint16
	out       []uint16
	u         uint32
	v         uint32
	encRounds []ff3FeistelRound
	decRounds []ff3FeistelRound
}{
	// FF3 samples: http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/FF3samples.pdf.
	{
		"Sample #1",
		ff3CommonKey128,
		10,
		ff3CommonTweak1,
		ff3CommonInput1,
		[]uint16{7, 5, 0, 9, 1, 8, 8, 1, 4, 0, 5, 8, 6, 5, 4, 6, 0, 7},
		9,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0xDE, 0x7F, 0x3E, 0x4A, 0x21, 0x0E, 0x3D, 0xFF, 0x34, 0x69, 0x24, 0xFB, 0xFF, 0x75, 0x00, 0x39},
				getBigInt("295749300147794922410226583415804985401"),
				getBigInt("237106499"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{9, 9, 4, 6, 0, 1, 7, 3, 2},
			},
			{
				"Encrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 0, 0, 0, 14, 33, 245, 67},
				[]byte{0xF3, 0x6C, 0x54, 0x39, 0x2D, 0x06, 0xA7, 0x07, 0xCB, 0xD5, 0xF7, 0x4E, 0xAA, 0xF6, 0xFB, 0xD2},
				getBigInt("323564879288803156328785244944160193490"),
				getBigInt("160292255"),
				[]uint16{9, 9, 4, 6, 0, 1, 7, 3, 2},
				[]uint16{5, 5, 2, 2, 9, 2, 0, 6, 1},
			},
			{
				"Encrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 0, 0, 9, 141, 221, 159},
				[]byte{0x2C, 0x97, 0xC0, 0x94, 0x4C, 0x1C, 0x06, 0x3F, 0x49, 0x0D, 0xBD, 0xF6, 0x96, 0x3F, 0x18, 0xC8},
				getBigInt("59273974612141750782498258422593427656"),
				getBigInt("830534155"),
				[]uint16{5, 5, 2, 2, 9, 2, 0, 6, 1},
				[]uint16{5, 5, 1, 4, 3, 5, 0, 3, 8},
			},
			{
				"Encrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 0, 0, 0, 49, 128, 242, 11},
				[]byte{0xAC, 0x61, 0xCE, 0x4A, 0xFC, 0xB7, 0x3F, 0x97, 0xCB, 0xCC, 0xA9, 0x80, 0xC8, 0x5C, 0xEB, 0x2E},
				getBigInt("229135052187757542928291096799108459310"),
				getBigInt("268751565"),
				[]uint16{5, 5, 1, 4, 3, 5, 0, 3, 8},
				[]uint16{5, 6, 5, 1, 5, 7, 8, 6, 2},
			},
			{
				"Encrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 0, 0, 16, 4, 210, 205},
				[]byte{0x33, 0xBC, 0x0C, 0x3B, 0x6D, 0x03, 0x86, 0xD8, 0xE4, 0x86, 0x72, 0x6E, 0xBE, 0xD5, 0xF4, 0x0B},
				getBigInt("68767027691550218919956754510046950411"),
				getBigInt("877484566"),
				[]uint16{5, 6, 5, 1, 5, 7, 8, 6, 2},
				[]uint16{6, 6, 5, 4, 8, 4, 7, 7, 8},
			},
			{
				"Encrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 0, 0, 0, 52, 77, 90, 22},
				[]byte{0xEA, 0x29, 0x71, 0x67, 0xD4, 0xB4, 0x52, 0xEB, 0xF5, 0x82, 0xDE, 0xAC, 0x33, 0x82, 0xAA, 0x38},
				getBigInt("311254535323485014116628468200718379576"),
				getBigInt("987131141"),
				[]uint16{6, 6, 5, 4, 8, 4, 7, 7, 8},
				[]uint16{1, 4, 1, 1, 3, 1, 7, 8, 9},
			},
			{
				"Encrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 0, 0, 58, 214, 109, 5},
				[]byte{0x1A, 0xA2, 0x2C, 0xC7, 0x0F, 0xC4, 0x4D, 0x52, 0xE7, 0x10, 0xD1, 0x67, 0x73, 0x6E, 0xD9, 0xDB},
				getBigInt("35401988178796945542889635187541334491"),
				getBigInt("418819057"),
				[]uint16{1, 4, 1, 1, 3, 1, 7, 8, 9},
				[]uint16{7, 5, 0, 9, 1, 8, 8, 1, 4},
			},
			{
				"Encrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 0, 0, 0, 24, 246, 171, 241},
				[]byte{0xED, 0xF3, 0x8D, 0x53, 0x6E, 0x19, 0x21, 0x48, 0x43, 0xFE, 0xA1, 0xC1, 0x88, 0xFB, 0xAA, 0x0D},
				getBigInt("316291629567414359958402343312719325709"),
				getBigInt("706456850"),
				[]uint16{7, 5, 0, 9, 1, 8, 8, 1, 4},
				[]uint16{0, 5, 8, 6, 5, 4, 6, 0, 7},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 0, 0, 0, 24, 246, 171, 241},
				[]byte{0xED, 0xF3, 0x8D, 0x53, 0x6E, 0x19, 0x21, 0x48, 0x43, 0xFE, 0xA1, 0xC1, 0x88, 0xFB, 0xAA, 0x0D},
				getBigInt("316291629567414359958402343312719325709"),
				getBigInt("987131141"),
				[]uint16{1, 4, 1, 1, 3, 1, 7, 8, 9},
				[]uint16{7, 5, 0, 9, 1, 8, 8, 1, 4},
			},
			{
				"Decrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 0, 0, 58, 214, 109, 5},
				[]byte{0x1A, 0xA2, 0x2C, 0xC7, 0x0F, 0xC4, 0x4D, 0x52, 0xE7, 0x10, 0xD1, 0x67, 0x73, 0x6E, 0xD9, 0xDB},
				getBigInt("35401988178796945542889635187541334491"),
				getBigInt("877484566"),
				[]uint16{6, 6, 5, 4, 8, 4, 7, 7, 8},
				[]uint16{1, 4, 1, 1, 3, 1, 7, 8, 9},
			},
			{
				"Decrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 0, 0, 0, 52, 77, 90, 22},
				[]byte{0xEA, 0x29, 0x71, 0x67, 0xD4, 0xB4, 0x52, 0xEB, 0xF5, 0x82, 0xDE, 0xAC, 0x33, 0x82, 0xAA, 0x38},
				getBigInt("311254535323485014116628468200718379576"),
				getBigInt("268751565"),
				[]uint16{5, 6, 5, 1, 5, 7, 8, 6, 2},
				[]uint16{6, 6, 5, 4, 8, 4, 7, 7, 8},
			},
			{
				"Decrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 0, 0, 16, 4, 210, 205},
				[]byte{0x33, 0xBC, 0x0C, 0x3B, 0x6D, 0x03, 0x86, 0xD8, 0xE4, 0x86, 0x72, 0x6E, 0xBE, 0xD5, 0xF4, 0x0B},
				getBigInt("68767027691550218919956754510046950411"),
				getBigInt("830534155"),
				[]uint16{5, 5, 1, 4, 3, 5, 0, 3, 8},
				[]uint16{5, 6, 5, 1, 5, 7, 8, 6, 2},
			},
			{
				"Decrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 0, 0, 0, 49, 128, 242, 11},
				[]byte{0xAC, 0x61, 0xCE, 0x4A, 0xFC, 0xB7, 0x3F, 0x97, 0xCB, 0xCC, 0xA9, 0x80, 0xC8, 0x5C, 0xEB, 0x2E},
				getBigInt("229135052187757542928291096799108459310"),
				getBigInt("160292255"),
				[]uint16{5, 5, 2, 2, 9, 2, 0, 6, 1},
				[]uint16{5, 5, 1, 4, 3, 5, 0, 3, 8},
			},
			{
				"Decrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 0, 0, 9, 141, 221, 159},
				[]byte{0x2C, 0x97, 0xC0, 0x94, 0x4C, 0x1C, 0x06, 0x3F, 0x49, 0x0D, 0xBD, 0xF6, 0x96, 0x3F, 0x18, 0xC8},
				getBigInt("59273974612141750782498258422593427656"),
				getBigInt("237106499"),
				[]uint16{9, 9, 4, 6, 0, 1, 7, 3, 2},
				[]uint16{5, 5, 2, 2, 9, 2, 0, 6, 1},
			},
			{
				"Decrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 0, 0, 0, 14, 33, 245, 67},
				[]byte{0xF3, 0x6C, 0x54, 0x39, 0x2D, 0x06, 0xA7, 0x07, 0xCB, 0xD5, 0xF7, 0x4E, 0xAA, 0xF6, 0xFB, 0xD2},
				getBigInt("323564879288803156328785244944160193490"),
				getBigInt("98765"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{9, 9, 4, 6, 0, 1, 7, 3, 2},
			},
			{
				"Decrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0xDE, 0x7F, 0x3E, 0x4A, 0x21, 0x0E, 0x3D, 0xFF, 0x34, 0x69, 0x24, 0xFB, 0xFF, 0x75, 0x00, 0x39},
				getBigInt("295749300147794922410226583415804985401"),
				getBigInt("432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #2",
		ff3CommonKey128,
		10,
		ff3CommonTweak2,
		ff3CommonInput1,
		[]uint16{0, 1, 8, 9, 8, 9, 8, 3, 9, 1, 8, 9, 3, 9, 5, 3, 8, 4},
		9,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0xFD, 0xB2, 0x56, 0x7A, 0xE7, 0xE4, 0x0C, 0xE8, 0x8A, 0x04, 0x87, 0xAF, 0x96, 0x94, 0x8A, 0xB8},
				getBigInt("337220665799231389260037749402473106104"),
				getBigInt("905227202"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{2, 0, 2, 7, 2, 2, 5, 0, 9},
			},
			{
				"Encrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 0, 0, 53, 244, 171, 194},
				[]byte{0x0D, 0x35, 0x68, 0x03, 0x41, 0x35, 0x67, 0x5E, 0x46, 0x44, 0x53, 0x92, 0x26, 0x33, 0x6D, 0x11},
				getBigInt("17557265307170606378210658467626315025"),
				getBigInt("626413790"),
				[]uint16{2, 0, 2, 7, 2, 2, 5, 0, 9},
				[]uint16{0, 9, 7, 3, 1, 4, 6, 2, 6},
			},
			{
				"Encrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 0, 37, 86, 80, 222},
				[]byte{0x67, 0x60, 0xF9, 0x93, 0x53, 0x42, 0x17, 0x24, 0x0A, 0x34, 0xC3, 0xC4, 0x08, 0x10, 0x11, 0x40},
				getBigInt("137414006056564031422737770743967256896"),
				getBigInt("872484098"),
				[]uint16{0, 9, 7, 3, 1, 4, 6, 2, 6},
				[]uint16{8, 9, 0, 4, 8, 4, 2, 7, 8},
			},
			{
				"Encrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 0, 0, 52, 1, 13, 2},
				[]byte{0x9E, 0xBB, 0x2A, 0xA5, 0xB9, 0xC3, 0x53, 0xD7, 0xC5, 0x81, 0x29, 0xD3, 0xC6, 0x89, 0xFC, 0x7A},
				getBigInt("210989847837903752197583673775436201082"),
				getBigInt("62614872"),
				[]uint16{8, 9, 0, 4, 8, 4, 2, 7, 8},
				[]uint16{2, 7, 8, 4, 1, 6, 2, 6, 0},
			},
			{
				"Encrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 0, 0, 3, 187, 109, 88},
				[]byte{0x69, 0x6B, 0x4A, 0x33, 0x5A, 0x6B, 0x95, 0x91, 0xD5, 0x15, 0x3A, 0x0B, 0x2B, 0xCF, 0xF6, 0x76},
				getBigInt("140126020288210063931602995900188718710"),
				getBigInt("61202808"),
				[]uint16{2, 7, 8, 4, 1, 6, 2, 6, 0},
				[]uint16{8, 0, 8, 2, 0, 2, 1, 6, 0},
			},
			{
				"Encrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 0, 0, 3, 165, 225, 120},
				[]byte{0xA2, 0x89, 0x8E, 0xEC, 0x17, 0xB9, 0xB8, 0x8A, 0xFD, 0xB7, 0xAF, 0xEC, 0xDE, 0x42, 0x2F, 0xF6},
				getBigInt("216049178794128392680994742157411758070"),
				getBigInt("474372942"),
				[]uint16{8, 0, 8, 2, 0, 2, 1, 6, 0},
				[]uint16{2, 4, 9, 2, 7, 3, 4, 7, 4},
			},
			{
				"Encrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 0, 0, 28, 70, 91, 78},
				[]byte{0x4F, 0xA5, 0x3B, 0x92, 0x77, 0xE3, 0xC1, 0x01, 0x4E, 0xA9, 0xDA, 0x02, 0xE7, 0x0B, 0xD9, 0x7A},
				getBigInt("105866948915248996819895414429877787002"),
				getBigInt("938989810"),
				[]uint16{2, 4, 9, 2, 7, 3, 4, 7, 4},
				[]uint16{0, 1, 8, 9, 8, 9, 8, 3, 9},
			},
			{
				"Encrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 0, 0, 55, 247, 216, 242},
				[]byte{0x38, 0xD2, 0xCA, 0x1C, 0x5A, 0x20, 0x82, 0xFD, 0x14, 0x80, 0x3B, 0x53, 0xD1, 0xF1, 0x21, 0xAF},
				getBigInt("75531249397269045807726683499009221039"),
				getBigInt("483593981"),
				[]uint16{0, 1, 8, 9, 8, 9, 8, 3, 9},
				[]uint16{1, 8, 9, 3, 9, 5, 3, 8, 4},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 0, 0, 55, 247, 216, 242},
				[]byte{0x38, 0xD2, 0xCA, 0x1C, 0x5A, 0x20, 0x82, 0xFD, 0x14, 0x80, 0x3B, 0x53, 0xD1, 0xF1, 0x21, 0xAF},
				getBigInt("75531249397269045807726683499009221039"),
				getBigInt("474372942"),
				[]uint16{2, 4, 9, 2, 7, 3, 4, 7, 4},
				[]uint16{0, 1, 8, 9, 8, 9, 8, 3, 9},
			},
			{
				"Decrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 0, 0, 28, 70, 91, 78},
				[]byte{0x4F, 0xA5, 0x3B, 0x92, 0x77, 0xE3, 0xC1, 0x01, 0x4E, 0xA9, 0xDA, 0x02, 0xE7, 0x0B, 0xD9, 0x7A},
				getBigInt("105866948915248996819895414429877787002"),
				getBigInt("61202808"),
				[]uint16{8, 0, 8, 2, 0, 2, 1, 6, 0},
				[]uint16{2, 4, 9, 2, 7, 3, 4, 7, 4},
			},
			{
				"Decrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 0, 0, 3, 165, 225, 120},
				[]byte{0xA2, 0x89, 0x8E, 0xEC, 0x17, 0xB9, 0xB8, 0x8A, 0xFD, 0xB7, 0xAF, 0xEC, 0xDE, 0x42, 0x2F, 0xF6},
				getBigInt("216049178794128392680994742157411758070"),
				getBigInt("62614872"),
				[]uint16{2, 7, 8, 4, 1, 6, 2, 6, 0},
				[]uint16{8, 0, 8, 2, 0, 2, 1, 6, 0},
			},
			{
				"Decrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 0, 0, 3, 187, 109, 88},
				[]byte{0x69, 0x6B, 0x4A, 0x33, 0x5A, 0x6B, 0x95, 0x91, 0xD5, 0x15, 0x3A, 0x0B, 0x2B, 0xCF, 0xF6, 0x76},
				getBigInt("140126020288210063931602995900188718710"),
				getBigInt("872484098"),
				[]uint16{8, 9, 0, 4, 8, 4, 2, 7, 8},
				[]uint16{2, 7, 8, 4, 1, 6, 2, 6, 0},
			},
			{
				"Decrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 0, 0, 52, 1, 13, 2},
				[]byte{0x9E, 0xBB, 0x2A, 0xA5, 0xB9, 0xC3, 0x53, 0xD7, 0xC5, 0x81, 0x29, 0xD3, 0xC6, 0x89, 0xFC, 0x7A},
				getBigInt("210989847837903752197583673775436201082"),
				getBigInt("626413790"),
				[]uint16{0, 9, 7, 3, 1, 4, 6, 2, 6},
				[]uint16{8, 9, 0, 4, 8, 4, 2, 7, 8},
			},
			{
				"Decrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 0, 37, 86, 80, 222},
				[]byte{0x67, 0x60, 0xF9, 0x93, 0x53, 0x42, 0x17, 0x24, 0x0A, 0x34, 0xC3, 0xC4, 0x08, 0x10, 0x11, 0x40},
				getBigInt("137414006056564031422737770743967256896"),
				getBigInt("905227202"),
				[]uint16{2, 0, 2, 7, 2, 2, 5, 0, 9},
				[]uint16{0, 9, 7, 3, 1, 4, 6, 2, 6},
			},
			{
				"Decrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 0, 0, 53, 244, 171, 194},
				[]byte{0x0D, 0x35, 0x68, 0x03, 0x41, 0x35, 0x67, 0x5E, 0x46, 0x44, 0x53, 0x92, 0x26, 0x33, 0x6D, 0x11},
				getBigInt("17557265307170606378210658467626315025"),
				getBigInt("98765"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{2, 0, 2, 7, 2, 2, 5, 0, 9},
			},
			{
				"Decrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0xFD, 0xB2, 0x56, 0x7A, 0xE7, 0xE4, 0x0C, 0xE8, 0x8A, 0x04, 0x87, 0xAF, 0x96, 0x94, 0x8A, 0xB8},
				getBigInt("337220665799231389260037749402473106104"),
				getBigInt("432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #3",
		ff3CommonKey128,
		10,
		ff3CommonTweak1,
		ff3CommonInput2,
		[]uint16{4, 8, 5, 9, 8, 3, 6, 7, 1, 6, 2, 2, 5, 2, 5, 6, 9, 6, 2, 9, 3, 9, 7, 4, 1, 6, 2, 2, 6},
		15,
		14,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x63, 0x4F, 0xEE, 0xAF, 0x80, 0x0B, 0xF7, 0x3C, 0xD4, 0xA3, 0x90, 0xF8, 0xE6, 0xE5, 0x71, 0x1A},
				getBigInt("132008604152573578881746879192339149082"),
				getBigInt("977957771270180"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{0, 8, 1, 0, 7, 2, 1, 7, 7, 7, 5, 9, 7, 7, 9},
			},
			{
				"Encrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 3, 121, 114, 137, 143, 216, 36},
				[]byte{0xD3, 0x3E, 0x2B, 0x0E, 0xDB, 0x50, 0x5A, 0x21, 0x06, 0xCB, 0xB2, 0x17, 0x7B, 0x8D, 0x0B, 0x69},
				getBigInt("280789902836527997555860570416599599977"),
				getBigInt("70416698299977"),
				[]uint16{0, 8, 1, 0, 7, 2, 1, 7, 7, 7, 5, 9, 7, 7, 9},
				[]uint16{7, 7, 9, 9, 9, 2, 8, 9, 6, 6, 1, 4, 0, 7},
			},
			{
				"Encrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 64, 11, 42, 73, 214, 73},
				[]byte{0x53, 0x40, 0xC6, 0xB3, 0xC0, 0xC3, 0x5F, 0x8E, 0x8F, 0x39, 0x7D, 0x8E, 0x94, 0xEA, 0x5C, 0xAC},
				getBigInt("110662260807694173178399363608171142316"),
				getBigInt("341565942412496"),
				[]uint16{7, 7, 9, 9, 9, 2, 8, 9, 6, 6, 1, 4, 0, 7},
				[]uint16{6, 9, 4, 2, 1, 4, 2, 4, 9, 5, 6, 5, 1, 4, 3},
			},
			{
				"Encrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 1, 54, 167, 4, 170, 52, 208},
				[]byte{0xB5, 0x92, 0xD0, 0x97, 0xD9, 0x95, 0x82, 0x38, 0x1D, 0x78, 0xA2, 0x72, 0xAF, 0x42, 0x21, 0x60},
				getBigInt("241352573350404949051856214707889381728"),
				getBigInt("85124587681705"),
				[]uint16{6, 9, 4, 2, 1, 4, 2, 4, 9, 5, 6, 5, 1, 4, 3},
				[]uint16{5, 0, 7, 1, 8, 6, 7, 8, 5, 4, 2, 1, 5, 8},
			},
			{
				"Encrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 77, 107, 156, 207, 119, 169},
				[]byte{0x76, 0xFA, 0x58, 0x67, 0xE9, 0x4E, 0x0B, 0xC6, 0xF4, 0x84, 0x72, 0x42, 0xB9, 0x77, 0x4D, 0xBA},
				getBigInt("158148770802003999344415250210700611002"),
				getBigInt("591776643023498"),
				[]uint16{5, 0, 7, 1, 8, 6, 7, 8, 5, 4, 2, 1, 5, 8},
				[]uint16{8, 9, 4, 3, 2, 0, 3, 4, 6, 6, 7, 7, 1, 9, 5},
			},
			{
				"Encrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 2, 26, 55, 188, 152, 2, 138},
				[]byte{0x78, 0xA3, 0x7F, 0x18, 0x1F, 0x2E, 0xD4, 0xD4, 0xE8, 0xC6, 0xD1, 0x10, 0x24, 0xBC, 0xA6, 0x27},
				getBigInt("160356281659277296717736667474441315879"),
				getBigInt("52599028997584"),
				[]uint16{8, 9, 4, 3, 2, 0, 3, 4, 6, 6, 7, 7, 1, 9, 5},
				[]uint16{4, 8, 5, 7, 9, 9, 8, 2, 0, 9, 9, 5, 2, 5},
			},
			{
				"Encrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 47, 214, 170, 112, 93, 208},
				[]byte{0x90, 0x96, 0xC6, 0xCD, 0x62, 0x49, 0x1A, 0x65, 0x5C, 0x24, 0x9C, 0x15, 0x9D, 0x0A, 0x9F, 0x46},
				getBigInt("192191708111100855495973933449533366086"),
				getBigInt("525226176389584"),
				[]uint16{4, 8, 5, 7, 9, 9, 8, 2, 0, 9, 9, 5, 2, 5},
				[]uint16{4, 8, 5, 9, 8, 3, 6, 7, 1, 6, 2, 2, 5, 2, 5},
			},
			{
				"Encrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 1, 221, 176, 191, 171, 161, 208},
				[]byte{0x53, 0xAA, 0x0A, 0x4B, 0x1C, 0x5C, 0x3B, 0x43, 0xF9, 0x2C, 0x5E, 0xF9, 0x39, 0xEA, 0x27, 0xE8},
				getBigInt("111208822891084244558307109662450395112"),
				getBigInt("62261479392696"),
				[]uint16{4, 8, 5, 9, 8, 3, 6, 7, 1, 6, 2, 2, 5, 2, 5},
				[]uint16{6, 9, 6, 2, 9, 3, 9, 7, 4, 1, 6, 2, 2, 6},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 1, 221, 176, 191, 171, 161, 208},
				[]byte{0x53, 0xAA, 0x0A, 0x4B, 0x1C, 0x5C, 0x3B, 0x43, 0xF9, 0x2C, 0x5E, 0xF9, 0x39, 0xEA, 0x27, 0xE8},
				getBigInt("111208822891084244558307109662450395112"),
				getBigInt("52599028997584"),
				[]uint16{4, 8, 5, 7, 9, 9, 8, 2, 0, 9, 9, 5, 2, 5},
				[]uint16{4, 8, 5, 9, 8, 3, 6, 7, 1, 6, 2, 2, 5, 2, 5},
			},
			{
				"Decrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 47, 214, 170, 112, 93, 208},
				[]byte{0x90, 0x96, 0xC6, 0xCD, 0x62, 0x49, 0x1A, 0x65, 0x5C, 0x24, 0x9C, 0x15, 0x9D, 0x0A, 0x9F, 0x46},
				getBigInt("192191708111100855495973933449533366086"),
				getBigInt("591776643023498"),
				[]uint16{8, 9, 4, 3, 2, 0, 3, 4, 6, 6, 7, 7, 1, 9, 5},
				[]uint16{4, 8, 5, 7, 9, 9, 8, 2, 0, 9, 9, 5, 2, 5},
			},
			{
				"Decrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 2, 26, 55, 188, 152, 2, 138},
				[]byte{0x78, 0xA3, 0x7F, 0x18, 0x1F, 0x2E, 0xD4, 0xD4, 0xE8, 0xC6, 0xD1, 0x10, 0x24, 0xBC, 0xA6, 0x27},
				getBigInt("160356281659277296717736667474441315879"),
				getBigInt("85124587681705"),
				[]uint16{5, 0, 7, 1, 8, 6, 7, 8, 5, 4, 2, 1, 5, 8},
				[]uint16{8, 9, 4, 3, 2, 0, 3, 4, 6, 6, 7, 7, 1, 9, 5},
			},
			{
				"Decrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 77, 107, 156, 207, 119, 169},
				[]byte{0x76, 0xFA, 0x58, 0x67, 0xE9, 0x4E, 0x0B, 0xC6, 0xF4, 0x84, 0x72, 0x42, 0xB9, 0x77, 0x4D, 0xBA},
				getBigInt("158148770802003999344415250210700611002"),
				getBigInt("341565942412496"),
				[]uint16{6, 9, 4, 2, 1, 4, 2, 4, 9, 5, 6, 5, 1, 4, 3},
				[]uint16{5, 0, 7, 1, 8, 6, 7, 8, 5, 4, 2, 1, 5, 8},
			},
			{
				"Decrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 1, 54, 167, 4, 170, 52, 208},
				[]byte{0xB5, 0x92, 0xD0, 0x97, 0xD9, 0x95, 0x82, 0x38, 0x1D, 0x78, 0xA2, 0x72, 0xAF, 0x42, 0x21, 0x60},
				getBigInt("241352573350404949051856214707889381728"),
				getBigInt("70416698299977"),
				[]uint16{7, 7, 9, 9, 9, 2, 8, 9, 6, 6, 1, 4, 0, 7},
				[]uint16{6, 9, 4, 2, 1, 4, 2, 4, 9, 5, 6, 5, 1, 4, 3},
			},
			{
				"Decrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 64, 11, 42, 73, 214, 73},
				[]byte{0x53, 0x40, 0xC6, 0xB3, 0xC0, 0xC3, 0x5F, 0x8E, 0x8F, 0x39, 0x7D, 0x8E, 0x94, 0xEA, 0x5C, 0xAC},
				getBigInt("110662260807694173178399363608171142316"),
				getBigInt("977957771270180"),
				[]uint16{0, 8, 1, 0, 7, 2, 1, 7, 7, 7, 5, 9, 7, 7, 9},
				[]uint16{7, 7, 9, 9, 9, 2, 8, 9, 6, 6, 1, 4, 0, 7},
			},
			{
				"Decrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 3, 121, 114, 137, 143, 216, 36},
				[]byte{0xD3, 0x3E, 0x2B, 0x0E, 0xDB, 0x50, 0x5A, 0x21, 0x06, 0xCB, 0xB2, 0x17, 0x7B, 0x8D, 0x0B, 0x69},
				getBigInt("280789902836527997555860570416599599977"),
				getBigInt("98700000"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{0, 8, 1, 0, 7, 2, 1, 7, 7, 7, 5, 9, 7, 7, 9},
			},
			{
				"Decrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x63, 0x4F, 0xEE, 0xAF, 0x80, 0x0B, 0xF7, 0x3C, 0xD4, 0xA3, 0x90, 0xF8, 0xE6, 0xE5, 0x71, 0x1A},
				getBigInt("132008604152573578881746879192339149082"),
				getBigInt("98765432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #4",
		ff3CommonKey128,
		10,
		ff3CommonTweak3,
		ff3CommonInput2,
		[]uint16{3, 4, 6, 9, 5, 2, 2, 4, 8, 2, 1, 7, 3, 4, 5, 3, 5, 1, 2, 2, 6, 1, 3, 7, 0, 1, 4, 3, 4},
		15,
		14,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x87, 0x9B, 0xB7, 0x39, 0x33, 0x3E, 0xD8, 0xAF, 0xC3, 0xD7, 0xEC, 0x2C, 0xB4, 0xA7, 0x80, 0x19},
				getBigInt("180254301656858984868348231138341781529"),
				getBigInt("329903773902627"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{7, 2, 6, 2, 0, 9, 3, 7, 7, 3, 0, 9, 9, 2, 3},
			},
			{
				"Encrypt: round #1",
				[]byte{0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 44, 11, 181, 64, 231, 35},
				[]byte{0x14, 0x41, 0x54, 0x53, 0x95, 0x4E, 0xDB, 0x05, 0xE3, 0xE2, 0xBF, 0x10, 0x19, 0xC7, 0x7F, 0x89},
				getBigInt("26923769556055873662410977703950253961"),
				getBigInt("77704048953961"),
				[]uint16{7, 2, 6, 2, 0, 9, 3, 7, 7, 3, 0, 9, 9, 2, 3},
				[]uint16{1, 6, 9, 3, 5, 9, 8, 4, 0, 4, 0, 7, 7, 7},
			},
			{
				"Encrypt: round #2",
				[]byte{0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 70, 171, 226, 60, 74, 105},
				[]byte{0xA9, 0x22, 0x19, 0xC4, 0xC7, 0x7D, 0xCB, 0x40, 0x0C, 0x81, 0x31, 0x7B, 0xBB, 0xA3, 0x8A, 0x9F},
				getBigInt("224816592031540503251472393464877124255"),
				getBigInt("723368651026882"),
				[]uint16{1, 6, 9, 3, 5, 9, 8, 4, 0, 4, 0, 7, 7, 7},
				[]uint16{2, 8, 8, 6, 2, 0, 1, 5, 6, 8, 6, 3, 3, 2, 7},
			},
			{
				"Encrypt: round #3",
				[]byte{0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 145, 230, 99, 124, 113, 194},
				[]byte{0x51, 0xD8, 0x06, 0xD5, 0x37, 0x74, 0xA6, 0xC6, 0x26, 0x95, 0x64, 0xE0, 0x4B, 0x05, 0x5B, 0x6A},
				getBigInt("108789142367240644424618408177379400554"),
				getBigInt("85881428354515"),
				[]uint16{2, 8, 8, 6, 2, 0, 1, 5, 6, 8, 6, 3, 3, 2, 7},
				[]uint16{5, 1, 5, 4, 5, 3, 8, 2, 4, 1, 8, 8, 5, 8},
			},
			{
				"Encrypt: round #4",
				[]byte{0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 78, 27, 212, 7, 165, 211},
				[]byte{0xB9, 0x27, 0xEC, 0x0C, 0x70, 0xE4, 0x5B, 0x85, 0xB7, 0xEB, 0xF7, 0x94, 0x17, 0xBA, 0xC7, 0x2C},
				getBigInt("246114466432035095118991742816520685356"),
				getBigInt("466185171712238"),
				[]uint16{5, 1, 5, 4, 5, 3, 8, 2, 4, 1, 8, 8, 5, 8},
				[]uint16{8, 3, 2, 2, 1, 7, 1, 7, 1, 5, 8, 1, 6, 6, 4},
			},
			{
				"Encrypt: round #5",
				[]byte{0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 167, 254, 49, 143, 56, 238},
				[]byte{0xC1, 0xC4, 0xF8, 0x17, 0xCB, 0x99, 0x44, 0x9A, 0x2B, 0xDD, 0xC1, 0x5D, 0x20, 0xF3, 0x07, 0x95},
				getBigInt("257563725293601779736986048305682384789"),
				getBigInt("34187110739304"),
				[]uint16{8, 3, 2, 2, 1, 7, 1, 7, 1, 5, 8, 1, 6, 6, 4},
				[]uint16{4, 0, 3, 9, 3, 7, 0, 1, 1, 7, 8, 1, 4, 3},
			},
			{
				"Encrypt: round #6",
				[]byte{0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 31, 23, 206, 151, 109, 104},
				[]byte{0xDA, 0xAA, 0x12, 0x92, 0xB3, 0x26, 0xB8, 0xAE, 0x8F, 0x8F, 0x61, 0xAA, 0x0D, 0x80, 0x63, 0xCD},
				getBigInt("290654770253191801877218077527670547405"),
				getBigInt("543712842259643"),
				[]uint16{4, 0, 3, 9, 3, 7, 0, 1, 1, 7, 8, 1, 4, 3},
				[]uint16{3, 4, 6, 9, 5, 2, 2, 4, 8, 2, 1, 7, 3, 4, 5},
			},
			{
				"Encrypt: round #7",
				[]byte{0, 0, 0, 7, 0, 0, 0, 0, 0, 1, 238, 129, 2, 210, 156, 187},
				[]byte{0x4E, 0xA5, 0x38, 0xDF, 0xF3, 0xD5, 0x22, 0xF2, 0x73, 0x84, 0x9D, 0x6C, 0x9B, 0x67, 0x31, 0xA1},
				getBigInt("104537666211162253438756709223620882849"),
				getBigInt("43410731622153"),
				[]uint16{3, 4, 6, 9, 5, 2, 2, 4, 8, 2, 1, 7, 3, 4, 5},
				[]uint16{3, 5, 1, 2, 2, 6, 1, 3, 7, 0, 1, 4, 3, 4},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{0, 0, 0, 7, 0, 0, 0, 0, 0, 1, 238, 129, 2, 210, 156, 187},
				[]byte{0x4E, 0xA5, 0x38, 0xDF, 0xF3, 0xD5, 0x22, 0xF2, 0x73, 0x84, 0x9D, 0x6C, 0x9B, 0x67, 0x31, 0xA1},
				getBigInt("104537666211162253438756709223620882849"),
				getBigInt("34187110739304"),
				[]uint16{4, 0, 3, 9, 3, 7, 0, 1, 1, 7, 8, 1, 4, 3},
				[]uint16{3, 4, 6, 9, 5, 2, 2, 4, 8, 2, 1, 7, 3, 4, 5},
			},
			{
				"Decrypt: round #6",
				[]byte{0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 31, 23, 206, 151, 109, 104},
				[]byte{0xDA, 0xAA, 0x12, 0x92, 0xB3, 0x26, 0xB8, 0xAE, 0x8F, 0x8F, 0x61, 0xAA, 0x0D, 0x80, 0x63, 0xCD},
				getBigInt("290654770253191801877218077527670547405"),
				getBigInt("466185171712238"),
				[]uint16{8, 3, 2, 2, 1, 7, 1, 7, 1, 5, 8, 1, 6, 6, 4},
				[]uint16{4, 0, 3, 9, 3, 7, 0, 1, 1, 7, 8, 1, 4, 3},
			},
			{
				"Decrypt: round #5",
				[]byte{0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 167, 254, 49, 143, 56, 238},
				[]byte{0xC1, 0xC4, 0xF8, 0x17, 0xCB, 0x99, 0x44, 0x9A, 0x2B, 0xDD, 0xC1, 0x5D, 0x20, 0xF3, 0x07, 0x95},
				getBigInt("257563725293601779736986048305682384789"),
				getBigInt("85881428354515"),
				[]uint16{5, 1, 5, 4, 5, 3, 8, 2, 4, 1, 8, 8, 5, 8},
				[]uint16{8, 3, 2, 2, 1, 7, 1, 7, 1, 5, 8, 1, 6, 6, 4},
			},
			{
				"Decrypt: round #4",
				[]byte{0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 78, 27, 212, 7, 165, 211},
				[]byte{0xB9, 0x27, 0xEC, 0x0C, 0x70, 0xE4, 0x5B, 0x85, 0xB7, 0xEB, 0xF7, 0x94, 0x17, 0xBA, 0xC7, 0x2C},
				getBigInt("246114466432035095118991742816520685356"),
				getBigInt("723368651026882"),
				[]uint16{2, 8, 8, 6, 2, 0, 1, 5, 6, 8, 6, 3, 3, 2, 7},
				[]uint16{5, 1, 5, 4, 5, 3, 8, 2, 4, 1, 8, 8, 5, 8},
			},
			{
				"Decrypt: round #3",
				[]byte{0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 145, 230, 99, 124, 113, 194},
				[]byte{0x51, 0xD8, 0x06, 0xD5, 0x37, 0x74, 0xA6, 0xC6, 0x26, 0x95, 0x64, 0xE0, 0x4B, 0x05, 0x5B, 0x6A},
				getBigInt("108789142367240644424618408177379400554"),
				getBigInt("77704048953961"),
				[]uint16{1, 6, 9, 3, 5, 9, 8, 4, 0, 4, 0, 7, 7, 7},
				[]uint16{2, 8, 8, 6, 2, 0, 1, 5, 6, 8, 6, 3, 3, 2, 7},
			},
			{
				"Decrypt: round #2",
				[]byte{0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 70, 171, 226, 60, 74, 105},
				[]byte{0xA9, 0x22, 0x19, 0xC4, 0xC7, 0x7D, 0xCB, 0x40, 0x0C, 0x81, 0x31, 0x7B, 0xBB, 0xA3, 0x8A, 0x9F},
				getBigInt("224816592031540503251472393464877124255"),
				getBigInt("329903773902627"),
				[]uint16{7, 2, 6, 2, 0, 9, 3, 7, 7, 3, 0, 9, 9, 2, 3},
				[]uint16{1, 6, 9, 3, 5, 9, 8, 4, 0, 4, 0, 7, 7, 7},
			},
			{
				"Decrypt: round #1",
				[]byte{0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 44, 11, 181, 64, 231, 35},
				[]byte{0x14, 0x41, 0x54, 0x53, 0x95, 0x4E, 0xDB, 0x05, 0xE3, 0xE2, 0xBF, 0x10, 0x19, 0xC7, 0x7F, 0x89},
				getBigInt("26923769556055873662410977703950253961"),
				getBigInt("98700000"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{7, 2, 6, 2, 0, 9, 3, 7, 7, 3, 0, 9, 9, 2, 3},
			},
			{
				"Decrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x87, 0x9B, 0xB7, 0x39, 0x33, 0x3E, 0xD8, 0xAF, 0xC3, 0xD7, 0xEC, 0x2C, 0xB4, 0xA7, 0x80, 0x19},
				getBigInt("180254301656858984868348231138341781529"),
				getBigInt("98765432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #5",
		ff3CommonKey128,
		26,
		ff3CommonTweak2,
		ff3CommonInput3,
		[]uint16{16, 2, 25, 20, 4, 0, 18, 9, 9, 2, 15, 23, 2, 0, 12, 19, 10, 20, 11},
		10,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 3, 140, 43, 56, 187, 32},
				[]byte{0x20, 0x92, 0x46, 0x3E, 0xA3, 0x01, 0x96, 0x25, 0x0D, 0x0B, 0xAF, 0x3E, 0x5B, 0xB1, 0x9E, 0x6A},
				getBigInt("43294795937729698833146745135299665514"),
				getBigInt("53466973912356"),
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{4, 2, 13, 1, 21, 11, 23, 0, 22, 9},
			},
			{
				"Encrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 48, 160, 191, 252, 189, 36},
				[]byte{0x53, 0xD1, 0x76, 0x49, 0x29, 0x96, 0x8A, 0x7A, 0x61, 0x2D, 0x07, 0x63, 0xED, 0x27, 0x4E, 0xA3},
				getBigInt("111413512814441769083482546159355383459"),
				getBigInt("783066858435"),
				[]uint16{4, 2, 13, 1, 21, 11, 23, 0, 22, 9},
				[]uint16{17, 17, 12, 5, 2, 23, 12, 19, 3},
			},
			{
				"Encrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 182, 82, 108, 3, 195},
				[]byte{0x34, 0x63, 0x17, 0xA6, 0xC8, 0xFF, 0xB5, 0xF9, 0x2A, 0xC7, 0x77, 0xF2, 0x19, 0xFB, 0xA4, 0xBA},
				getBigInt("69634372879312572075448259881874465978"),
				getBigInt("70478395266526"),
				[]uint16{17, 17, 12, 5, 2, 23, 12, 19, 3},
				[]uint16{0, 13, 11, 20, 20, 15, 23, 12, 25, 12},
			},
			{
				"Encrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 64, 25, 135, 182, 213, 222},
				[]byte{0x22, 0x22, 0xA9, 0x5F, 0x0A, 0x19, 0xC4, 0xD6, 0x60, 0x7A, 0x3F, 0xB9, 0x0E, 0xDD, 0xB1, 0xF0},
				getBigInt("45373725206901782587602825076639904240"),
				getBigInt("4485780042675"),
				[]uint16{0, 13, 11, 20, 20, 15, 23, 12, 25, 12},
				[]uint16{9, 23, 23, 19, 4, 1, 13, 12, 21},
			},
			{
				"Encrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 4, 20, 109, 83, 115, 179},
				[]byte{0xF0, 0xDE, 0xC6, 0x72, 0xB0, 0x29, 0x29, 0xA1, 0x39, 0xEC, 0x6E, 0x05, 0x91, 0x42, 0xAE, 0x4C},
				getBigInt("320171433894605715165612249211407085132"),
				getBigInt("21704262742058"),
				[]uint16{9, 23, 23, 19, 4, 1, 13, 12, 21},
				[]uint16{0, 11, 23, 14, 14, 12, 7, 24, 25, 3},
			},
			{
				"Encrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 19, 189, 106, 222, 240, 42},
				[]byte{0xA4, 0x19, 0x9D, 0xFE, 0xC7, 0x04, 0xC4, 0x87, 0x61, 0xC4, 0xA6, 0xF3, 0x81, 0x62, 0xD3, 0x1B},
				getBigInt("218126403254043906521248087648896209691"),
				getBigInt("4644812701902"),
				[]uint16{0, 11, 23, 14, 14, 12, 7, 24, 25, 3},
				[]uint16{22, 24, 0, 19, 5, 22, 7, 6, 22},
			},
			{
				"Encrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 4, 57, 116, 105, 64, 206},
				[]byte{0x33, 0x50, 0x62, 0x15, 0xD6, 0x70, 0x1B, 0x6D, 0x3D, 0xF1, 0x42, 0xE9, 0xB1, 0x7A, 0x87, 0x7E},
				getBigInt("68208000940011387704247483042289583998"),
				getBigInt("12816299911080"),
				[]uint16{22, 24, 0, 19, 5, 22, 7, 6, 22},
				[]uint16{16, 2, 25, 20, 4, 0, 18, 9, 9, 2},
			},
			{
				"Encrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 11, 168, 7, 0, 231, 168},
				[]byte{0xA3, 0xFD, 0xF9, 0x8A, 0xF7, 0xDE, 0x87, 0x68, 0x87, 0xE1, 0xFE, 0x0F, 0x26, 0x3A, 0xAD, 0xFF},
				getBigInt("217982875748340153313307554297226636799"),
				getBigInt("2461054303437"),
				[]uint16{16, 2, 25, 20, 4, 0, 18, 9, 9, 2},
				[]uint16{15, 23, 2, 0, 12, 19, 10, 20, 11},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 11, 168, 7, 0, 231, 168},
				[]byte{0xA3, 0xFD, 0xF9, 0x8A, 0xF7, 0xDE, 0x87, 0x68, 0x87, 0xE1, 0xFE, 0x0F, 0x26, 0x3A, 0xAD, 0xFF},
				getBigInt("217982875748340153313307554297226636799"),
				getBigInt("4644812701902"),
				[]uint16{22, 24, 0, 19, 5, 22, 7, 6, 22},
				[]uint16{16, 2, 25, 20, 4, 0, 18, 9, 9, 2},
			},

			{
				"Decrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 4, 57, 116, 105, 64, 206},
				[]byte{0x33, 0x50, 0x62, 0x15, 0xD6, 0x70, 0x1B, 0x6D, 0x3D, 0xF1, 0x42, 0xE9, 0xB1, 0x7A, 0x87, 0x7E},
				getBigInt("68208000940011387704247483042289583998"),
				getBigInt("21704262742058"),
				[]uint16{0, 11, 23, 14, 14, 12, 7, 24, 25, 3},
				[]uint16{22, 24, 0, 19, 5, 22, 7, 6, 22},
			},
			{
				"Decrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 19, 189, 106, 222, 240, 42},
				[]byte{0xA4, 0x19, 0x9D, 0xFE, 0xC7, 0x04, 0xC4, 0x87, 0x61, 0xC4, 0xA6, 0xF3, 0x81, 0x62, 0xD3, 0x1B},
				getBigInt("218126403254043906521248087648896209691"),
				getBigInt("4485780042675"),
				[]uint16{9, 23, 23, 19, 4, 1, 13, 12, 21},
				[]uint16{0, 11, 23, 14, 14, 12, 7, 24, 25, 3},
			},
			{
				"Decrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 4, 20, 109, 83, 115, 179},
				[]byte{0xF0, 0xDE, 0xC6, 0x72, 0xB0, 0x29, 0x29, 0xA1, 0x39, 0xEC, 0x6E, 0x05, 0x91, 0x42, 0xAE, 0x4C},
				getBigInt("320171433894605715165612249211407085132"),
				getBigInt("70478395266526"),
				[]uint16{0, 13, 11, 20, 20, 15, 23, 12, 25, 12},
				[]uint16{9, 23, 23, 19, 4, 1, 13, 12, 21},
			},
			{
				"Decrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 64, 25, 135, 182, 213, 222},
				[]byte{0x22, 0x22, 0xA9, 0x5F, 0x0A, 0x19, 0xC4, 0xD6, 0x60, 0x7A, 0x3F, 0xB9, 0x0E, 0xDD, 0xB1, 0xF0},
				getBigInt("45373725206901782587602825076639904240"),
				getBigInt("783066858435"),
				[]uint16{17, 17, 12, 5, 2, 23, 12, 19, 3},
				[]uint16{0, 13, 11, 20, 20, 15, 23, 12, 25, 12},
			},
			{
				"Decrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 182, 82, 108, 3, 195},
				[]byte{0x34, 0x63, 0x17, 0xA6, 0xC8, 0xFF, 0xB5, 0xF9, 0x2A, 0xC7, 0x77, 0xF2, 0x19, 0xFB, 0xA4, 0xBA},
				getBigInt("69634372879312572075448259881874465978"),
				getBigInt("53466973912356"),
				[]uint16{4, 2, 13, 1, 21, 11, 23, 0, 22, 9},
				[]uint16{17, 17, 12, 5, 2, 23, 12, 19, 3},
			},
			{
				"Decrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 48, 160, 191, 252, 189, 36},
				[]byte{0x53, 0xD1, 0x76, 0x49, 0x29, 0x96, 0x8A, 0x7A, 0x61, 0x2D, 0x07, 0x63, 0xED, 0x27, 0x4E, 0xA3},
				getBigInt("111413512814441769083482546159355383459"),
				getBigInt("3900555442976"),
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{4, 2, 13, 1, 21, 11, 23, 0, 22, 9},
			},
			{
				"Decrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 3, 140, 43, 56, 187, 32},
				[]byte{0x20, 0x92, 0x46, 0x3E, 0xA3, 0x01, 0x96, 0x25, 0x0D, 0x0B, 0xAF, 0x3E, 0x5B, 0xB1, 0x9E, 0x6A},
				getBigInt("43294795937729698833146745135299665514"),
				getBigInt("50594287082170"),
				[]uint16{0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
			},
		},
	},
	{
		"Sample #6",
		ff3CommonKey192,
		10,
		ff3CommonTweak1,
		ff3CommonInput1,
		[]uint16{6, 4, 6, 9, 6, 5, 3, 9, 3, 8, 7, 5, 0, 2, 8, 7, 5, 5},
		9,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0x94, 0xD5, 0xDC, 0x0E, 0x76, 0xA1, 0x60, 0x10, 0x0D, 0xF7, 0x5E, 0x21, 0x5B, 0xC1, 0x4A, 0x57},
				getBigInt("197836165883056867901047745955565226583"),
				getBigInt("997347681"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{1, 8, 6, 7, 4, 3, 7, 9, 9},
			},
			{
				"Encrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 0, 0, 0, 59, 114, 81, 97},
				[]byte{0x32, 0xBF, 0x3F, 0x1E, 0xBF, 0x7C, 0x64, 0x31, 0xA9, 0x48, 0xF5, 0x14, 0x64, 0x51, 0x69, 0x0E},
				getBigInt("67454408717137868035652652075098138894"),
				getBigInt("98237659"),
				[]uint16{1, 8, 6, 7, 4, 3, 7, 9, 9},
				[]uint16{9, 5, 6, 7, 3, 2, 8, 9, 0},
			},
			{
				"Encrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 0, 0, 5, 218, 252, 219},
				[]byte{0x85, 0x16, 0xAD, 0x28, 0x0E, 0x00, 0x6D, 0xC5, 0x25, 0x5B, 0xFD, 0xB9, 0xA5, 0x69, 0x45, 0x6E},
				getBigInt("176905066000602818125736927003085981038"),
				getBigInt("83328719"),
				[]uint16{9, 5, 6, 7, 3, 2, 8, 9, 0},
				[]uint16{9, 1, 7, 8, 2, 3, 3, 8, 0},
			},
			{
				"Encrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 0, 0, 0, 4, 247, 126, 207},
				[]byte{0x08, 0xC9, 0x96, 0x45, 0x5F, 0xCC, 0x05, 0xF9, 0x04, 0x2E, 0xF1, 0x30, 0x36, 0x45, 0x2A, 0x3E},
				getBigInt("11680523492676313576970270283491781182"),
				getBigInt("590018841"),
				[]uint16{9, 1, 7, 8, 2, 3, 3, 8, 0},
				[]uint16{1, 4, 8, 8, 1, 0, 0, 9, 5},
			},
			{
				"Encrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 0, 0, 35, 42, 249, 25},
				[]byte{0xBE, 0x06, 0xB0, 0xD4, 0x65, 0xB6, 0x0C, 0xDD, 0xCF, 0xE1, 0xA7, 0xC7, 0xCF, 0x47, 0x37, 0xA7},
				getBigInt("252588059512223991786762096467566344103"),
				getBigInt("649672822"),
				[]uint16{1, 4, 8, 8, 1, 0, 0, 9, 5},
				[]uint16{2, 2, 8, 2, 7, 6, 9, 4, 6},
			},
			{
				"Encrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 0, 0, 0, 38, 185, 56, 118},
				[]byte{0xAA, 0x63, 0x1F, 0x98, 0x4C, 0x1A, 0x75, 0x6D, 0x80, 0x90, 0xCC, 0x0B, 0xFE, 0x44, 0x79, 0xBD},
				getBigInt("226483437493361909053404110117562251709"),
				getBigInt("152270550"),
				[]uint16{2, 2, 8, 2, 7, 6, 9, 4, 6},
				[]uint16{0, 5, 5, 0, 7, 2, 2, 5, 1},
			},
			{
				"Encrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 0, 0, 9, 19, 118, 214},
				[]byte{0x5D, 0x30, 0xAD, 0xBE, 0x4D, 0xD0, 0x4E, 0x47, 0xB6, 0x30, 0xBA, 0x94, 0x5E, 0xDB, 0xC4, 0xF8},
				getBigInt("123870957791501329349587110363743896824"),
				getBigInt("393569646"),
				[]uint16{0, 5, 5, 0, 7, 2, 2, 5, 1},
				[]uint16{6, 4, 6, 9, 6, 5, 3, 9, 3},
			},
			{
				"Encrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 0, 0, 0, 23, 117, 101, 110},
				[]byte{0xD3, 0x8C, 0xB6, 0xDB, 0x52, 0xE4, 0x9B, 0x35, 0x40, 0xE4, 0xD0, 0x65, 0x7C, 0xEA, 0x91, 0xCC},
				getBigInt("281197737445981719119985453827405550028"),
				getBigInt("557820578"),
				[]uint16{6, 4, 6, 9, 6, 5, 3, 9, 3},
				[]uint16{8, 7, 5, 0, 2, 8, 7, 5, 5},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 0, 0, 0, 23, 117, 101, 110},
				[]byte{0xD3, 0x8C, 0xB6, 0xDB, 0x52, 0xE4, 0x9B, 0x35, 0x40, 0xE4, 0xD0, 0x65, 0x7C, 0xEA, 0x91, 0xCC},
				getBigInt("281197737445981719119985453827405550028"),
				getBigInt("152270550"),
				[]uint16{0, 5, 5, 0, 7, 2, 2, 5, 1},
				[]uint16{6, 4, 6, 9, 6, 5, 3, 9, 3},
			},
			{
				"Decrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 0, 0, 9, 19, 118, 214},
				[]byte{0x5D, 0x30, 0xAD, 0xBE, 0x4D, 0xD0, 0x4E, 0x47, 0xB6, 0x30, 0xBA, 0x94, 0x5E, 0xDB, 0xC4, 0xF8},
				getBigInt("123870957791501329349587110363743896824"),
				getBigInt("649672822"),
				[]uint16{2, 2, 8, 2, 7, 6, 9, 4, 6},
				[]uint16{0, 5, 5, 0, 7, 2, 2, 5, 1},
			},
			{
				"Decrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 0, 0, 0, 38, 185, 56, 118},
				[]byte{0xAA, 0x63, 0x1F, 0x98, 0x4C, 0x1A, 0x75, 0x6D, 0x80, 0x90, 0xCC, 0x0B, 0xFE, 0x44, 0x79, 0xBD},
				getBigInt("226483437493361909053404110117562251709"),
				getBigInt("590018841"),
				[]uint16{1, 4, 8, 8, 1, 0, 0, 9, 5},
				[]uint16{2, 2, 8, 2, 7, 6, 9, 4, 6},
			},
			{
				"Decrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 0, 0, 35, 42, 249, 25},
				[]byte{0xBE, 0x06, 0xB0, 0xD4, 0x65, 0xB6, 0x0C, 0xDD, 0xCF, 0xE1, 0xA7, 0xC7, 0xCF, 0x47, 0x37, 0xA7},
				getBigInt("252588059512223991786762096467566344103"),
				getBigInt("83328719"),
				[]uint16{9, 1, 7, 8, 2, 3, 3, 8, 0},
				[]uint16{1, 4, 8, 8, 1, 0, 0, 9, 5},
			},
			{
				"Decrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 0, 0, 0, 4, 247, 126, 207},
				[]byte{0x08, 0xC9, 0x96, 0x45, 0x5F, 0xCC, 0x05, 0xF9, 0x04, 0x2E, 0xF1, 0x30, 0x36, 0x45, 0x2A, 0x3E},
				getBigInt("11680523492676313576970270283491781182"),
				getBigInt("98237659"),
				[]uint16{9, 5, 6, 7, 3, 2, 8, 9, 0},
				[]uint16{9, 1, 7, 8, 2, 3, 3, 8, 0},
			},
			{
				"Decrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 0, 0, 5, 218, 252, 219},
				[]byte{0x85, 0x16, 0xAD, 0x28, 0x0E, 0x00, 0x6D, 0xC5, 0x25, 0x5B, 0xFD, 0xB9, 0xA5, 0x69, 0x45, 0x6E},
				getBigInt("176905066000602818125736927003085981038"),
				getBigInt("997347681"),
				[]uint16{1, 8, 6, 7, 4, 3, 7, 9, 9},
				[]uint16{9, 5, 6, 7, 3, 2, 8, 9, 0},
			},
			{
				"Decrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 0, 0, 0, 59, 114, 81, 97},
				[]byte{0x32, 0xBF, 0x3F, 0x1E, 0xBF, 0x7C, 0x64, 0x31, 0xA9, 0x48, 0xF5, 0x14, 0x64, 0x51, 0x69, 0x0E},
				getBigInt("67454408717137868035652652075098138894"),
				getBigInt("98765"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{1, 8, 6, 7, 4, 3, 7, 9, 9},
			},
			{
				"Decrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0x94, 0xD5, 0xDC, 0x0E, 0x76, 0xA1, 0x60, 0x10, 0x0D, 0xF7, 0x5E, 0x21, 0x5B, 0xC1, 0x4A, 0x57},
				getBigInt("197836165883056867901047745955565226583"),
				getBigInt("432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #7",
		ff3CommonKey192,
		10,
		ff3CommonTweak2,
		ff3CommonInput1,
		[]uint16{9, 6, 1, 6, 1, 0, 5, 1, 4, 4, 9, 1, 4, 2, 4, 4, 4, 6},
		9,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0x97, 0x75, 0x7B, 0xFC, 0x9F, 0xB9, 0x1E, 0x2B, 0xF4, 0xE6, 0x62, 0x2B, 0x86, 0x1B, 0x97, 0x59},
				getBigInt("201323440847280984711162106970233345881"),
				getBigInt("665466979"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{9, 7, 9, 6, 6, 4, 5, 6, 6},
			},
			{
				"Encrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 0, 0, 39, 170, 56, 99},
				[]byte{0x5D, 0x97, 0x16, 0xD7, 0x29, 0xC0, 0x24, 0xE9, 0x3E, 0x9A, 0x97, 0x42, 0xA7, 0xE3, 0x03, 0x31},
				getBigInt("124402703693623329523381064393380004657"),
				getBigInt("380103422"),
				[]uint16{9, 7, 9, 6, 6, 4, 5, 6, 6},
				[]uint16{2, 2, 4, 3, 0, 1, 0, 8, 3},
			},
			{
				"Encrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 0, 22, 167, 234, 254},
				[]byte{0x3E, 0x36, 0x48, 0xA1, 0x14, 0xEA, 0x51, 0x2D, 0x47, 0x32, 0xB5, 0x1B, 0x57, 0xCF, 0x23, 0x64},
				getBigInt("82693992864724264713941243715967198052"),
				getBigInt("632665031"),
				[]uint16{2, 2, 4, 3, 0, 1, 0, 8, 3},
				[]uint16{1, 3, 0, 5, 6, 6, 2, 3, 6},
			},
			{
				"Encrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 0, 0, 37, 181, 179, 199},
				[]byte{0x83, 0x5A, 0x1B, 0x57, 0x52, 0xDC, 0x93, 0x0B, 0x64, 0x46, 0xA2, 0xF8, 0xF7, 0x21, 0xA4, 0x9B},
				getBigInt("174596728708645980056743609325326541979"),
				getBigInt("706645401"),
				[]uint16{1, 3, 0, 5, 6, 6, 2, 3, 6},
				[]uint16{1, 0, 4, 5, 4, 6, 6, 0, 7},
			},
			{
				"Encrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 0, 0, 42, 30, 141, 153},
				[]byte{0x21, 0xEE, 0xE2, 0x99, 0xC3, 0x5B, 0x96, 0x1B, 0xDF, 0x4F, 0xEF, 0x6B, 0x2D, 0xEA, 0x7A, 0x69},
				getBigInt("45104886520173100775248438337020263017"),
				getBigInt("652928048"),
				[]uint16{1, 0, 4, 5, 4, 6, 6, 0, 7},
				[]uint16{8, 4, 0, 8, 2, 9, 2, 5, 6},
			},
			{
				"Encrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 0, 0, 38, 234, 228, 48},
				[]byte{0x10, 0xB9, 0x70, 0xAE, 0x19, 0x27, 0x1C, 0x43, 0x91, 0x54, 0x66, 0x5E, 0x21, 0xF9, 0x87, 0x9C},
				getBigInt("22230508274747890371985356286747838364"),
				getBigInt("454483765"),
				[]uint16{8, 4, 0, 8, 2, 9, 2, 5, 6},
				[]uint16{5, 6, 7, 3, 8, 4, 4, 5, 4},
			},
			{
				"Encrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 0, 0, 27, 22, 223, 53},
				[]byte{0xFA, 0x4B, 0xAD, 0x69, 0xC2, 0x49, 0x40, 0x73, 0x3D, 0x50, 0x92, 0xB1, 0xE1, 0xB3, 0xD6, 0xB9},
				getBigInt("332699938446566223882251818414762088121"),
				getBigInt("415016169"),
				[]uint16{5, 6, 7, 3, 8, 4, 4, 5, 4},
				[]uint16{9, 6, 1, 6, 1, 0, 5, 1, 4},
			},
			{
				"Encrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 0, 0, 24, 188, 164, 233},
				[]byte{0x34, 0x44, 0x69, 0x22, 0xAC, 0x4C, 0x92, 0x98, 0x4E, 0xEE, 0x6E, 0x14, 0xA4, 0x6F, 0x08, 0xCD},
				getBigInt("69475064367285894906781299751189940429"),
				getBigInt("644424194"),
				[]uint16{9, 6, 1, 6, 1, 0, 5, 1, 4},
				[]uint16{4, 9, 1, 4, 2, 4, 4, 4, 6},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 0, 0, 24, 188, 164, 233},
				[]byte{0x34, 0x44, 0x69, 0x22, 0xAC, 0x4C, 0x92, 0x98, 0x4E, 0xEE, 0x6E, 0x14, 0xA4, 0x6F, 0x08, 0xCD},
				getBigInt("69475064367285894906781299751189940429"),
				getBigInt("454483765"),
				[]uint16{5, 6, 7, 3, 8, 4, 4, 5, 4},
				[]uint16{9, 6, 1, 6, 1, 0, 5, 1, 4},
			},
			{
				"Decrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 0, 0, 27, 22, 223, 53},
				[]byte{0xFA, 0x4B, 0xAD, 0x69, 0xC2, 0x49, 0x40, 0x73, 0x3D, 0x50, 0x92, 0xB1, 0xE1, 0xB3, 0xD6, 0xB9},
				getBigInt("332699938446566223882251818414762088121"),
				getBigInt("652928048"),
				[]uint16{8, 4, 0, 8, 2, 9, 2, 5, 6},
				[]uint16{5, 6, 7, 3, 8, 4, 4, 5, 4},
			},
			{
				"Decrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 0, 0, 38, 234, 228, 48},
				[]byte{0x10, 0xB9, 0x70, 0xAE, 0x19, 0x27, 0x1C, 0x43, 0x91, 0x54, 0x66, 0x5E, 0x21, 0xF9, 0x87, 0x9C},
				getBigInt("22230508274747890371985356286747838364"),
				getBigInt("706645401"),
				[]uint16{1, 0, 4, 5, 4, 6, 6, 0, 7},
				[]uint16{8, 4, 0, 8, 2, 9, 2, 5, 6},
			},
			{
				"Decrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 0, 0, 42, 30, 141, 153},
				[]byte{0x21, 0xEE, 0xE2, 0x99, 0xC3, 0x5B, 0x96, 0x1B, 0xDF, 0x4F, 0xEF, 0x6B, 0x2D, 0xEA, 0x7A, 0x69},
				getBigInt("45104886520173100775248438337020263017"),
				getBigInt("632665031"),
				[]uint16{1, 3, 0, 5, 6, 6, 2, 3, 6},
				[]uint16{1, 0, 4, 5, 4, 6, 6, 0, 7},
			},
			{
				"Decrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 0, 0, 37, 181, 179, 199},
				[]byte{0x83, 0x5A, 0x1B, 0x57, 0x52, 0xDC, 0x93, 0x0B, 0x64, 0x46, 0xA2, 0xF8, 0xF7, 0x21, 0xA4, 0x9B},
				getBigInt("174596728708645980056743609325326541979"),
				getBigInt("380103422"),
				[]uint16{2, 2, 4, 3, 0, 1, 0, 8, 3},
				[]uint16{1, 3, 0, 5, 6, 6, 2, 3, 6},
			},
			{
				"Decrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 0, 22, 167, 234, 254},
				[]byte{0x3E, 0x36, 0x48, 0xA1, 0x14, 0xEA, 0x51, 0x2D, 0x47, 0x32, 0xB5, 0x1B, 0x57, 0xCF, 0x23, 0x64},
				getBigInt("82693992864724264713941243715967198052"),
				getBigInt("665466979"),
				[]uint16{9, 7, 9, 6, 6, 4, 5, 6, 6},
				[]uint16{2, 2, 4, 3, 0, 1, 0, 8, 3},
			},
			{
				"Decrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 0, 0, 39, 170, 56, 99},
				[]byte{0x5D, 0x97, 0x16, 0xD7, 0x29, 0xC0, 0x24, 0xE9, 0x3E, 0x9A, 0x97, 0x42, 0xA7, 0xE3, 0x03, 0x31},
				getBigInt("124402703693623329523381064393380004657"),
				getBigInt("98765"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{9, 7, 9, 6, 6, 4, 5, 6, 6},
			},
			{
				"Decrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0x97, 0x75, 0x7B, 0xFC, 0x9F, 0xB9, 0x1E, 0x2B, 0xF4, 0xE6, 0x62, 0x2B, 0x86, 0x1B, 0x97, 0x59},
				getBigInt("201323440847280984711162106970233345881"),
				getBigInt("432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #8",
		ff3CommonKey192,
		10,
		ff3CommonTweak1,
		ff3CommonInput2,
		[]uint16{5, 3, 0, 4, 8, 8, 8, 4, 0, 6, 5, 3, 5, 0, 2, 0, 4, 5, 4, 1, 7, 8, 6, 3, 8, 0, 8, 0, 7},
		15,
		14,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x65, 0x59, 0x16, 0xC8, 0x41, 0xE0, 0x75, 0x4A, 0x0E, 0x3D, 0x14, 0x7C, 0x68, 0x9E, 0x57, 0x7A},
				getBigInt("134714604073717764916785235229849573242"),
				getBigInt("333995281694340"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{0, 4, 3, 4, 9, 6, 1, 8, 2, 5, 9, 9, 3, 3, 3},
			},
			{
				"Encrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 1, 47, 196, 86, 31, 62, 132},
				[]byte{0xCA, 0xB0, 0x85, 0x62, 0x83, 0x45, 0xFD, 0x45, 0x47, 0xA9, 0xF6, 0xB0, 0xD0, 0x63, 0x8D, 0xBA},
				getBigInt("269420604761119496264120912891527531962"),
				getBigInt("12891626231962"),
				[]uint16{0, 4, 3, 4, 9, 6, 1, 8, 2, 5, 9, 9, 3, 3, 3},
				[]uint16{2, 6, 9, 1, 3, 2, 6, 2, 6, 1, 9, 8, 2, 1},
			},
			{
				"Encrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 11, 185, 144, 205, 88, 154},
				[]byte{0x80, 0xF6, 0x14, 0x79, 0x77, 0xAA, 0x96, 0x3A, 0x9B, 0x24, 0x2B, 0x3D, 0x19, 0xE2, 0x2E, 0x86},
				getBigInt("171418903759503479581836378153068670598"),
				getBigInt("712148350364938"),
				[]uint16{2, 6, 9, 1, 3, 2, 6, 2, 6, 1, 9, 8, 2, 1},
				[]uint16{8, 3, 9, 4, 6, 3, 0, 5, 3, 8, 4, 1, 2, 1, 7},
			},
			{
				"Encrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 2, 135, 177, 245, 115, 109, 10},
				[]byte{0x71, 0x2F, 0x89, 0xC4, 0x9B, 0x31, 0xE5, 0x20, 0x46, 0xD6, 0x58, 0x91, 0x5A, 0xB5, 0x71, 0xFD},
				getBigInt("150449595742912679516123734845540364797"),
				getBigInt("47737166596759"),
				[]uint16{8, 3, 9, 4, 6, 3, 0, 5, 3, 8, 4, 1, 2, 1, 7},
				[]uint16{9, 5, 7, 6, 9, 5, 6, 6, 1, 7, 3, 7, 7, 4},
			},
			{
				"Encrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 43, 106, 172, 219, 138, 151},
				[]byte{0x84, 0xF0, 0x2D, 0x40, 0xF2, 0xBD, 0xB6, 0x92, 0x89, 0xD3, 0xF2, 0x8B, 0xC1, 0x5E, 0x5F, 0x1B},
				getBigInt("176705164543816540622765271556919549723"),
				getBigInt("983705269914661"),
				[]uint16{9, 5, 7, 6, 9, 5, 6, 6, 1, 7, 3, 7, 7, 4},
				[]uint16{1, 6, 6, 4, 1, 9, 9, 6, 2, 5, 0, 7, 3, 8, 9},
			},
			{
				"Encrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 3, 126, 172, 187, 45, 76, 37},
				[]byte{0x68, 0xF5, 0x2A, 0x89, 0xC2, 0x78, 0xD6, 0x2B, 0x3A, 0x8F, 0xE4, 0x58, 0xEA, 0xE1, 0x96, 0xFF},
				getBigInt("139512687067620075762909832523467036415"),
				getBigInt("80260633633174"),
				[]uint16{1, 6, 6, 4, 1, 9, 9, 6, 2, 5, 0, 7, 3, 8, 9},
				[]uint16{4, 7, 1, 3, 3, 6, 3, 3, 6, 0, 6, 2, 0, 8},
			},
			{
				"Encrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 72, 255, 34, 142, 161, 150},
				[]byte{0xC4, 0xD2, 0xC5, 0x0C, 0x64, 0x0D, 0x2A, 0x8C, 0x54, 0x68, 0x05, 0x2B, 0x1C, 0x37, 0x55, 0x1E},
				getBigInt("261623066130530112387191221650778969374"),
				getBigInt("205356048884035"),
				[]uint16{4, 7, 1, 3, 3, 6, 3, 3, 6, 0, 6, 2, 0, 8},
				[]uint16{5, 3, 0, 4, 8, 8, 8, 4, 0, 6, 5, 3, 5, 0, 2},
			},
			{
				"Encrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 0, 186, 197, 46, 88, 161, 67},
				[]byte{0x00, 0xA4, 0x2B, 0xCE, 0x76, 0x44, 0x0F, 0x12, 0x85, 0xD5, 0xE4, 0xEC, 0xDB, 0x7C, 0xF1, 0x96},
				getBigInt("852425186015655983195790547735081366"),
				getBigInt("70808368714540"),
				[]uint16{5, 3, 0, 4, 8, 8, 8, 4, 0, 6, 5, 3, 5, 0, 2},
				[]uint16{0, 4, 5, 4, 1, 7, 8, 6, 3, 8, 0, 8, 0, 7},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 0, 186, 197, 46, 88, 161, 67},
				[]byte{0x00, 0xA4, 0x2B, 0xCE, 0x76, 0x44, 0x0F, 0x12, 0x85, 0xD5, 0xE4, 0xEC, 0xDB, 0x7C, 0xF1, 0x96},
				getBigInt("852425186015655983195790547735081366"),
				getBigInt("80260633633174"),
				[]uint16{4, 7, 1, 3, 3, 6, 3, 3, 6, 0, 6, 2, 0, 8},
				[]uint16{5, 3, 0, 4, 8, 8, 8, 4, 0, 6, 5, 3, 5, 0, 2},
			},
			{
				"Decrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 72, 255, 34, 142, 161, 150},
				[]byte{0xC4, 0xD2, 0xC5, 0x0C, 0x64, 0x0D, 0x2A, 0x8C, 0x54, 0x68, 0x05, 0x2B, 0x1C, 0x37, 0x55, 0x1E},
				getBigInt("261623066130530112387191221650778969374"),
				getBigInt("983705269914661"),
				[]uint16{1, 6, 6, 4, 1, 9, 9, 6, 2, 5, 0, 7, 3, 8, 9},
				[]uint16{4, 7, 1, 3, 3, 6, 3, 3, 6, 0, 6, 2, 0, 8},
			},
			{
				"Decrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 3, 126, 172, 187, 45, 76, 37},
				[]byte{0x68, 0xF5, 0x2A, 0x89, 0xC2, 0x78, 0xD6, 0x2B, 0x3A, 0x8F, 0xE4, 0x58, 0xEA, 0xE1, 0x96, 0xFF},
				getBigInt("139512687067620075762909832523467036415"),
				getBigInt("47737166596759"),
				[]uint16{9, 5, 7, 6, 9, 5, 6, 6, 1, 7, 3, 7, 7, 4},
				[]uint16{1, 6, 6, 4, 1, 9, 9, 6, 2, 5, 0, 7, 3, 8, 9},
			},
			{
				"Decrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 43, 106, 172, 219, 138, 151},
				[]byte{0x84, 0xF0, 0x2D, 0x40, 0xF2, 0xBD, 0xB6, 0x92, 0x89, 0xD3, 0xF2, 0x8B, 0xC1, 0x5E, 0x5F, 0x1B},
				getBigInt("176705164543816540622765271556919549723"),
				getBigInt("712148350364938"),
				[]uint16{8, 3, 9, 4, 6, 3, 0, 5, 3, 8, 4, 1, 2, 1, 7},
				[]uint16{9, 5, 7, 6, 9, 5, 6, 6, 1, 7, 3, 7, 7, 4},
			},
			{
				"Decrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 2, 135, 177, 245, 115, 109, 10},
				[]byte{0x71, 0x2F, 0x89, 0xC4, 0x9B, 0x31, 0xE5, 0x20, 0x46, 0xD6, 0x58, 0x91, 0x5A, 0xB5, 0x71, 0xFD},
				getBigInt("150449595742912679516123734845540364797"),
				getBigInt("12891626231962"),
				[]uint16{2, 6, 9, 1, 3, 2, 6, 2, 6, 1, 9, 8, 2, 1},
				[]uint16{8, 3, 9, 4, 6, 3, 0, 5, 3, 8, 4, 1, 2, 1, 7},
			},
			{
				"Decrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 11, 185, 144, 205, 88, 154},
				[]byte{0x80, 0xF6, 0x14, 0x79, 0x77, 0xAA, 0x96, 0x3A, 0x9B, 0x24, 0x2B, 0x3D, 0x19, 0xE2, 0x2E, 0x86},
				getBigInt("171418903759503479581836378153068670598"),
				getBigInt("333995281694340"),
				[]uint16{0, 4, 3, 4, 9, 6, 1, 8, 2, 5, 9, 9, 3, 3, 3},
				[]uint16{2, 6, 9, 1, 3, 2, 6, 2, 6, 1, 9, 8, 2, 1},
			},
			{
				"Decrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 1, 47, 196, 86, 31, 62, 132},
				[]byte{0xCA, 0xB0, 0x85, 0x62, 0x83, 0x45, 0xFD, 0x45, 0x47, 0xA9, 0xF6, 0xB0, 0xD0, 0x63, 0x8D, 0xBA},
				getBigInt("269420604761119496264120912891527531962"),
				getBigInt("98700000"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{0, 4, 3, 4, 9, 6, 1, 8, 2, 5, 9, 9, 3, 3, 3},
			},
			{
				"Decrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x65, 0x59, 0x16, 0xC8, 0x41, 0xE0, 0x75, 0x4A, 0x0E, 0x3D, 0x14, 0x7C, 0x68, 0x9E, 0x57, 0x7A},
				getBigInt("134714604073717764916785235229849573242"),
				getBigInt("98765432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #9",
		ff3CommonKey192,
		10,
		ff3CommonTweak3,
		ff3CommonInput2,
		[]uint16{9, 8, 0, 8, 3, 8, 0, 2, 6, 7, 8, 8, 2, 0, 3, 8, 9, 2, 9, 5, 0, 4, 1, 4, 8, 3, 5, 1, 2},
		15,
		14,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x7A, 0x65, 0xD5, 0x38, 0x5F, 0xD5, 0x3E, 0xED, 0xC5, 0x9A, 0xFC, 0xB9, 0xB8, 0x65, 0x35, 0x9D},
				getBigInt("162694562088153306994794199463150040477"),
				getBigInt("298228582161575"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{5, 7, 5, 1, 6, 1, 2, 8, 5, 8, 2, 2, 8, 9, 2},
			},
			{
				"Encrypt: round #1",
				[]byte{0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 15, 60, 192, 179, 156, 167},
				[]byte{0x1D, 0x15, 0x62, 0xCC, 0x8B, 0x1B, 0xF8, 0x38, 0xA0, 0x6F, 0x99, 0x91, 0x48, 0x4F, 0xDF, 0x97},
				getBigInt("38658653993530332021798568042590887831"),
				getBigInt("68042689587831"),
				[]uint16{5, 7, 5, 1, 6, 1, 2, 8, 5, 8, 2, 2, 8, 9, 2},
				[]uint16{1, 3, 8, 7, 8, 5, 9, 8, 6, 2, 4, 0, 8, 6},
			},
			{
				"Encrypt: round #2",
				[]byte{0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 61, 226, 108, 87, 170, 119},
				[]byte{0xE1, 0x7C, 0x42, 0xFE, 0xC0, 0xF6, 0x27, 0x35, 0xE4, 0x86, 0xF5, 0x48, 0xB5, 0xFA, 0x10, 0xA3},
				getBigInt("299721502684770212466444937961720647843"),
				getBigInt("236190302809418"),
				[]uint16{1, 3, 8, 7, 8, 5, 9, 8, 6, 2, 4, 0, 8, 6},
				[]uint16{8, 1, 4, 9, 0, 8, 2, 0, 3, 0, 9, 1, 6, 3, 2},
			},
			{
				"Encrypt: round #3",
				[]byte{0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 214, 208, 87, 25, 45, 74},
				[]byte{0xA4, 0x09, 0xA8, 0xFC, 0xD7, 0xFA, 0x9A, 0x25, 0x8D, 0xF7, 0x3B, 0x9F, 0x84, 0xE4, 0x8D, 0x02},
				getBigInt("218043549457605620183815879421262597378"),
				getBigInt("47463952185209"),
				[]uint16{8, 1, 4, 9, 0, 8, 2, 0, 3, 0, 9, 1, 6, 3, 2},
				[]uint16{9, 0, 2, 5, 8, 1, 2, 5, 9, 3, 6, 4, 7, 4},
			},
			{
				"Encrypt: round #4",
				[]byte{0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 43, 43, 16, 2, 119, 121},
				[]byte{0xA1, 0x10, 0x53, 0x0F, 0xFB, 0xB7, 0xC1, 0xE9, 0x13, 0xC2, 0x08, 0x0F, 0xA1, 0xEF, 0x1B, 0xA8},
				getBigInt("214090468777430440188573037871598869416"),
				getBigInt("274061901678834"),
				[]uint16{9, 0, 2, 5, 8, 1, 2, 5, 9, 3, 6, 4, 7, 4},
				[]uint16{4, 3, 8, 8, 7, 6, 1, 0, 9, 1, 6, 0, 4, 7, 2},
			},
			{
				"Encrypt: round #5",
				[]byte{0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 249, 66, 2, 75, 200, 242},
				[]byte{0x3F, 0xE5, 0x3C, 0x0C, 0xC8, 0x3F, 0x7E, 0xBC, 0x87, 0x85, 0xA8, 0x41, 0xEF, 0xD0, 0x70, 0x05},
				getBigInt("84931617672342107578105675598485549061"),
				getBigInt("23062437734270"),
				[]uint16{4, 3, 8, 8, 7, 6, 1, 0, 9, 1, 6, 0, 4, 7, 2},
				[]uint16{0, 7, 2, 4, 3, 7, 7, 3, 4, 2, 6, 0, 3, 2},
			},
			{
				"Encrypt: round #6",
				[]byte{0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 20, 249, 164, 104, 167, 126},
				[]byte{0xAF, 0x61, 0xD6, 0x17, 0x5D, 0xC9, 0xEA, 0xB9, 0x83, 0x47, 0x23, 0xAF, 0xE4, 0x42, 0x39, 0xD7},
				getBigInt("233122894344567283782676028825719159255"),
				getBigInt("302887620838089"),
				[]uint16{0, 7, 2, 4, 3, 7, 7, 3, 4, 2, 6, 0, 3, 2},
				[]uint16{9, 8, 0, 8, 3, 8, 0, 2, 6, 7, 8, 8, 2, 0, 3},
			},
			{
				"Encrypt: round #7",
				[]byte{0, 0, 0, 7, 0, 0, 0, 0, 0, 1, 19, 121, 133, 12, 2, 201},
				[]byte{0xDC, 0x13, 0xED, 0xFB, 0xAB, 0xCC, 0xA2, 0xB5, 0x3F, 0x6B, 0xC3, 0x4C, 0x14, 0x97, 0xF7, 0xA4},
				getBigInt("292533639583507836203471098475976325028"),
				getBigInt("21538414059298"),
				[]uint16{9, 8, 0, 8, 3, 8, 0, 2, 6, 7, 8, 8, 2, 0, 3},
				[]uint16{8, 9, 2, 9, 5, 0, 4, 1, 4, 8, 3, 5, 1, 2},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{0, 0, 0, 7, 0, 0, 0, 0, 0, 1, 19, 121, 133, 12, 2, 201},
				[]byte{0xDC, 0x13, 0xED, 0xFB, 0xAB, 0xCC, 0xA2, 0xB5, 0x3F, 0x6B, 0xC3, 0x4C, 0x14, 0x97, 0xF7, 0xA4},
				getBigInt("292533639583507836203471098475976325028"),
				getBigInt("23062437734270"),
				[]uint16{0, 7, 2, 4, 3, 7, 7, 3, 4, 2, 6, 0, 3, 2},
				[]uint16{9, 8, 0, 8, 3, 8, 0, 2, 6, 7, 8, 8, 2, 0, 3},
			},
			{
				"Decrypt: round #6",
				[]byte{0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 20, 249, 164, 104, 167, 126},
				[]byte{0xAF, 0x61, 0xD6, 0x17, 0x5D, 0xC9, 0xEA, 0xB9, 0x83, 0x47, 0x23, 0xAF, 0xE4, 0x42, 0x39, 0xD7},
				getBigInt("233122894344567283782676028825719159255"),
				getBigInt("274061901678834"),
				[]uint16{4, 3, 8, 8, 7, 6, 1, 0, 9, 1, 6, 0, 4, 7, 2},
				[]uint16{0, 7, 2, 4, 3, 7, 7, 3, 4, 2, 6, 0, 3, 2},
			},
			{
				"Decrypt: round #5",
				[]byte{0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 249, 66, 2, 75, 200, 242},
				[]byte{0x3F, 0xE5, 0x3C, 0x0C, 0xC8, 0x3F, 0x7E, 0xBC, 0x87, 0x85, 0xA8, 0x41, 0xEF, 0xD0, 0x70, 0x05},
				getBigInt("84931617672342107578105675598485549061"),
				getBigInt("47463952185209"),
				[]uint16{9, 0, 2, 5, 8, 1, 2, 5, 9, 3, 6, 4, 7, 4},
				[]uint16{4, 3, 8, 8, 7, 6, 1, 0, 9, 1, 6, 0, 4, 7, 2},
			},
			{
				"Decrypt: round #4",
				[]byte{0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 43, 43, 16, 2, 119, 121},
				[]byte{0xA1, 0x10, 0x53, 0x0F, 0xFB, 0xB7, 0xC1, 0xE9, 0x13, 0xC2, 0x08, 0x0F, 0xA1, 0xEF, 0x1B, 0xA8},
				getBigInt("214090468777430440188573037871598869416"),
				getBigInt("236190302809418"),
				[]uint16{8, 1, 4, 9, 0, 8, 2, 0, 3, 0, 9, 1, 6, 3, 2},
				[]uint16{9, 0, 2, 5, 8, 1, 2, 5, 9, 3, 6, 4, 7, 4},
			},
			{
				"Decrypt: round #3",
				[]byte{0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 214, 208, 87, 25, 45, 74},
				[]byte{0xA4, 0x09, 0xA8, 0xFC, 0xD7, 0xFA, 0x9A, 0x25, 0x8D, 0xF7, 0x3B, 0x9F, 0x84, 0xE4, 0x8D, 0x02},
				getBigInt("218043549457605620183815879421262597378"),
				getBigInt("68042689587831"),
				[]uint16{1, 3, 8, 7, 8, 5, 9, 8, 6, 2, 4, 0, 8, 6},
				[]uint16{8, 1, 4, 9, 0, 8, 2, 0, 3, 0, 9, 1, 6, 3, 2},
			},
			{
				"Decrypt: round #2",
				[]byte{0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 61, 226, 108, 87, 170, 119},
				[]byte{0xE1, 0x7C, 0x42, 0xFE, 0xC0, 0xF6, 0x27, 0x35, 0xE4, 0x86, 0xF5, 0x48, 0xB5, 0xFA, 0x10, 0xA3},
				getBigInt("299721502684770212466444937961720647843"),
				getBigInt("298228582161575"),
				[]uint16{5, 7, 5, 1, 6, 1, 2, 8, 5, 8, 2, 2, 8, 9, 2},
				[]uint16{1, 3, 8, 7, 8, 5, 9, 8, 6, 2, 4, 0, 8, 6},
			},
			{
				"Decrypt: round #1",
				[]byte{0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 15, 60, 192, 179, 156, 167},
				[]byte{0x1D, 0x15, 0x62, 0xCC, 0x8B, 0x1B, 0xF8, 0x38, 0xA0, 0x6F, 0x99, 0x91, 0x48, 0x4F, 0xDF, 0x97},
				getBigInt("38658653993530332021798568042590887831"),
				getBigInt("98700000"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{5, 7, 5, 1, 6, 1, 2, 8, 5, 8, 2, 2, 8, 9, 2},
			},
			{
				"Decrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x7A, 0x65, 0xD5, 0x38, 0x5F, 0xD5, 0x3E, 0xED, 0xC5, 0x9A, 0xFC, 0xB9, 0xB8, 0x65, 0x35, 0x9D},
				getBigInt("162694562088153306994794199463150040477"),
				getBigInt("98765432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #10",
		ff3CommonKey192,
		26,
		ff3CommonTweak2,
		ff3CommonInput3,
		[]uint16{18, 0, 18, 17, 14, 2, 19, 15, 19, 7, 10, 9, 24, 25, 15, 9, 25, 8, 8},
		10,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 3, 140, 43, 56, 187, 32},
				[]byte{0xD6, 0xF4, 0xC1, 0x36, 0x4D, 0x09, 0xB1, 0x85, 0x09, 0xB4, 0x00, 0x12, 0x35, 0xF8, 0xE2, 0x86},
				getBigInt("285725630338670839687045919480512832134"),
				getBigInt("99773762621760"),
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{6, 25, 8, 24, 5, 12, 8, 20, 9, 18},
			},
			{
				"Encrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 90, 190, 99, 173, 209, 64},
				[]byte{0x26, 0x9A, 0xFE, 0xEF, 0xCF, 0x07, 0x47, 0x60, 0xA8, 0x20, 0x43, 0xF4, 0xD0, 0x71, 0xD5, 0xE2},
				getBigInt("51315448287683531643380936351738353122"),
				getBigInt("3967624097538"),
				[]uint16{6, 25, 8, 24, 5, 12, 8, 20, 9, 18},
				[]uint16{10, 12, 0, 20, 10, 18, 25, 25, 18},
			},
			{
				"Encrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 3, 155, 200, 211, 47, 2},
				[]byte{0xFE, 0xAB, 0x0C, 0xDE, 0x03, 0x8E, 0x92, 0xBD, 0xBF, 0xF5, 0x17, 0x4C, 0xAF, 0x74, 0x4E, 0x68},
				getBigInt("338512054670846224690396170214232575592"),
				getBigInt("129674850110376"),
				[]uint16{10, 12, 0, 20, 10, 18, 25, 25, 18},
				[]uint16{12, 18, 20, 17, 7, 3, 4, 25, 22, 23},
			},
			{
				"Encrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 117, 240, 71, 96, 139, 168},
				[]byte{0xFD, 0xB9, 0x89, 0x25, 0x97, 0x1B, 0x8A, 0xD3, 0x69, 0xE5, 0x15, 0x75, 0x4C, 0xBA, 0x38, 0x2E},
				getBigInt("337258039520735905329190764472490932270"),
				getBigInt("5149084232496"),
				[]uint16{12, 18, 20, 17, 7, 3, 4, 25, 22, 23},
				[]uint16{22, 15, 13, 12, 10, 6, 2, 17, 24},
			},
			{
				"Encrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 4, 174, 221, 86, 43, 48},
				[]byte{0x11, 0x6F, 0x69, 0x04, 0x03, 0x15, 0xBD, 0x0A, 0x8F, 0xC8, 0xC0, 0xD2, 0xE0, 0xA1, 0xB6, 0x03},
				getBigInt("23175350850516704382352858426464384515"),
				getBigInt("28000220519851"),
				[]uint16{22, 15, 13, 12, 10, 6, 2, 17, 24},
				[]uint16{21, 25, 9, 25, 24, 7, 4, 2, 4, 5},
			},
			{
				"Encrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 25, 119, 79, 50, 157, 171},
				[]byte{0x23, 0x87, 0x82, 0x99, 0x90, 0x9B, 0x32, 0xE3, 0x63, 0x10, 0x24, 0x46, 0x22, 0x9A, 0xC9, 0x31},
				getBigInt("47226588808285061910270879994954303793"),
				getBigInt("713197414497"),
				[]uint16{21, 25, 9, 25, 24, 7, 4, 2, 4, 5},
				[]uint16{9, 2, 23, 25, 12, 18, 20, 10, 3},
			},
			{
				"Encrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 0, 166, 13, 224, 232, 97},
				[]byte{0x4F, 0x62, 0xAC, 0x9A, 0x18, 0x5C, 0x05, 0xC6, 0x24, 0x32, 0x03, 0xF0, 0xF4, 0x97, 0xFC, 0x77},
				getBigInt("105521357542272511029030374679216913527"),
				getBigInt("42100617003554"),
				[]uint16{9, 2, 23, 25, 12, 18, 20, 10, 3},
				[]uint16{18, 0, 18, 17, 14, 2, 19, 15, 19, 7},
			},
			{
				"Encrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 38, 74, 80, 82, 66, 34},
				[]byte{0x84, 0x4F, 0xE5, 0x30, 0x13, 0xF2, 0x5D, 0x51, 0x34, 0x5B, 0xED, 0x61, 0x8D, 0x41, 0xD1, 0x2B},
				getBigInt("175872935376357399436166073107286708523"),
				getBigInt("1742708135308"),
				[]uint16{18, 0, 18, 17, 14, 2, 19, 15, 19, 7},
				[]uint16{10, 9, 24, 25, 15, 9, 25, 8, 8},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 38, 74, 80, 82, 66, 34},
				[]byte{0x84, 0x4F, 0xE5, 0x30, 0x13, 0xF2, 0x5D, 0x51, 0x34, 0x5B, 0xED, 0x61, 0x8D, 0x41, 0xD1, 0x2B},
				getBigInt("175872935376357399436166073107286708523"),
				getBigInt("713197414497"),
				[]uint16{9, 2, 23, 25, 12, 18, 20, 10, 3},
				[]uint16{18, 0, 18, 17, 14, 2, 19, 15, 19, 7},
			},
			{
				"Decrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 0, 166, 13, 224, 232, 97},
				[]byte{0x4F, 0x62, 0xAC, 0x9A, 0x18, 0x5C, 0x05, 0xC6, 0x24, 0x32, 0x03, 0xF0, 0xF4, 0x97, 0xFC, 0x77},
				getBigInt("105521357542272511029030374679216913527"),
				getBigInt("28000220519851"),
				[]uint16{21, 25, 9, 25, 24, 7, 4, 2, 4, 5},
				[]uint16{9, 2, 23, 25, 12, 18, 20, 10, 3},
			},
			{
				"Decrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 25, 119, 79, 50, 157, 171},
				[]byte{0x23, 0x87, 0x82, 0x99, 0x90, 0x9B, 0x32, 0xE3, 0x63, 0x10, 0x24, 0x46, 0x22, 0x9A, 0xC9, 0x31},
				getBigInt("47226588808285061910270879994954303793"),
				getBigInt("5149084232496"),
				[]uint16{22, 15, 13, 12, 10, 6, 2, 17, 24},
				[]uint16{21, 25, 9, 25, 24, 7, 4, 2, 4, 5},
			},
			{
				"Decrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 4, 174, 221, 86, 43, 48},
				[]byte{0x11, 0x6F, 0x69, 0x04, 0x03, 0x15, 0xBD, 0x0A, 0x8F, 0xC8, 0xC0, 0xD2, 0xE0, 0xA1, 0xB6, 0x03},
				getBigInt("23175350850516704382352858426464384515"),
				getBigInt("129674850110376"),
				[]uint16{12, 18, 20, 17, 7, 3, 4, 25, 22, 23},
				[]uint16{22, 15, 13, 12, 10, 6, 2, 17, 24},
			},
			{
				"Decrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 117, 240, 71, 96, 139, 168},
				[]byte{0xFD, 0xB9, 0x89, 0x25, 0x97, 0x1B, 0x8A, 0xD3, 0x69, 0xE5, 0x15, 0x75, 0x4C, 0xBA, 0x38, 0x2E},
				getBigInt("337258039520735905329190764472490932270"),
				getBigInt("3967624097538"),
				[]uint16{10, 12, 0, 20, 10, 18, 25, 25, 18},
				[]uint16{12, 18, 20, 17, 7, 3, 4, 25, 22, 23},
			},
			{
				"Decrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 3, 155, 200, 211, 47, 2},
				[]byte{0xFE, 0xAB, 0x0C, 0xDE, 0x03, 0x8E, 0x92, 0xBD, 0xBF, 0xF5, 0x17, 0x4C, 0xAF, 0x74, 0x4E, 0x68},
				getBigInt("338512054670846224690396170214232575592"),
				getBigInt("99773762621760"),
				[]uint16{6, 25, 8, 24, 5, 12, 8, 20, 9, 18},
				[]uint16{10, 12, 0, 20, 10, 18, 25, 25, 18},
			},
			{
				"Decrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 90, 190, 99, 173, 209, 64},
				[]byte{0x26, 0x9A, 0xFE, 0xEF, 0xCF, 0x07, 0x47, 0x60, 0xA8, 0x20, 0x43, 0xF4, 0xD0, 0x71, 0xD5, 0xE2},
				getBigInt("51315448287683531643380936351738353122"),
				getBigInt("3900555442976"),
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{6, 25, 8, 24, 5, 12, 8, 20, 9, 18},
			},
			{
				"Decrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 3, 140, 43, 56, 187, 32},
				[]byte{0xD6, 0xF4, 0xC1, 0x36, 0x4D, 0x09, 0xB1, 0x85, 0x09, 0xB4, 0x00, 0x12, 0x35, 0xF8, 0xE2, 0x86},
				getBigInt("285725630338670839687045919480512832134"),
				getBigInt("50594287082170"),
				[]uint16{0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
			},
		},
	},
	{
		"Sample #11",
		ff3CommonKey256,
		10,
		ff3CommonTweak1,
		ff3CommonInput1,
		[]uint16{9, 2, 2, 0, 1, 1, 2, 0, 5, 5, 6, 2, 7, 7, 7, 4, 9, 5},
		9,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0xCB, 0xE8, 0xC6, 0xFF, 0xFC, 0x3F, 0x05, 0x06, 0xF9, 0xBB, 0xCE, 0xFE, 0xB3, 0x46, 0x87, 0x53},
				getBigInt("271041932213867374919564698371299379027"),
				getBigInt("731500125"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{5, 2, 1, 0, 0, 5, 1, 3, 7},
			},
			{
				"Encrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 0, 0, 0, 43, 153, 206, 93},
				[]byte{0x71, 0x49, 0x55, 0xEA, 0x63, 0x12, 0x2B, 0x04, 0xF8, 0xA4, 0xE2, 0xCD, 0x1B, 0xD1, 0xB8, 0x58},
				getBigInt("150583543769235854575382615855985703000"),
				getBigInt("985801765"),
				[]uint16{5, 2, 1, 0, 0, 5, 1, 3, 7},
				[]uint16{5, 6, 7, 1, 0, 8, 5, 8, 9},
			},
			{
				"Encrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 0, 0, 58, 194, 36, 37},
				[]byte{0xDE, 0xAC, 0x36, 0x69, 0x0A, 0xF7, 0x6E, 0x4A, 0x2E, 0xF8, 0xA2, 0x7D, 0x22, 0x43, 0x4C, 0xDE},
				getBigInt("295982793696388950929125828211725520094"),
				getBigInt("457020219"),
				[]uint16{5, 6, 7, 1, 0, 8, 5, 8, 9},
				[]uint16{9, 1, 2, 0, 2, 0, 7, 5, 4},
			},
			{
				"Encrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 0, 0, 0, 27, 61, 147, 59},
				[]byte{0x7C, 0x87, 0x9C, 0xE9, 0x91, 0x8C, 0x97, 0x18, 0x95, 0xCE, 0x0E, 0x6A, 0x93, 0x70, 0x2D, 0x05},
				getBigInt("165528414114337095023796922888913693957"),
				getBigInt("899495722"),
				[]uint16{9, 1, 2, 0, 2, 0, 7, 5, 4},
				[]uint16{2, 2, 7, 5, 9, 4, 9, 9, 8},
			},
			{
				"Encrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 0, 0, 53, 157, 55, 42},
				[]byte{0xEE, 0xF1, 0x88, 0x5A, 0xCE, 0xFA, 0x7E, 0x1D, 0x7B, 0xA6, 0xD2, 0x3B, 0xCF, 0xE2, 0x78, 0x32},
				getBigInt("317610372142014333160693171438181578802"),
				getBigInt("638599021"),
				[]uint16{2, 2, 7, 5, 9, 4, 9, 9, 8},
				[]uint16{1, 2, 0, 9, 9, 5, 8, 3, 6},
			},
			{
				"Encrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 0, 0, 0, 38, 16, 63, 109},
				[]byte{0x7E, 0xBC, 0x06, 0x3A, 0x12, 0x96, 0xE0, 0xEA, 0xC3, 0xA4, 0x1B, 0x6B, 0xCF, 0xB4, 0x4E, 0x7D},
				getBigInt("168459005573748126507851651559525207677"),
				getBigInt("424703399"),
				[]uint16{1, 2, 0, 9, 9, 5, 8, 3, 6},
				[]uint16{9, 9, 3, 3, 0, 7, 4, 2, 4},
			},
			{
				"Encrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 0, 0, 25, 80, 117, 167},
				[]byte{0xC6, 0x54, 0x84, 0x2D, 0x93, 0x05, 0x3F, 0x21, 0x3C, 0x55, 0x55, 0x5D, 0x50, 0xE0, 0x1A, 0xA8},
				getBigInt("263625976990365902713155760716863511208"),
				getBigInt("502110229"),
				[]uint16{9, 9, 3, 3, 0, 7, 4, 2, 4},
				[]uint16{9, 2, 2, 0, 1, 1, 2, 0, 5},
			},
			{
				"Encrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 0, 0, 0, 29, 237, 152, 21},
				[]byte{0x64, 0x71, 0xE9, 0xE4, 0xD9, 0x28, 0x44, 0x6B, 0x1E, 0x48, 0x87, 0xDB, 0xF8, 0xB3, 0xF7, 0x0A},
				getBigInt("133514273056171654164803462652170073866"),
				getBigInt("594777265"),
				[]uint16{9, 2, 2, 0, 1, 1, 2, 0, 5},
				[]uint16{5, 6, 2, 7, 7, 7, 4, 9, 5},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 0, 0, 0, 29, 237, 152, 21},
				[]byte{0x64, 0x71, 0xE9, 0xE4, 0xD9, 0x28, 0x44, 0x6B, 0x1E, 0x48, 0x87, 0xDB, 0xF8, 0xB3, 0xF7, 0x0A},
				getBigInt("133514273056171654164803462652170073866"),
				getBigInt("424703399"),
				[]uint16{9, 9, 3, 3, 0, 7, 4, 2, 4},
				[]uint16{9, 2, 2, 0, 1, 1, 2, 0, 5},
			},
			{
				"Decrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 0, 0, 25, 80, 117, 167},
				[]byte{0xC6, 0x54, 0x84, 0x2D, 0x93, 0x05, 0x3F, 0x21, 0x3C, 0x55, 0x55, 0x5D, 0x50, 0xE0, 0x1A, 0xA8},
				getBigInt("263625976990365902713155760716863511208"),
				getBigInt("638599021"),
				[]uint16{1, 2, 0, 9, 9, 5, 8, 3, 6},
				[]uint16{9, 9, 3, 3, 0, 7, 4, 2, 4},
			},
			{
				"Decrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 0, 0, 0, 38, 16, 63, 109},
				[]byte{0x7E, 0xBC, 0x06, 0x3A, 0x12, 0x96, 0xE0, 0xEA, 0xC3, 0xA4, 0x1B, 0x6B, 0xCF, 0xB4, 0x4E, 0x7D},
				getBigInt("168459005573748126507851651559525207677"),
				getBigInt("899495722"),
				[]uint16{2, 2, 7, 5, 9, 4, 9, 9, 8},
				[]uint16{1, 2, 0, 9, 9, 5, 8, 3, 6},
			},
			{
				"Decrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 0, 0, 53, 157, 55, 42},
				[]byte{0xEE, 0xF1, 0x88, 0x5A, 0xCE, 0xFA, 0x7E, 0x1D, 0x7B, 0xA6, 0xD2, 0x3B, 0xCF, 0xE2, 0x78, 0x32},
				getBigInt("317610372142014333160693171438181578802"),
				getBigInt("457020219"),
				[]uint16{9, 1, 2, 0, 2, 0, 7, 5, 4},
				[]uint16{2, 2, 7, 5, 9, 4, 9, 9, 8},
			},
			{
				"Decrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 0, 0, 0, 27, 61, 147, 59},
				[]byte{0x7C, 0x87, 0x9C, 0xE9, 0x91, 0x8C, 0x97, 0x18, 0x95, 0xCE, 0x0E, 0x6A, 0x93, 0x70, 0x2D, 0x05},
				getBigInt("165528414114337095023796922888913693957"),
				getBigInt("985801765"),
				[]uint16{5, 6, 7, 1, 0, 8, 5, 8, 9},
				[]uint16{9, 1, 2, 0, 2, 0, 7, 5, 4},
			},
			{
				"Decrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 0, 0, 58, 194, 36, 37},
				[]byte{0xDE, 0xAC, 0x36, 0x69, 0x0A, 0xF7, 0x6E, 0x4A, 0x2E, 0xF8, 0xA2, 0x7D, 0x22, 0x43, 0x4C, 0xDE},
				getBigInt("295982793696388950929125828211725520094"),
				getBigInt("731500125"),
				[]uint16{5, 2, 1, 0, 0, 5, 1, 3, 7},
				[]uint16{5, 6, 7, 1, 0, 8, 5, 8, 9},
			},
			{
				"Decrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 0, 0, 0, 43, 153, 206, 93},
				[]byte{0x71, 0x49, 0x55, 0xEA, 0x63, 0x12, 0x2B, 0x04, 0xF8, 0xA4, 0xE2, 0xCD, 0x1B, 0xD1, 0xB8, 0x58},
				getBigInt("150583543769235854575382615855985703000"),
				getBigInt("98765"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{5, 2, 1, 0, 0, 5, 1, 3, 7},
			},
			{
				"Decrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0xCB, 0xE8, 0xC6, 0xFF, 0xFC, 0x3F, 0x05, 0x06, 0xF9, 0xBB, 0xCE, 0xFE, 0xB3, 0x46, 0x87, 0x53},
				getBigInt("271041932213867374919564698371299379027"),
				getBigInt("432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #12",
		ff3CommonKey256,
		10,
		ff3CommonTweak2,
		ff3CommonInput1,
		[]uint16{5, 0, 4, 1, 4, 9, 8, 6, 5, 5, 7, 8, 0, 5, 6, 1, 4, 0},
		9,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0xF8, 0x9A, 0xDB, 0x25, 0xF0, 0x87, 0xFA, 0xEA, 0x47, 0x16, 0x70, 0xEC, 0xA1, 0xEA, 0xA1, 0x26},
				getBigInt("330452601524459504934593210673066058022"),
				getBigInt("498179120"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{0, 2, 1, 9, 7, 1, 8, 9, 4},
			},
			{
				"Encrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 0, 0, 29, 177, 156, 48},
				[]byte{0x02, 0xF7, 0xD2, 0xB5, 0x80, 0x1A, 0xD3, 0xE3, 0xB2, 0x8A, 0x8F, 0xCE, 0x53, 0xE9, 0xC7, 0x77},
				getBigInt("3945227001588630050734972852496877431"),
				getBigInt("496976196"),
				[]uint16{0, 2, 1, 9, 7, 1, 8, 9, 4},
				[]uint16{6, 9, 1, 6, 7, 9, 6, 9, 4},
			},
			{
				"Encrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 0, 29, 159, 65, 68},
				[]byte{0xD1, 0xD1, 0xAE, 0x87, 0xF7, 0x0B, 0xEC, 0x81, 0xCD, 0x4B, 0xA3, 0x9A, 0x31, 0xB1, 0x19, 0x7F},
				getBigInt("278897381074011383710398924205983865215"),
				getBigInt("482044335"),
				[]uint16{6, 9, 1, 6, 7, 9, 6, 9, 4},
				[]uint16{5, 3, 3, 4, 4, 0, 2, 8, 4},
			},
			{
				"Encrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 0, 0, 28, 187, 105, 175},
				[]byte{0x78, 0x48, 0x96, 0xF6, 0xDE, 0x0E, 0xBF, 0x2A, 0x93, 0xE5, 0x7E, 0x84, 0xC6, 0xDA, 0x81, 0xF4},
				getBigInt("159884266788296438496533435534213284340"),
				getBigInt("710260536"),
				[]uint16{5, 3, 3, 4, 4, 0, 2, 8, 4},
				[]uint16{6, 3, 5, 0, 6, 2, 0, 1, 7},
			},
			{
				"Encrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 0, 0, 42, 85, 183, 56},
				[]byte{0x7F, 0x04, 0x9B, 0xD4, 0x2B, 0x5A, 0x4C, 0xCF, 0x37, 0x78, 0x54, 0x42, 0x11, 0x79, 0x43, 0x45},
				getBigInt("168835885235394495670661813540019061573"),
				getBigInt("501105908"),
				[]uint16{6, 3, 5, 0, 6, 2, 0, 1, 7},
				[]uint16{8, 0, 9, 5, 0, 1, 1, 0, 5},
			},
			{
				"Encrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 0, 0, 29, 222, 68, 244},
				[]byte{0x38, 0x21, 0x7D, 0x7E, 0xCE, 0x32, 0x8B, 0x7A, 0x93, 0x9A, 0x76, 0xE8, 0xA5, 0x85, 0xB1, 0xE2},
				getBigInt("74610658908050888434721887648372601314"),
				getBigInt("82861850"),
				[]uint16{8, 0, 9, 5, 0, 1, 1, 0, 5},
				[]uint16{0, 5, 8, 1, 6, 8, 2, 8, 0},
			},
			{
				"Encrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 0, 0, 4, 240, 95, 26},
				[]byte{0x8F, 0x6D, 0xFF, 0x1E, 0x2E, 0x5D, 0x7C, 0xB8, 0xB3, 0x8A, 0x59, 0xF4, 0x92, 0xD5, 0x7C, 0x69},
				getBigInt("190650738160466402174230538935067835497"),
				getBigInt("568941405"),
				[]uint16{0, 5, 8, 1, 6, 8, 2, 8, 0},
				[]uint16{5, 0, 4, 1, 4, 9, 8, 6, 5},
			},
			{
				"Encrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 0, 0, 33, 233, 91, 93},
				[]byte{0x39, 0x2D, 0x7C, 0x8E, 0x41, 0x10, 0x24, 0xA9, 0xF9, 0x5E, 0x27, 0x3D, 0x1E, 0xAA, 0xA7, 0xA1},
				getBigInt("76002175407700243423632620517958789025"),
				getBigInt("41650875"),
				[]uint16{5, 0, 4, 1, 4, 9, 8, 6, 5},
				[]uint16{5, 7, 8, 0, 5, 6, 1, 4, 0},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 0, 0, 33, 233, 91, 93},
				[]byte{0x39, 0x2D, 0x7C, 0x8E, 0x41, 0x10, 0x24, 0xA9, 0xF9, 0x5E, 0x27, 0x3D, 0x1E, 0xAA, 0xA7, 0xA1},
				getBigInt("76002175407700243423632620517958789025"),
				getBigInt("82861850"),
				[]uint16{0, 5, 8, 1, 6, 8, 2, 8, 0},
				[]uint16{5, 0, 4, 1, 4, 9, 8, 6, 5},
			},
			{
				"Decrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 0, 0, 4, 240, 95, 26},
				[]byte{0x8F, 0x6D, 0xFF, 0x1E, 0x2E, 0x5D, 0x7C, 0xB8, 0xB3, 0x8A, 0x59, 0xF4, 0x92, 0xD5, 0x7C, 0x69},
				getBigInt("190650738160466402174230538935067835497"),
				getBigInt("501105908"),
				[]uint16{8, 0, 9, 5, 0, 1, 1, 0, 5},
				[]uint16{0, 5, 8, 1, 6, 8, 2, 8, 0},
			},
			{
				"Decrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 0, 0, 29, 222, 68, 244},
				[]byte{0x38, 0x21, 0x7D, 0x7E, 0xCE, 0x32, 0x8B, 0x7A, 0x93, 0x9A, 0x76, 0xE8, 0xA5, 0x85, 0xB1, 0xE2},
				getBigInt("74610658908050888434721887648372601314"),
				getBigInt("710260536"),
				[]uint16{6, 3, 5, 0, 6, 2, 0, 1, 7},
				[]uint16{8, 0, 9, 5, 0, 1, 1, 0, 5},
			},
			{
				"Decrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 0, 0, 42, 85, 183, 56},
				[]byte{0x7F, 0x04, 0x9B, 0xD4, 0x2B, 0x5A, 0x4C, 0xCF, 0x37, 0x78, 0x54, 0x42, 0x11, 0x79, 0x43, 0x45},
				getBigInt("168835885235394495670661813540019061573"),
				getBigInt("482044335"),
				[]uint16{5, 3, 3, 4, 4, 0, 2, 8, 4},
				[]uint16{6, 3, 5, 0, 6, 2, 0, 1, 7},
			},
			{
				"Decrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 0, 0, 28, 187, 105, 175},
				[]byte{0x78, 0x48, 0x96, 0xF6, 0xDE, 0x0E, 0xBF, 0x2A, 0x93, 0xE5, 0x7E, 0x84, 0xC6, 0xDA, 0x81, 0xF4},
				getBigInt("159884266788296438496533435534213284340"),
				getBigInt("496976196"),
				[]uint16{6, 9, 1, 6, 7, 9, 6, 9, 4},
				[]uint16{5, 3, 3, 4, 4, 0, 2, 8, 4},
			},
			{
				"Decrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 0, 29, 159, 65, 68},
				[]byte{0xD1, 0xD1, 0xAE, 0x87, 0xF7, 0x0B, 0xEC, 0x81, 0xCD, 0x4B, 0xA3, 0x9A, 0x31, 0xB1, 0x19, 0x7F},
				getBigInt("278897381074011383710398924205983865215"),
				getBigInt("498179120"),
				[]uint16{0, 2, 1, 9, 7, 1, 8, 9, 4},
				[]uint16{6, 9, 1, 6, 7, 9, 6, 9, 4},
			},
			{
				"Decrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 0, 0, 29, 177, 156, 48},
				[]byte{0x02, 0xF7, 0xD2, 0xB5, 0x80, 0x1A, 0xD3, 0xE3, 0xB2, 0x8A, 0x8F, 0xCE, 0x53, 0xE9, 0xC7, 0x77},
				getBigInt("3945227001588630050734972852496877431"),
				getBigInt("98765"),
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
				[]uint16{0, 2, 1, 9, 7, 1, 8, 9, 4},
			},
			{
				"Decrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 205},
				[]byte{0xF8, 0x9A, 0xDB, 0x25, 0xF0, 0x87, 0xFA, 0xEA, 0x47, 0x16, 0x70, 0xEC, 0xA1, 0xEA, 0xA1, 0x26},
				getBigInt("330452601524459504934593210673066058022"),
				getBigInt("432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4},
				[]uint16{5, 6, 7, 8, 9, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #13",
		ff3CommonKey256,
		10,
		ff3CommonTweak1,
		ff3CommonInput2,
		[]uint16{0, 4, 3, 4, 4, 3, 4, 3, 2, 3, 5, 7, 9, 2, 5, 9, 9, 1, 6, 5, 7, 3, 4, 6, 2, 2, 6, 9, 9},
		15,
		14,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x1C, 0xA0, 0xA1, 0x31, 0xAC, 0xE2, 0x4F, 0x6F, 0xAF, 0x91, 0x91, 0x28, 0xEF, 0xBB, 0xC4, 0x51},
				getBigInt("38052420782974382031458324022780740689"),
				getBigInt("422788212861787"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{7, 8, 7, 1, 6, 8, 2, 1, 2, 8, 8, 7, 2, 2, 4},
			},
			{
				"Encrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 1, 128, 134, 13, 62, 43, 91},
				[]byte{0xE1, 0x7D, 0x2D, 0x2B, 0xA3, 0x8B, 0xE0, 0x48, 0x76, 0xE0, 0xAF, 0x58, 0x3F, 0xBD, 0x8C, 0x8B},
				getBigInt("299726252324781233732087949802786884747"),
				getBigInt("49802885584747"),
				[]uint16{7, 8, 7, 1, 6, 8, 2, 1, 2, 8, 8, 7, 2, 2, 4},
				[]uint16{7, 4, 7, 4, 8, 5, 5, 8, 8, 2, 0, 8, 9, 4},
			},
			{
				"Encrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 45, 75, 163, 77, 215, 107},
				[]byte{0x5C, 0xFE, 0xBD, 0xC9, 0xAA, 0x4E, 0x62, 0xB5, 0x70, 0x9B, 0x02, 0x0F, 0x40, 0xD2, 0x28, 0x0C},
				getBigInt("123611668367263076080087660689913686028"),
				getBigInt("83478126547815"),
				[]uint16{7, 4, 7, 4, 8, 5, 5, 8, 8, 2, 0, 8, 9, 4},
				[]uint16{5, 1, 8, 7, 4, 5, 6, 2, 1, 8, 7, 4, 3, 8, 0},
			},
			{
				"Encrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 0, 75, 236, 68, 20, 83, 103},
				[]byte{0x9E, 0x45, 0xC8, 0xE5, 0xF9, 0x4B, 0x3E, 0xD5, 0x3B, 0x29, 0x37, 0xF8, 0xC7, 0x7F, 0x84, 0xEA},
				getBigInt("210380366519578290727915663125464974570"),
				getBigInt("12928350559317"),
				[]uint16{5, 1, 8, 7, 4, 5, 6, 2, 1, 8, 7, 4, 3, 8, 0},
				[]uint16{7, 1, 3, 9, 5, 5, 0, 5, 3, 8, 2, 9, 2, 1},
			},
			{
				"Encrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 11, 194, 29, 190, 28, 85},
				[]byte{0x63, 0x6A, 0xF5, 0xDB, 0xBD, 0x32, 0x92, 0x0F, 0xDE, 0xD8, 0x69, 0xB6, 0x6A, 0x78, 0x78, 0x5F},
				getBigInt("132148941649585651334725241866485790815"),
				getBigInt("325344612338630"),
				[]uint16{7, 1, 3, 9, 5, 5, 0, 5, 3, 8, 2, 9, 2, 1},
				[]uint16{0, 3, 6, 8, 3, 3, 2, 1, 6, 4, 4, 3, 5, 2, 3},
			},
			{
				"Encrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 1, 39, 230, 50, 12, 75, 198},
				[]byte{0x2D, 0x25, 0x13, 0xE1, 0x4D, 0x44, 0xF9, 0x6C, 0x5D, 0x5B, 0x9C, 0xD7, 0x2B, 0x2B, 0xF0, 0x26},
				getBigInt("60007778010119768574348062116302024742"),
				getBigInt("75044652584059"),
				[]uint16{0, 3, 6, 8, 3, 3, 2, 1, 6, 4, 4, 3, 5, 2, 3},
				[]uint16{9, 5, 0, 4, 8, 5, 2, 5, 6, 4, 4, 0, 5, 7},
			},
			{
				"Encrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 68, 64, 177, 220, 12, 123},
				[]byte{0xA5, 0x82, 0x5F, 0x89, 0xAD, 0x21, 0x1F, 0x0C, 0x60, 0x39, 0x5A, 0x13, 0x20, 0x30, 0x3D, 0xCE},
				getBigInt("219999555632872205856537204408622005710"),
				getBigInt("529753234344340"),
				[]uint16{9, 5, 0, 4, 8, 5, 2, 5, 6, 4, 4, 0, 5, 7},
				[]uint16{0, 4, 3, 4, 4, 3, 4, 3, 2, 3, 5, 7, 9, 2, 5},
			},
			{
				"Encrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 1, 225, 206, 201, 90, 9, 148},
				[]byte{0xBF, 0xC0, 0x8D, 0xC8, 0x6A, 0x6E, 0xA6, 0xC2, 0x06, 0x44, 0xE0, 0x2C, 0x3A, 0xA1, 0xA0, 0x2C},
				getBigInt("254882343890083416740878724577991172140"),
				getBigInt("99622643756199"),
				[]uint16{0, 4, 3, 4, 4, 3, 4, 3, 2, 3, 5, 7, 9, 2, 5},
				[]uint16{9, 9, 1, 6, 5, 7, 3, 4, 6, 2, 2, 6, 9, 9},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{216, 231, 146, 13, 0, 0, 0, 0, 0, 1, 225, 206, 201, 90, 9, 148},
				[]byte{0xBF, 0xC0, 0x8D, 0xC8, 0x6A, 0x6E, 0xA6, 0xC2, 0x06, 0x44, 0xE0, 0x2C, 0x3A, 0xA1, 0xA0, 0x2C},
				getBigInt("254882343890083416740878724577991172140"),
				getBigInt("75044652584059"),
				[]uint16{9, 5, 0, 4, 8, 5, 2, 5, 6, 4, 4, 0, 5, 7},
				[]uint16{0, 4, 3, 4, 4, 3, 4, 3, 2, 3, 5, 7, 9, 2, 5},
			},
			{
				"Decrypt: round #6",
				[]byte{250, 51, 10, 117, 0, 0, 0, 0, 0, 0, 68, 64, 177, 220, 12, 123},
				[]byte{0xA5, 0x82, 0x5F, 0x89, 0xAD, 0x21, 0x1F, 0x0C, 0x60, 0x39, 0x5A, 0x13, 0x20, 0x30, 0x3D, 0xCE},
				getBigInt("219999555632872205856537204408622005710"),
				getBigInt("325344612338630"),
				[]uint16{0, 3, 6, 8, 3, 3, 2, 1, 6, 4, 4, 3, 5, 2, 3},
				[]uint16{9, 5, 0, 4, 8, 5, 2, 5, 6, 4, 4, 0, 5, 7},
			},
			{
				"Decrypt: round #5",
				[]byte{216, 231, 146, 15, 0, 0, 0, 0, 0, 1, 39, 230, 50, 12, 75, 198},
				[]byte{0x2D, 0x25, 0x13, 0xE1, 0x4D, 0x44, 0xF9, 0x6C, 0x5D, 0x5B, 0x9C, 0xD7, 0x2B, 0x2B, 0xF0, 0x26},
				getBigInt("60007778010119768574348062116302024742"),
				getBigInt("12928350559317"),
				[]uint16{7, 1, 3, 9, 5, 5, 0, 5, 3, 8, 2, 9, 2, 1},
				[]uint16{0, 3, 6, 8, 3, 3, 2, 1, 6, 4, 4, 3, 5, 2, 3},
			},
			{
				"Decrypt: round #4",
				[]byte{250, 51, 10, 119, 0, 0, 0, 0, 0, 0, 11, 194, 29, 190, 28, 85},
				[]byte{0x63, 0x6A, 0xF5, 0xDB, 0xBD, 0x32, 0x92, 0x0F, 0xDE, 0xD8, 0x69, 0xB6, 0x6A, 0x78, 0x78, 0x5F},
				getBigInt("132148941649585651334725241866485790815"),
				getBigInt("83478126547815"),
				[]uint16{5, 1, 8, 7, 4, 5, 6, 2, 1, 8, 7, 4, 3, 8, 0},
				[]uint16{7, 1, 3, 9, 5, 5, 0, 5, 3, 8, 2, 9, 2, 1},
			},
			{
				"Decrypt: round #3",
				[]byte{216, 231, 146, 9, 0, 0, 0, 0, 0, 0, 75, 236, 68, 20, 83, 103},
				[]byte{0x9E, 0x45, 0xC8, 0xE5, 0xF9, 0x4B, 0x3E, 0xD5, 0x3B, 0x29, 0x37, 0xF8, 0xC7, 0x7F, 0x84, 0xEA},
				getBigInt("210380366519578290727915663125464974570"),
				getBigInt("49802885584747"),
				[]uint16{7, 4, 7, 4, 8, 5, 5, 8, 8, 2, 0, 8, 9, 4},
				[]uint16{5, 1, 8, 7, 4, 5, 6, 2, 1, 8, 7, 4, 3, 8, 0},
			},
			{
				"Decrypt: round #2",
				[]byte{250, 51, 10, 113, 0, 0, 0, 0, 0, 0, 45, 75, 163, 77, 215, 107},
				[]byte{0x5C, 0xFE, 0xBD, 0xC9, 0xAA, 0x4E, 0x62, 0xB5, 0x70, 0x9B, 0x02, 0x0F, 0x40, 0xD2, 0x28, 0x0C},
				getBigInt("123611668367263076080087660689913686028"),
				getBigInt("422788212861787"),
				[]uint16{7, 8, 7, 1, 6, 8, 2, 1, 2, 8, 8, 7, 2, 2, 4},
				[]uint16{7, 4, 7, 4, 8, 5, 5, 8, 8, 2, 0, 8, 9, 4},
			},
			{
				"Decrypt: round #1",
				[]byte{216, 231, 146, 11, 0, 0, 0, 0, 0, 1, 128, 134, 13, 62, 43, 91},
				[]byte{0xE1, 0x7D, 0x2D, 0x2B, 0xA3, 0x8B, 0xE0, 0x48, 0x76, 0xE0, 0xAF, 0x58, 0x3F, 0xBD, 0x8C, 0x8B},
				getBigInt("299726252324781233732087949802786884747"),
				getBigInt("98700000"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{7, 8, 7, 1, 6, 8, 2, 1, 2, 8, 8, 7, 2, 2, 4},
			},
			{
				"Decrypt: round #0",
				[]byte{250, 51, 10, 115, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x1C, 0xA0, 0xA1, 0x31, 0xAC, 0xE2, 0x4F, 0x6F, 0xAF, 0x91, 0x91, 0x28, 0xEF, 0xBB, 0xC4, 0x51},
				getBigInt("38052420782974382031458324022780740689"),
				getBigInt("98765432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #14",
		ff3CommonKey256,
		10,
		ff3CommonTweak3,
		ff3CommonInput2,
		[]uint16{3, 0, 8, 5, 9, 2, 3, 9, 9, 9, 9, 3, 7, 4, 0, 5, 3, 8, 7, 2, 3, 6, 5, 5, 5, 5, 8, 2, 2},
		15,
		14,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x30, 0x89, 0xAA, 0xF8, 0x05, 0xE8, 0x80, 0x2E, 0xDF, 0x3F, 0x0E, 0x34, 0x95, 0xE3, 0x89, 0xBD},
				getBigInt("64517756127340658772823157152566970813"),
				getBigInt("255917999091911"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{1, 1, 9, 1, 9, 0, 9, 9, 9, 7, 1, 9, 5, 5, 2},
			},
			{
				"Encrypt: round #1",
				[]byte{0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 232, 193, 141, 109, 112, 199},
				[]byte{0xE2, 0x91, 0xB8, 0xFC, 0x72, 0xBF, 0x89, 0x48, 0xB2, 0x82, 0x19, 0xE0, 0x1E, 0x12, 0xE1, 0xC7},
				getBigInt("301162162056255407040784727849974292935"),
				getBigInt("27850072992935"),
				[]uint16{1, 1, 9, 1, 9, 0, 9, 9, 9, 7, 1, 9, 5, 5, 2},
				[]uint16{5, 3, 9, 2, 9, 9, 2, 7, 0, 0, 5, 8, 7, 2},
			},
			{
				"Encrypt: round #2",
				[]byte{0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 25, 84, 89, 181, 44, 167},
				[]byte{0xA5, 0x4C, 0x85, 0xBA, 0x15, 0x90, 0x0F, 0x03, 0x9D, 0xB9, 0xB0, 0xFA, 0x57, 0xFF, 0xAC, 0x39},
				getBigInt("219719946169348620680705198084969180217"),
				getBigInt("454002968272128"),
				[]uint16{5, 3, 9, 2, 9, 9, 2, 7, 0, 0, 5, 8, 7, 2},
				[]uint16{8, 2, 1, 2, 7, 2, 8, 6, 9, 2, 0, 0, 4, 5, 4},
			},
			{
				"Encrypt: round #3",
				[]byte{0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 156, 233, 205, 166, 157, 0},
				[]byte{0x09, 0xFA, 0x0B, 0x23, 0x97, 0x52, 0xF4, 0xF7, 0xF4, 0x0F, 0x35, 0xEE, 0x46, 0xAD, 0x86, 0x34},
				getBigInt("13261352103021803162478812555499111988"),
				getBigInt("40405572104923"),
				[]uint16{8, 2, 1, 2, 7, 2, 8, 6, 9, 2, 0, 0, 4, 5, 4},
				[]uint16{3, 2, 9, 4, 0, 1, 2, 7, 5, 5, 0, 4, 0, 4},
			},
			{
				"Encrypt: round #4",
				[]byte{0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 36, 191, 167, 197, 178, 219},
				[]byte{0x86, 0x01, 0x6A, 0xB1, 0x7A, 0xC8, 0xAD, 0x4A, 0x14, 0x1A, 0x7A, 0xD1, 0xAA, 0x98, 0x58, 0xB9},
				getBigInt("178123907728839788596627596433386133689"),
				getBigInt("50436354405817"),
				[]uint16{3, 2, 9, 4, 0, 1, 2, 7, 5, 5, 0, 4, 0, 4},
				[]uint16{7, 1, 8, 5, 0, 4, 4, 5, 3, 6, 3, 4, 0, 5, 0},
			},
			{
				"Encrypt: round #5",
				[]byte{0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 45, 223, 32, 252, 245, 185},
				[]byte{0x5F, 0x98, 0x84, 0x00, 0xBF, 0x92, 0xCC, 0x5C, 0x0C, 0x07, 0xE2, 0x8D, 0x90, 0x2C, 0x4B, 0x77},
				getBigInt("127068566059421088852164781931615767415"),
				getBigInt("22337187872338"),
				[]uint16{7, 1, 8, 5, 0, 4, 4, 5, 3, 6, 3, 4, 0, 5, 0},
				[]uint16{8, 3, 3, 2, 7, 8, 7, 8, 1, 7, 3, 3, 2, 2},
			},
			{
				"Encrypt: round #6",
				[]byte{0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 20, 80, 200, 37, 254, 82},
				[]byte{0x61, 0x70, 0x66, 0xEA, 0xE6, 0xD1, 0x77, 0x6E, 0x9E, 0xCD, 0x6E, 0xDB, 0xD1, 0xAC, 0x4E, 0x02},
				getBigInt("129518740255897122931707996963638889986"),
				getBigInt("47399993295803"),
				[]uint16{8, 3, 3, 2, 7, 8, 7, 8, 1, 7, 3, 3, 2, 2},
				[]uint16{3, 0, 8, 5, 9, 2, 3, 9, 9, 9, 9, 3, 7, 4, 0},
			},
			{
				"Encrypt: round #7",
				[]byte{0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 43, 28, 43, 195, 67, 187},
				[]byte{0x6F, 0x6E, 0xA0, 0x64, 0xEB, 0xF9, 0x1F, 0xEC, 0x61, 0x66, 0x9A, 0xAF, 0x55, 0xDD, 0x2B, 0x49},
				getBigInt("148118713367947479216073700518368455497"),
				getBigInt("22855556327835"),
				[]uint16{3, 0, 8, 5, 9, 2, 3, 9, 9, 9, 9, 3, 7, 4, 0},
				[]uint16{5, 3, 8, 7, 2, 3, 6, 5, 5, 5, 5, 8, 2, 2},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 43, 28, 43, 195, 67, 187},
				[]byte{0x6F, 0x6E, 0xA0, 0x64, 0xEB, 0xF9, 0x1F, 0xEC, 0x61, 0x66, 0x9A, 0xAF, 0x55, 0xDD, 0x2B, 0x49},
				getBigInt("148118713367947479216073700518368455497"),
				getBigInt("22337187872338"),
				[]uint16{8, 3, 3, 2, 7, 8, 7, 8, 1, 7, 3, 3, 2, 2},
				[]uint16{3, 0, 8, 5, 9, 2, 3, 9, 9, 9, 9, 3, 7, 4, 0},
			},
			{
				"Decrypt: round #6",
				[]byte{0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 20, 80, 200, 37, 254, 82},
				[]byte{0x61, 0x70, 0x66, 0xEA, 0xE6, 0xD1, 0x77, 0x6E, 0x9E, 0xCD, 0x6E, 0xDB, 0xD1, 0xAC, 0x4E, 0x02},
				getBigInt("129518740255897122931707996963638889986"),
				getBigInt("50436354405817"),
				[]uint16{7, 1, 8, 5, 0, 4, 4, 5, 3, 6, 3, 4, 0, 5, 0},
				[]uint16{8, 3, 3, 2, 7, 8, 7, 8, 1, 7, 3, 3, 2, 2},
			},
			{
				"Decrypt: round #5",
				[]byte{0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 45, 223, 32, 252, 245, 185},
				[]byte{0x5F, 0x98, 0x84, 0x00, 0xBF, 0x92, 0xCC, 0x5C, 0x0C, 0x07, 0xE2, 0x8D, 0x90, 0x2C, 0x4B, 0x77},
				getBigInt("127068566059421088852164781931615767415"),
				getBigInt("40405572104923"),
				[]uint16{3, 2, 9, 4, 0, 1, 2, 7, 5, 5, 0, 4, 0, 4},
				[]uint16{7, 1, 8, 5, 0, 4, 4, 5, 3, 6, 3, 4, 0, 5, 0},
			},
			{
				"Decrypt: round #4",
				[]byte{0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 36, 191, 167, 197, 178, 219},
				[]byte{0x86, 0x01, 0x6A, 0xB1, 0x7A, 0xC8, 0xAD, 0x4A, 0x14, 0x1A, 0x7A, 0xD1, 0xAA, 0x98, 0x58, 0xB9},
				getBigInt("178123907728839788596627596433386133689"),
				getBigInt("454002968272128"),
				[]uint16{8, 2, 1, 2, 7, 2, 8, 6, 9, 2, 0, 0, 4, 5, 4},
				[]uint16{3, 2, 9, 4, 0, 1, 2, 7, 5, 5, 0, 4, 0, 4},
			},
			{
				"Decrypt: round #3",
				[]byte{0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 156, 233, 205, 166, 157, 0},
				[]byte{0x09, 0xFA, 0x0B, 0x23, 0x97, 0x52, 0xF4, 0xF7, 0xF4, 0x0F, 0x35, 0xEE, 0x46, 0xAD, 0x86, 0x34},
				getBigInt("13261352103021803162478812555499111988"),
				getBigInt("27850072992935"),
				[]uint16{5, 3, 9, 2, 9, 9, 2, 7, 0, 0, 5, 8, 7, 2},
				[]uint16{8, 2, 1, 2, 7, 2, 8, 6, 9, 2, 0, 0, 4, 5, 4},
			},
			{
				"Decrypt: round #2",
				[]byte{0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 25, 84, 89, 181, 44, 167},
				[]byte{0xA5, 0x4C, 0x85, 0xBA, 0x15, 0x90, 0x0F, 0x03, 0x9D, 0xB9, 0xB0, 0xFA, 0x57, 0xFF, 0xAC, 0x39},
				getBigInt("219719946169348620680705198084969180217"),
				getBigInt("255917999091911"),
				[]uint16{1, 1, 9, 1, 9, 0, 9, 9, 9, 7, 1, 9, 5, 5, 2},
				[]uint16{5, 3, 9, 2, 9, 9, 2, 7, 0, 0, 5, 8, 7, 2},
			},
			{
				"Decrypt: round #1",
				[]byte{0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 232, 193, 141, 109, 112, 199},
				[]byte{0xE2, 0x91, 0xB8, 0xFC, 0x72, 0xBF, 0x89, 0x48, 0xB2, 0x82, 0x19, 0xE0, 0x1E, 0x12, 0xE1, 0xC7},
				getBigInt("301162162056255407040784727849974292935"),
				getBigInt("98700000"),
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
				[]uint16{1, 1, 9, 1, 9, 0, 9, 9, 9, 7, 1, 9, 5, 5, 2},
			},
			{
				"Decrypt: round #0",
				[]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 226, 10, 224},
				[]byte{0x30, 0x89, 0xAA, 0xF8, 0x05, 0xE8, 0x80, 0x2E, 0xDF, 0x3F, 0x0E, 0x34, 0x95, 0xE3, 0x89, 0xBD},
				getBigInt("64517756127340658772823157152566970813"),
				getBigInt("98765432121098"),
				[]uint16{8, 9, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
				[]uint16{0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0},
			},
		},
	},
	{
		"Sample #15",
		ff3CommonKey256,
		26,
		ff3CommonTweak2,
		ff3CommonInput3,
		[]uint16{25, 0, 11, 2, 16, 24, 13, 15, 19, 10, 9, 11, 17, 11, 7, 11, 20, 3, 8},
		10,
		9,
		[]ff3FeistelRound{
			{
				"Encrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 3, 140, 43, 56, 187, 32},
				[]byte{0x85, 0x42, 0x98, 0x4C, 0xE5, 0xA4, 0x1E, 0x6E, 0x90, 0x7F, 0x6C, 0xE5, 0x15, 0xB6, 0xBB, 0xA5},
				getBigInt("177133104050727690651736763581255302053"),
				getBigInt("129555143637599"),
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{17, 17, 5, 4, 4, 16, 6, 10, 22, 23},
			},
			{
				"Encrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 117, 212, 104, 80, 186, 95},
				[]byte{0x32, 0x9A, 0x01, 0xCE, 0x96, 0xFF, 0xE0, 0xE0, 0x8B, 0xC5, 0xF8, 0x13, 0xD3, 0xA2, 0x71, 0x0A},
				getBigInt("67261050155603328199546072631479529738"),
				getBigInt("871754233898"),
				[]uint16{17, 17, 5, 4, 4, 16, 6, 10, 22, 23},
				[]uint16{2, 2, 19, 17, 12, 25, 13, 4, 4},
			},
			{
				"Encrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 202, 248, 153, 248, 42},
				[]byte{0xA3, 0x65, 0xB0, 0x38, 0x94, 0x9B, 0xD3, 0x6A, 0xE1, 0x57, 0xF7, 0x9B, 0x53, 0xF7, 0x2F, 0xEE},
				getBigInt("217192159482512811713119465139342880750"),
				getBigInt("83716232153677"),
				[]uint16{2, 2, 19, 17, 12, 25, 13, 4, 4},
				[]uint16{19, 25, 24, 10, 20, 4, 2, 23, 10, 15},
			},
			{
				"Encrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 76, 35, 180, 71, 138, 77},
				[]byte{0x0D, 0x19, 0xDF, 0xC8, 0xE5, 0xF3, 0xDA, 0xBA, 0x57, 0xA9, 0x1E, 0xCB, 0x51, 0x35, 0xE0, 0xFF},
				getBigInt("17414310260808263350393465868716990719"),
				getBigInt("5091042542889"),
				[]uint16{19, 25, 24, 10, 20, 4, 2, 23, 10, 15},
				[]uint16{17, 0, 2, 24, 7, 9, 22, 9, 24},
			},
			{
				"Encrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 4, 161, 89, 200, 69, 41},
				[]byte{0xBB, 0xB7, 0x5B, 0x2A, 0x9F, 0xB4, 0x14, 0xC7, 0x0F, 0x97, 0x54, 0xA2, 0x34, 0x85, 0x78, 0x1F},
				getBigInt("249517674613173720918623446156871825439"),
				getBigInt("28684272725612"),
				[]uint16{17, 0, 2, 24, 7, 9, 22, 9, 24},
				[]uint16{10, 25, 6, 14, 11, 17, 8, 9, 7, 5},
			},
			{
				"Encrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 26, 22, 147, 226, 238, 108},
				[]byte{0x38, 0xE5, 0x72, 0xDD, 0x32, 0x90, 0x7D, 0xE8, 0x08, 0xDF, 0x77, 0xB6, 0x13, 0x14, 0x0F, 0x67},
				getBigInt("75628133464327426737579722334612492135"),
				getBigInt("1202313115280"),
				[]uint16{10, 25, 6, 14, 11, 17, 8, 9, 7, 5},
				[]uint16{4, 4, 21, 6, 2, 1, 18, 19, 5},
			},
			{
				"Encrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 1, 23, 239, 114, 54, 144},
				[]byte{0x1A, 0x13, 0xCF, 0x4B, 0xEE, 0x19, 0xF6, 0x52, 0x49, 0xF4, 0xD6, 0x96, 0xAE, 0x70, 0x91, 0xC9},
				getBigInt("34662786005308937589131551858874159561"),
				getBigInt("58387536581685"),
				[]uint16{4, 4, 21, 6, 2, 1, 18, 19, 5},
				[]uint16{25, 0, 11, 2, 16, 24, 13, 15, 19, 10},
			},
			{
				"Encrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 53, 26, 104, 96, 148, 53},
				[]byte{0x8B, 0x19, 0xB4, 0xC7, 0x14, 0x62, 0x6C, 0x7E, 0xA8, 0xC1, 0x26, 0x6E, 0x20, 0xBB, 0x50, 0x83},
				getBigInt("184896165442008361942401016373693862019"),
				getBigInt("1701024361747"),
				[]uint16{25, 0, 11, 2, 16, 24, 13, 15, 19, 10},
				[]uint16{9, 11, 17, 11, 7, 11, 20, 3, 8},
			},
		},
		[]ff3FeistelRound{
			{
				"Decrypt: round #7",
				[]byte{154, 118, 138, 149, 0, 0, 0, 0, 0, 0, 53, 26, 104, 96, 148, 53},
				[]byte{0x8B, 0x19, 0xB4, 0xC7, 0x14, 0x62, 0x6C, 0x7E, 0xA8, 0xC1, 0x26, 0x6E, 0x20, 0xBB, 0x50, 0x83},
				getBigInt("184896165442008361942401016373693862019"),
				getBigInt("1202313115280"),
				[]uint16{4, 4, 21, 6, 2, 1, 18, 19, 5},
				[]uint16{25, 0, 11, 2, 16, 24, 13, 15, 19, 10},
			},
			{
				"Decrypt: round #6",
				[]byte{246, 14, 18, 222, 0, 0, 0, 0, 0, 0, 1, 23, 239, 114, 54, 144},
				[]byte{0x1A, 0x13, 0xCF, 0x4B, 0xEE, 0x19, 0xF6, 0x52, 0x49, 0xF4, 0xD6, 0x96, 0xAE, 0x70, 0x91, 0xC9},
				getBigInt("34662786005308937589131551858874159561"),
				getBigInt("28684272725612"),
				[]uint16{10, 25, 6, 14, 11, 17, 8, 9, 7, 5},
				[]uint16{4, 4, 21, 6, 2, 1, 18, 19, 5},
			},
			{
				"Decrypt: round #5",
				[]byte{154, 118, 138, 151, 0, 0, 0, 0, 0, 0, 26, 22, 147, 226, 238, 108},
				[]byte{0x38, 0xE5, 0x72, 0xDD, 0x32, 0x90, 0x7D, 0xE8, 0x08, 0xDF, 0x77, 0xB6, 0x13, 0x14, 0x0F, 0x67},
				getBigInt("75628133464327426737579722334612492135"),
				getBigInt("5091042542889"),
				[]uint16{17, 0, 2, 24, 7, 9, 22, 9, 24},
				[]uint16{10, 25, 6, 14, 11, 17, 8, 9, 7, 5},
			},
			{
				"Decrypt: round #4",
				[]byte{246, 14, 18, 220, 0, 0, 0, 0, 0, 0, 4, 161, 89, 200, 69, 41},
				[]byte{0xBB, 0xB7, 0x5B, 0x2A, 0x9F, 0xB4, 0x14, 0xC7, 0x0F, 0x97, 0x54, 0xA2, 0x34, 0x85, 0x78, 0x1F},
				getBigInt("249517674613173720918623446156871825439"),
				getBigInt("83716232153677"),
				[]uint16{19, 25, 24, 10, 20, 4, 2, 23, 10, 15},
				[]uint16{17, 0, 2, 24, 7, 9, 22, 9, 24},
			},
			{
				"Decrypt: round #3",
				[]byte{154, 118, 138, 145, 0, 0, 0, 0, 0, 0, 76, 35, 180, 71, 138, 77},
				[]byte{0x0D, 0x19, 0xDF, 0xC8, 0xE5, 0xF3, 0xDA, 0xBA, 0x57, 0xA9, 0x1E, 0xCB, 0x51, 0x35, 0xE0, 0xFF},
				getBigInt("17414310260808263350393465868716990719"),
				getBigInt("871754233898"),
				[]uint16{2, 2, 19, 17, 12, 25, 13, 4, 4},
				[]uint16{19, 25, 24, 10, 20, 4, 2, 23, 10, 15},
			},
			{
				"Decrypt: round #2",
				[]byte{246, 14, 18, 218, 0, 0, 0, 0, 0, 0, 0, 202, 248, 153, 248, 42},
				[]byte{0xA3, 0x65, 0xB0, 0x38, 0x94, 0x9B, 0xD3, 0x6A, 0xE1, 0x57, 0xF7, 0x9B, 0x53, 0xF7, 0x2F, 0xEE},
				getBigInt("217192159482512811713119465139342880750"),
				getBigInt("129555143637599"),
				[]uint16{17, 17, 5, 4, 4, 16, 6, 10, 22, 23},
				[]uint16{2, 2, 19, 17, 12, 25, 13, 4, 4},
			},
			{
				"Decrypt: round #1",
				[]byte{154, 118, 138, 147, 0, 0, 0, 0, 0, 0, 117, 212, 104, 80, 186, 95},
				[]byte{0x32, 0x9A, 0x01, 0xCE, 0x96, 0xFF, 0xE0, 0xE0, 0x8B, 0xC5, 0xF8, 0x13, 0xD3, 0xA2, 0x71, 0x0A},
				getBigInt("67261050155603328199546072631479529738"),
				getBigInt("3900555442976"),
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
				[]uint16{17, 17, 5, 4, 4, 16, 6, 10, 22, 23},
			},
			{
				"Decrypt: round #0",
				[]byte{246, 14, 18, 216, 0, 0, 0, 0, 0, 0, 3, 140, 43, 56, 187, 32},
				[]byte{0x85, 0x42, 0x98, 0x4C, 0xE5, 0xA4, 0x1E, 0x6E, 0x90, 0x7F, 0x6C, 0xE5, 0x15, 0xB6, 0xBB, 0xA5},
				getBigInt("177133104050727690651736763581255302053"),
				getBigInt("50594287082170"),
				[]uint16{0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
				[]uint16{10, 11, 12, 13, 14, 15, 16, 17, 18},
			},
		},
	},
}

// Test input validation of NewFF3Encrypter
func TestNewFF3Encrypter(t *testing.T) {
	var key, _, _ []byte = getRandomParameters(ff3DefaultKeySize, tweakLenFF3, 0)

	var aesBlock, err = aes.NewCipher(key)
	assert.Nil(t, err)

	// Invalid tweak length
	var f func()
	f = func() {
		var radix uint32 = uint32(maxRadixFF3)
		var tweak = make([]byte, tweakLenFF3+1)
		rand.Read(tweak)
		NewFF3Encrypter(aesBlock, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid radix
	f = func() {
		var radix uint32 = uint32(maxRadixFF3 + 1)
		var tweak = make([]byte, tweakLenFF3)
		rand.Read(tweak)
		NewFF3Encrypter(aesBlock, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid Block
	var invalidBlock *mockBlock = &mockBlock{}
	f = func() {
		var radix uint32 = uint32(maxRadixFF3)
		var tweak = make([]byte, tweakLenFF3)
		rand.Read(tweak)
		NewFF3Encrypter(invalidBlock, tweak, radix)
	}
	assert.Panics(t, f)
}

// Test input validation of NewFF3Decrypter
func TestNewFF3Decrypter(t *testing.T) {
	var key, _, _ []byte = getRandomParameters(ff3DefaultKeySize, tweakLenFF3, 0)

	var aesBlock, err = aes.NewCipher(key)
	assert.Nil(t, err)

	// Invalid tweak length
	var f func()
	f = func() {
		var radix uint32 = uint32(maxRadixFF3)
		var tweak = make([]byte, tweakLenFF3+1)
		rand.Read(tweak)
		NewFF3Decrypter(aesBlock, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid radix
	f = func() {
		var radix uint32 = uint32(maxRadixFF3 + 1)
		var tweak = make([]byte, tweakLenFF3)
		rand.Read(tweak)
		NewFF3Decrypter(aesBlock, tweak, radix)
	}
	assert.Panics(t, f)

	// Invalid Block
	var invalidBlock *mockBlock = &mockBlock{}
	f = func() {
		var radix uint32 = uint32(maxRadixFF3)
		var tweak = make([]byte, tweakLenFF3)
		rand.Read(tweak)
		NewFF3Decrypter(invalidBlock, tweak, radix)
	}
	assert.Panics(t, f)
}

// Test input validation of Crypt method for FF3 encrypter and decrypter
func TestFF3CryptBlocks(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff3DefaultKeySize, tweakLenFF3, 0)
	var radix uint32 = minRadixFF3

	var aesBlock, err = aes.NewCipher(key)
	assert.Nil(t, err)

	var ff3BlockMode []cipher.BlockMode = []cipher.BlockMode{
		NewFF3Encrypter(aesBlock, tweak, radix),
		NewFF3Decrypter(aesBlock, tweak, radix),
	}

	for _, ff3 := range ff3BlockMode {

		// Test invalid input length
		var f func()
		f = func() {
			// 1 is smaller than minInputLenFF3
			var numStr = make([]uint16, 1)
			var b = NumeralStringToBytes(numStr)
			ff3.CryptBlocks(b, b)
		}
		assert.Panics(t, f)

		// Test radix^len < 100
		f = func() {
			// minInputLenFF3 < 5 and radix^len < 100
			var numStr = make([]uint16, 5)
			var b = NumeralStringToBytes(numStr)
			ff3.CryptBlocks(b, b)
		}
		assert.Panics(t, f)

		// Test len(dst) != len(src)
		f = func() {
			// minInputLenFF3 < 10 and radix^len > 100
			var numStr = make([]uint16, 10)
			var b = NumeralStringToBytes(numStr)
			var dst = make([]byte, len(b)+1)
			ff3.CryptBlocks(dst, b)
		}
		assert.Panics(t, f)

		// Test invalid numeral string
		f = func() {
			var validLength = 10
			var numStr = make([]uint16, validLength)
			assert.Equal(t, radix, uint32(2))
			numStr[0] = 3 // invalid for radix 2
			var b = NumeralStringToBytes(numStr)
			ff3.CryptBlocks(b, b)
		}
		assert.Panics(t, f)
	}
}

// This test uses the NIST test vectors to validate the FF3 encryption. Here we only
// check that the output is correct for both in place and not in place encryption.
func TestFF3Encrypter(t *testing.T) {
	for _, test := range ff3Tests {
		// The NIST standard require to reverse the key bytes for FF3.
		var key = RevB(test.key)

		var encrypter cipher.BlockMode
		{
			var err error
			encrypter, err = getFF3Encrypter(key, test.tweak, test.radix)
			assert.Nil(t, err)
		}

		// Encrypt in place.
		var dataInPlace = NumeralStringToBytes(test.in)
		encrypter.CryptBlocks(dataInPlace, dataInPlace)
		var resultInPlace = BytesToNumeralString(dataInPlace)

		assert.Equal(t, test.out, resultInPlace)

		// Encrypt not in place.
		var dataSrc = NumeralStringToBytes(test.in)
		var dataDst = make([]byte, len(dataSrc))
		encrypter.CryptBlocks(dataDst, dataSrc)
		var resultNotInPlace = BytesToNumeralString(dataDst)

		assert.Equal(t, dataSrc, NumeralStringToBytes(test.in))
		assert.Equal(t, test.out, resultNotInPlace)
	}
}

// This test uses the NIST test vectors to validate the FF3 decryption. Here we only
// check that the output is correct for both in place and not in place encryption.
func TestFF3Decrypter(t *testing.T) {
	for _, test := range ff3Tests {
		// The NIST standard require to reverse the key bytes for FF3.
		var key = RevB(test.key)

		var decrypter cipher.BlockMode
		{
			var err error
			decrypter, err = getFF3Decrypter(key, test.tweak, test.radix)
			assert.Nil(t, err)
		}

		// Decrypt in place.
		var dataInPlace = NumeralStringToBytes(test.out)
		decrypter.CryptBlocks(dataInPlace, dataInPlace)
		var resultInPlace = BytesToNumeralString(dataInPlace)

		assert.Equal(t, test.in, resultInPlace)

		// Decrypt not in place.
		var dataSrc = NumeralStringToBytes(test.out)
		var dataDst = make([]byte, len(dataSrc))
		decrypter.CryptBlocks(dataDst, dataSrc)
		var resultNotInPlace = BytesToNumeralString(dataDst)

		assert.Equal(t, dataSrc, NumeralStringToBytes(test.out))
		assert.Equal(t, test.in, resultNotInPlace)
	}
}

// This test check that the function SetTweak of the FF3Encrypter and FF3Decrypter works correctly.
func TestSetFF3Tweak(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff3DefaultKeySize, tweakLenFF3, 0)

	type fpeWithSetTweak interface {
		cipher.BlockMode
		SetTweak([]byte)
	}

	// FF3 Encrypter
	var encrypter cipher.BlockMode
	{
		var err error
		encrypter, err = getFF3Encrypter(key, tweak, uint32(ff3DefaultRadix))
		assert.Nil(t, err)
	}

	var encWithSetTweak fpeWithSetTweak
	{
		var ok bool
		encWithSetTweak, ok = encrypter.(fpeWithSetTweak)
		assert.True(t, ok)
		assert.NotNil(t, encWithSetTweak)
	}

	// Set valid tweak
	var f func()
	f = func() {
		var tweak = make([]byte, tweakLenFF3)
		encWithSetTweak.SetTweak(tweak)
	}
	assert.NotPanics(t, f)

	// Set invalid tweak
	f = func() {
		var tweak = make([]byte, tweakLenFF3+1)
		encWithSetTweak.SetTweak(tweak)
	}
	assert.Panics(t, f)

	// FF3 Decrypter
	var decrypter cipher.BlockMode
	{
		var err error
		decrypter, err = getFF3Decrypter(key, tweak, uint32(ff3DefaultRadix))
		assert.Nil(t, err)
	}

	var decWithSetTweak fpeWithSetTweak
	{
		var ok bool
		decWithSetTweak, ok = decrypter.(fpeWithSetTweak)
		assert.True(t, ok)
		assert.NotNil(t, decWithSetTweak)
	}

	// Set valid tweak
	f = func() {
		var tweak = make([]byte, tweakLenFF3)
		decWithSetTweak.SetTweak(tweak)
	}
	assert.NotPanics(t, f)

	// Set invalid tweak
	f = func() {
		var tweak = make([]byte, tweakLenFF3+1)
		decWithSetTweak.SetTweak(tweak)
	}
	assert.Panics(t, f)
}

// This test check that the function SetRadix of the FF3Encrypter and FF3Decrypter works correctly.
func TestSetFF3Radix(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff3DefaultKeySize, tweakLenFF3, 0)

	var radix = uint32(rand.Intn(20) + minRadixFF3)
	var otherRadix uint32 = radix + 10

	type fpeWithSetRadix interface {
		cipher.BlockMode
		SetRadix(uint32)
	}

	// We take inputs length at random between 7 and maxlen(radix)(see ff3.go). We set the lower bound to 7 so
	// we always satisfy the condition radix^len >= 100 (minRadix = 2).
	var l = int(rand.Uint32()%uint32(maxLength(otherRadix)-7)) + 7
	var plaintextRadix = generateRandomNumeralString(radix, l)
	var plaintextOtherRadix = generateRandomNumeralString(otherRadix, l)
	var plaintextBytes = make([]byte, 2*len(plaintextRadix))
	var ciphertextBytes = make([]byte, 2*len(plaintextRadix))
	var ciphertextRadix = make([]uint16, len(plaintextRadix))
	var ciphertextOtherRadix = make([]uint16, len(plaintextOtherRadix))
	var decryptedRadix = make([]uint16, len(plaintextRadix))
	var decryptedOtherRadix = make([]uint16, len(plaintextOtherRadix))

	// Encipher plaintext
	var encrypter cipher.BlockMode
	{
		var err error
		encrypter, err = getFF3Encrypter(key, tweak, radix)
		assert.Nil(t, err)
	}

	var encrypterWithSetRadix fpeWithSetRadix
	{
		var ok bool
		encrypterWithSetRadix, ok = encrypter.(fpeWithSetRadix)
		assert.True(t, ok)
	}
	encrypterWithSetRadix.CryptBlocks(ciphertextBytes, NumeralStringToBytes(plaintextRadix))
	ciphertextRadix = BytesToNumeralString(ciphertextBytes)

	// Change radix to otherRadix, then encipher
	encrypterWithSetRadix.SetRadix(otherRadix)
	encrypterWithSetRadix.CryptBlocks(ciphertextBytes, NumeralStringToBytes(plaintextOtherRadix))
	ciphertextOtherRadix = BytesToNumeralString(ciphertextBytes)

	// Decipher ciphertext
	var decrypter cipher.BlockMode
	{
		var err error
		decrypter, err = getFF3Decrypter(key, tweak, radix)
		assert.Nil(t, err)
	}

	var decrypterWithSetRadix fpeWithSetRadix
	{
		var ok bool
		decrypterWithSetRadix, ok = decrypter.(fpeWithSetRadix)
		assert.True(t, ok)

	}
	decrypterWithSetRadix.CryptBlocks(plaintextBytes, NumeralStringToBytes(ciphertextRadix))
	decryptedRadix = BytesToNumeralString(plaintextBytes)

	// Change radix to otherRadix, then decipher
	decrypterWithSetRadix.SetRadix(otherRadix)
	decrypterWithSetRadix.CryptBlocks(plaintextBytes, NumeralStringToBytes(ciphertextOtherRadix))
	decryptedOtherRadix = BytesToNumeralString(plaintextBytes)

	assert.Equal(t, plaintextRadix, decryptedRadix)
	assert.Equal(t, plaintextOtherRadix, decryptedOtherRadix)

	// Set invalid radix
	var f func()
	f = func() {
		var radix = uint32(maxRadixFF3 + 1)
		encrypterWithSetRadix.SetRadix(radix)
	}
	assert.Panics(t, f)

	f = func() {
		var radix = uint32(maxRadixFF3 + 1)
		decrypterWithSetRadix.SetRadix(radix)
	}
	assert.Panics(t, f)
}

// This test uses the NIST test vectors to validate the p value for each encryption and decryption round.
func TestGetFF3P(t *testing.T) {
	for _, test := range ff3Tests {
		var radix = test.radix
		var tweak = test.tweak
		// For the first encryption round, the x value is the right half of the input numeral string.
		var x = test.in[test.u:]

		// Iter over each encryption round.
		var rounds = test.encRounds
		for i, round := range rounds {
			var expectedP = round.p
			var w []byte
			if i%2 == 0 {
				w = tweak[4:]
			} else {
				w = tweak[:4]
			}
			var p = getFF3P(w, uint32(i), radix, x)
			// The x value is the numeral string b from the previous round.
			x = round.b

			assert.Equal(t, p, expectedP)
		}

		// For the first decryption round, the x value is the left half of the output numeral string.
		x = test.out[:test.u]
		// Iter over each decryption round.
		rounds = test.decRounds
		for i, round := range rounds {
			var expectedP = round.p
			var w []byte
			var idx = uint64(roundsFF3 - i - 1)
			if idx%2 == 0 {
				w = tweak[4:]
			} else {
				w = tweak[:4]
			}
			var p = getFF3P(w, uint32(idx), radix, x)
			// The x value is the numeral string a from the previous round.
			x = round.a

			assert.Equal(t, p, expectedP)
		}
	}
}

// This test uses the NIST test vectors to validate the s value for each encryption and decryption round.
func TestGetFF3S(t *testing.T) {
	for _, test := range ff3Tests {
		var aesBlock, err = aes.NewCipher(RevB(test.key))
		assert.Nil(t, err)

		// Iter over each encryption round.
		var rounds = test.encRounds
		for _, round := range rounds {
			var p = round.p
			var expectedS = round.s
			var s = getFF3S(p, aesBlock)

			assert.Equal(t, s, expectedS)
		}

		// Iter over each decryption round.
		rounds = test.decRounds
		for _, round := range rounds {
			var p = round.p
			var expectedS = round.s
			var s = getFF3S(p, aesBlock)

			assert.Equal(t, s, expectedS)
		}
	}
}

// This test uses the NIST test vectors to validate the y value for each encryption and decryption round.
func TestGetFF3Y(t *testing.T) {
	for _, test := range ff3Tests {
		// Iter over each encryption round.
		var rounds = test.encRounds
		for _, round := range rounds {
			var s = round.s
			var expectedY = &round.y
			var y = num(s)

			assert.Equal(t, y, expectedY)
		}

		// Iter over each decryption round.
		rounds = test.decRounds
		for _, round := range rounds {
			var s = round.s
			var expectedY = &round.y
			var y = num(s)

			assert.Equal(t, y, expectedY)
		}
	}
}

// This test uses the NIST test vectors to validate the c value for each encryption and decryption round.
func TestGetFF3C(t *testing.T) {
	for _, test := range ff3Tests {
		var radix = test.radix

		// For the first encryption round, the x value is the left half of the input numeral string.
		var x = test.in[:test.u]
		// Iter over each encryption round.
		var rounds = test.encRounds
		for i, round := range rounds {
			var m uint32
			if i%2 == 0 {
				m = test.u
			} else {
				m = test.v
			}
			var y = &round.y

			var expectedC = &round.c
			var c = getFF3CEnc(x, y, radix, m)
			// The x value is the numeral string a from the previous round.
			x = round.a

			assert.Equal(t, c, expectedC)
		}

		// For the first decryption round, the x value is the right half of the output numeral string.
		x = test.out[test.u:]
		// Iter over each decryption round.
		rounds = test.decRounds
		for i, round := range rounds {
			var m uint32
			var idx = roundsFF3 - i - 1
			if idx%2 == 0 {
				m = test.u
			} else {
				m = test.v
			}
			var y = &round.y

			var expectedC = &round.c
			var c = getFF3CDec(x, y, radix, m)
			// The x value is the numeral string b from the previous round.
			x = round.b

			assert.Equal(t, c, expectedC)
		}
	}
}

// This test generate a random key, tweak, radix and input. It encrypts, then decrpyts the result and check that
// the decrypted result matches the original plaintext.
func TestFF3EncryptionDecryption(t *testing.T) {
	for i := 0; i < nbrFF3Tests; i++ {
		var key, tweak, _ []byte = getRandomParameters(ff3DefaultKeySize, tweakLenFF3, 0)

		// Chose random radix between minRadixFF3 and maxRadixFF3
		var radix = (rand.Uint32() % (maxRadixFF3 - minRadixFF3)) + minRadixFF3
		// We take inputs length at random between 7 and maxlen(radix)(see ff3.go). We set the lower bound to 7 so
		// we always satisfy the condition radix^len >= 100 (minRadix = 2).
		var l = int(rand.Uint32()%uint32(maxLength(radix)-7)) + 7

		var encrypter cipher.BlockMode
		{
			var err error
			encrypter, err = getFF3Encrypter(key, tweak, radix)
			assert.Nil(t, err)
		}
		var decrypter cipher.BlockMode
		{
			var err error
			decrypter, err = getFF3Decrypter(key, tweak, radix)
			assert.Nil(t, err)
		}

		// Encrypt random numeral string with random key
		var plaintext = generateRandomNumeralString(radix, l)
		var src = NumeralStringToBytes(plaintext)
		var dst = make([]byte, len(src))
		encrypter.CryptBlocks(dst, src)
		var ciphertext = BytesToNumeralString(dst)

		// Decrypt ciphertext
		src = NumeralStringToBytes(ciphertext)
		decrypter.CryptBlocks(dst, src)
		var decrypted = BytesToNumeralString(dst)

		assert.Equal(t, plaintext, decrypted)
	}
}

func TestFF3CornerCases(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff3DefaultKeySize, tweakLenFF3, 0)
	var radix = uint32(maxRadixFF3)
	var l = maxLength(radix)

	var encrypter cipher.BlockMode
	{
		var err error
		encrypter, err = getFF3Encrypter(key, tweak, radix)
		assert.Nil(t, err)
	}
	var decrypter cipher.BlockMode
	{
		var err error
		decrypter, err = getFF3Decrypter(key, tweak, radix)
		assert.Nil(t, err)
	}

	// Encrypt
	var plaintext = make([]uint16, l)
	for i := 0; i < l; i++ {
		plaintext[i] = maxRadixFF3 - 1
	}
	var src = NumeralStringToBytes(plaintext)
	var dst = make([]byte, len(src))
	encrypter.CryptBlocks(dst, src)
	var ciphertext = BytesToNumeralString(dst)

	// Decrypt
	src = NumeralStringToBytes(ciphertext)
	decrypter.CryptBlocks(dst, src)
	var decrypted = BytesToNumeralString(dst)

	assert.Equal(t, plaintext, decrypted)
}

func TestFF3BlockSize(t *testing.T) {
	var key, tweak, _ []byte = getRandomParameters(ff3DefaultKeySize, tweakLenFF3, 0)
	var radix = uint32(rand.Intn(1000) + minRadixFF3)

	var encrypter cipher.BlockMode
	{
		var err error
		encrypter, err = getFF3Encrypter(key, tweak, radix)
		assert.Nil(t, err)
	}
	var decrypter cipher.BlockMode
	{
		var err error
		decrypter, err = getFF3Decrypter(key, tweak, radix)
		assert.Nil(t, err)
	}

	assert.Equal(t, blockSizeFF3, encrypter.BlockSize())
	assert.Equal(t, blockSizeFF3, decrypter.BlockSize())
}

func getFF3Encrypter(key, tweak []byte, radix uint32) (cipher.BlockMode, error) {
	// Create AES Block used by FF3.
	var aesBlock, err = aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	// Create FF3 Encrypter
	var encrypter = NewFF3Encrypter(aesBlock, tweak, radix)

	return encrypter, nil
}

func getFF3Decrypter(key, tweak []byte, radix uint32) (cipher.BlockMode, error) {
	// Create AES Block used by FF3.
	var aesBlock, err = aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	// Create FF3 Decrypter
	var decrypter = NewFF3Decrypter(aesBlock, tweak, radix)

	return decrypter, nil
}
